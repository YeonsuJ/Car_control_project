
Unit_car_central.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007de0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001104  08007fb0  08007fb0  00008fb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090b4  080090b4  0000b1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080090b4  080090b4  0000a0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090bc  080090bc  0000b1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090bc  080090bc  0000a0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080090c0  080090c0  0000a0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  080090c4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c4  200001e4  080092a8  0000b1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a8  080092a8  0000b8a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4f2  00000000  00000000  0000b214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000286a  00000000  00000000  0001a706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  0001cf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf3  00000000  00000000  0001ded8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023992  00000000  00000000  0001eacb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fb5  00000000  00000000  0004245d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d34ba  00000000  00000000  00056412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001298cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005128  00000000  00000000  00129910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0012ea38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007f98 	.word	0x08007f98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08007f98 	.word	0x08007f98

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	@ 0x28
 8000f18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	4b4d      	ldr	r3, [pc, #308]	@ (8001064 <MX_GPIO_Init+0x150>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a4c      	ldr	r2, [pc, #304]	@ (8001064 <MX_GPIO_Init+0x150>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b4a      	ldr	r3, [pc, #296]	@ (8001064 <MX_GPIO_Init+0x150>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b46      	ldr	r3, [pc, #280]	@ (8001064 <MX_GPIO_Init+0x150>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4a45      	ldr	r2, [pc, #276]	@ (8001064 <MX_GPIO_Init+0x150>)
 8000f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4b43      	ldr	r3, [pc, #268]	@ (8001064 <MX_GPIO_Init+0x150>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	4b3f      	ldr	r3, [pc, #252]	@ (8001064 <MX_GPIO_Init+0x150>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	4a3e      	ldr	r2, [pc, #248]	@ (8001064 <MX_GPIO_Init+0x150>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f72:	4b3c      	ldr	r3, [pc, #240]	@ (8001064 <MX_GPIO_Init+0x150>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	4b38      	ldr	r3, [pc, #224]	@ (8001064 <MX_GPIO_Init+0x150>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	4a37      	ldr	r2, [pc, #220]	@ (8001064 <MX_GPIO_Init+0x150>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8e:	4b35      	ldr	r3, [pc, #212]	@ (8001064 <MX_GPIO_Init+0x150>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2120      	movs	r1, #32
 8000f9e:	4832      	ldr	r0, [pc, #200]	@ (8001068 <MX_GPIO_Init+0x154>)
 8000fa0:	f001 fc1c 	bl	80027dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2130      	movs	r1, #48	@ 0x30
 8000fa8:	4830      	ldr	r0, [pc, #192]	@ (800106c <MX_GPIO_Init+0x158>)
 8000faa:	f001 fc17 	bl	80027dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fb4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	482a      	ldr	r0, [pc, #168]	@ (8001070 <MX_GPIO_Init+0x15c>)
 8000fc6:	f001 fa5d 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fca:	230c      	movs	r3, #12
 8000fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fda:	2307      	movs	r3, #7
 8000fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4820      	ldr	r0, [pc, #128]	@ (8001068 <MX_GPIO_Init+0x154>)
 8000fe6:	f001 fa4d 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fea:	2320      	movs	r3, #32
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	4819      	ldr	r0, [pc, #100]	@ (8001068 <MX_GPIO_Init+0x154>)
 8001002:	f001 fa3f 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001006:	2303      	movs	r3, #3
 8001008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800100a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800100e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	4814      	ldr	r0, [pc, #80]	@ (800106c <MX_GPIO_Init+0x158>)
 800101c:	f001 fa32 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001020:	2330      	movs	r3, #48	@ 0x30
 8001022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	480d      	ldr	r0, [pc, #52]	@ (800106c <MX_GPIO_Init+0x158>)
 8001038:	f001 fa24 	bl	8002484 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800103c:	2200      	movs	r2, #0
 800103e:	2100      	movs	r1, #0
 8001040:	2006      	movs	r0, #6
 8001042:	f001 f9e8 	bl	8002416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001046:	2006      	movs	r0, #6
 8001048:	f001 fa01 	bl	800244e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	2100      	movs	r1, #0
 8001050:	2007      	movs	r0, #7
 8001052:	f001 f9e0 	bl	8002416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001056:	2007      	movs	r0, #7
 8001058:	f001 f9f9 	bl	800244e <HAL_NVIC_EnableIRQ>

}
 800105c:	bf00      	nop
 800105e:	3728      	adds	r7, #40	@ 0x28
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40020000 	.word	0x40020000
 800106c:	40020400 	.word	0x40020400
 8001070:	40020800 	.word	0x40020800

08001074 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001078:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <MX_I2C2_Init+0x50>)
 800107a:	4a13      	ldr	r2, [pc, #76]	@ (80010c8 <MX_I2C2_Init+0x54>)
 800107c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800107e:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <MX_I2C2_Init+0x50>)
 8001080:	4a12      	ldr	r2, [pc, #72]	@ (80010cc <MX_I2C2_Init+0x58>)
 8001082:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001084:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <MX_I2C2_Init+0x50>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <MX_I2C2_Init+0x50>)
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001090:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <MX_I2C2_Init+0x50>)
 8001092:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001096:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001098:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <MX_I2C2_Init+0x50>)
 800109a:	2200      	movs	r2, #0
 800109c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <MX_I2C2_Init+0x50>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a4:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <MX_I2C2_Init+0x50>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <MX_I2C2_Init+0x50>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010b0:	4804      	ldr	r0, [pc, #16]	@ (80010c4 <MX_I2C2_Init+0x50>)
 80010b2:	f001 fbc5 	bl	8002840 <HAL_I2C_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010bc:	f000 fa4c 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000200 	.word	0x20000200
 80010c8:	40005800 	.word	0x40005800
 80010cc:	00061a80 	.word	0x00061a80

080010d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	@ 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a29      	ldr	r2, [pc, #164]	@ (8001194 <HAL_I2C_MspInit+0xc4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d14b      	bne.n	800118a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	4b28      	ldr	r3, [pc, #160]	@ (8001198 <HAL_I2C_MspInit+0xc8>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	4a27      	ldr	r2, [pc, #156]	@ (8001198 <HAL_I2C_MspInit+0xc8>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	6313      	str	r3, [r2, #48]	@ 0x30
 8001102:	4b25      	ldr	r3, [pc, #148]	@ (8001198 <HAL_I2C_MspInit+0xc8>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <HAL_I2C_MspInit+0xc8>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a20      	ldr	r2, [pc, #128]	@ (8001198 <HAL_I2C_MspInit+0xc8>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b1e      	ldr	r3, [pc, #120]	@ (8001198 <HAL_I2C_MspInit+0xc8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800112a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001130:	2312      	movs	r3, #18
 8001132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800113c:	2304      	movs	r3, #4
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4815      	ldr	r0, [pc, #84]	@ (800119c <HAL_I2C_MspInit+0xcc>)
 8001148:	f001 f99c 	bl	8002484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800114c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001152:	2312      	movs	r3, #18
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800115e:	2304      	movs	r3, #4
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	480d      	ldr	r0, [pc, #52]	@ (80011a0 <HAL_I2C_MspInit+0xd0>)
 800116a:	f001 f98b 	bl	8002484 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <HAL_I2C_MspInit+0xc8>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001176:	4a08      	ldr	r2, [pc, #32]	@ (8001198 <HAL_I2C_MspInit+0xc8>)
 8001178:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800117c:	6413      	str	r3, [r2, #64]	@ 0x40
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_I2C_MspInit+0xc8>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800118a:	bf00      	nop
 800118c:	3728      	adds	r7, #40	@ 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40005800 	.word	0x40005800
 8001198:	40023800 	.word	0x40023800
 800119c:	40020400 	.word	0x40020400
 80011a0:	40020800 	.word	0x40020800

080011a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a8:	f000 ffe8 	bl	800217c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ac:	f000 f82c 	bl	8001208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b0:	f7ff feb0 	bl	8000f14 <MX_GPIO_Init>
  MX_TIM3_Init();
 80011b4:	f000 fe30 	bl	8001e18 <MX_TIM3_Init>
  MX_TIM4_Init();
 80011b8:	f000 fe82 	bl	8001ec0 <MX_TIM4_Init>
  MX_I2C2_Init();
 80011bc:	f7ff ff5a 	bl	8001074 <MX_I2C2_Init>
  MX_TIM2_Init();
 80011c0:	f000 fdde 	bl	8001d80 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80011c4:	f000 f9ce 	bl	8001564 <SSD1306_Init>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80011c8:	213c      	movs	r1, #60	@ 0x3c
 80011ca:	480b      	ldr	r0, [pc, #44]	@ (80011f8 <main+0x54>)
 80011cc:	f003 f9b0 	bl	8004530 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80011d0:	2108      	movs	r1, #8
 80011d2:	480a      	ldr	r0, [pc, #40]	@ (80011fc <main+0x58>)
 80011d4:	f003 f83e 	bl	8004254 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80011d8:	4809      	ldr	r0, [pc, #36]	@ (8001200 <main+0x5c>)
 80011da:	f002 ff71 	bl	80040c0 <HAL_TIM_Base_Start_IT>
//  uint8_t state = 0;
//
//  static uint32_t state_durations[] = {5000, 2000, 5000, 2000};  // 각 상태 지속시간 (ms)

  // 모터 전진 방향 설정
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);  // in1 = 0
 80011de:	2200      	movs	r2, #0
 80011e0:	2110      	movs	r1, #16
 80011e2:	4808      	ldr	r0, [pc, #32]	@ (8001204 <main+0x60>)
 80011e4:	f001 fafa 	bl	80027dc <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);    // in2 = 1
 80011e8:	2201      	movs	r2, #1
 80011ea:	2120      	movs	r1, #32
 80011ec:	4805      	ldr	r0, [pc, #20]	@ (8001204 <main+0x60>)
 80011ee:	f001 faf5 	bl	80027dc <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011f2:	bf00      	nop
 80011f4:	e7fd      	b.n	80011f2 <main+0x4e>
 80011f6:	bf00      	nop
 80011f8:	200006c8 	.word	0x200006c8
 80011fc:	20000710 	.word	0x20000710
 8001200:	20000680 	.word	0x20000680
 8001204:	40020400 	.word	0x40020400

08001208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b094      	sub	sp, #80	@ 0x50
 800120c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	2234      	movs	r2, #52	@ 0x34
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f004 fdf1 	bl	8005dfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	4b2c      	ldr	r3, [pc, #176]	@ (80012e4 <SystemClock_Config+0xdc>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001234:	4a2b      	ldr	r2, [pc, #172]	@ (80012e4 <SystemClock_Config+0xdc>)
 8001236:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800123a:	6413      	str	r3, [r2, #64]	@ 0x40
 800123c:	4b29      	ldr	r3, [pc, #164]	@ (80012e4 <SystemClock_Config+0xdc>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001248:	2300      	movs	r3, #0
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	4b26      	ldr	r3, [pc, #152]	@ (80012e8 <SystemClock_Config+0xe0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a25      	ldr	r2, [pc, #148]	@ (80012e8 <SystemClock_Config+0xe0>)
 8001252:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	4b23      	ldr	r3, [pc, #140]	@ (80012e8 <SystemClock_Config+0xe0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001264:	2302      	movs	r3, #2
 8001266:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001268:	2301      	movs	r3, #1
 800126a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800126c:	2310      	movs	r3, #16
 800126e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001270:	2302      	movs	r3, #2
 8001272:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001274:	2300      	movs	r3, #0
 8001276:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001278:	2308      	movs	r3, #8
 800127a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800127c:	23b4      	movs	r3, #180	@ 0xb4
 800127e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001280:	2302      	movs	r3, #2
 8001282:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001284:	2302      	movs	r3, #2
 8001286:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001288:	2302      	movs	r3, #2
 800128a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	4618      	mov	r0, r3
 8001292:	f002 fc27 	bl	8003ae4 <HAL_RCC_OscConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800129c:	f000 f95c 	bl	8001558 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012a0:	f002 f89a 	bl	80033d8 <HAL_PWREx_EnableOverDrive>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012aa:	f000 f955 	bl	8001558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ae:	230f      	movs	r3, #15
 80012b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b2:	2302      	movs	r3, #2
 80012b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012ba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	2105      	movs	r1, #5
 80012cc:	4618      	mov	r0, r3
 80012ce:	f002 f8d3 	bl	8003478 <HAL_RCC_ClockConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80012d8:	f000 f93e 	bl	8001558 <Error_Handler>
  }
}
 80012dc:	bf00      	nop
 80012de:	3750      	adds	r7, #80	@ 0x50
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40007000 	.word	0x40007000

080012ec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	80fb      	strh	r3, [r7, #6]
    uint32_t now = HAL_GetTick();
 80012f6:	f000 ffa7 	bl	8002248 <HAL_GetTick>
 80012fa:	60f8      	str	r0, [r7, #12]

    if (GPIO_Pin == GPIO_PIN_0)  // Accel 버튼
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d117      	bne.n	8001332 <HAL_GPIO_EXTI_Callback+0x46>
    {
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET)
 8001302:	2101      	movs	r1, #1
 8001304:	481a      	ldr	r0, [pc, #104]	@ (8001370 <HAL_GPIO_EXTI_Callback+0x84>)
 8001306:	f001 fa51 	bl	80027ac <HAL_GPIO_ReadPin>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d109      	bne.n	8001324 <HAL_GPIO_EXTI_Callback+0x38>
        {
            // 눌림이 감지된 순간(하강), 디바운싱 여부와 상관없이 초기화
            accel_pressed = 1;
 8001310:	4b18      	ldr	r3, [pc, #96]	@ (8001374 <HAL_GPIO_EXTI_Callback+0x88>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
            accel_count = 0;
 8001316:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
            prev_tick_accel = now;
 800131c:	4a17      	ldr	r2, [pc, #92]	@ (800137c <HAL_GPIO_EXTI_Callback+0x90>)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6013      	str	r3, [r2, #0]
            // 떼짐(상승)은 즉시 pressed=0 처리
            brake_pressed = 0;
            prev_tick_brake = now;
        }
    }
}
 8001322:	e020      	b.n	8001366 <HAL_GPIO_EXTI_Callback+0x7a>
            accel_pressed = 0;
 8001324:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <HAL_GPIO_EXTI_Callback+0x88>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
            prev_tick_accel = now;
 800132a:	4a14      	ldr	r2, [pc, #80]	@ (800137c <HAL_GPIO_EXTI_Callback+0x90>)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	e019      	b.n	8001366 <HAL_GPIO_EXTI_Callback+0x7a>
    else if (GPIO_Pin == GPIO_PIN_1)  // Brake 버튼
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d116      	bne.n	8001366 <HAL_GPIO_EXTI_Callback+0x7a>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET)
 8001338:	2102      	movs	r1, #2
 800133a:	480d      	ldr	r0, [pc, #52]	@ (8001370 <HAL_GPIO_EXTI_Callback+0x84>)
 800133c:	f001 fa36 	bl	80027ac <HAL_GPIO_ReadPin>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d109      	bne.n	800135a <HAL_GPIO_EXTI_Callback+0x6e>
            brake_pressed = 1;
 8001346:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <HAL_GPIO_EXTI_Callback+0x94>)
 8001348:	2201      	movs	r2, #1
 800134a:	701a      	strb	r2, [r3, #0]
            brake_count = 0;
 800134c:	4b0d      	ldr	r3, [pc, #52]	@ (8001384 <HAL_GPIO_EXTI_Callback+0x98>)
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
            prev_tick_brake = now;
 8001352:	4a0d      	ldr	r2, [pc, #52]	@ (8001388 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	e005      	b.n	8001366 <HAL_GPIO_EXTI_Callback+0x7a>
            brake_pressed = 0;
 800135a:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <HAL_GPIO_EXTI_Callback+0x94>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
            prev_tick_brake = now;
 8001360:	4a09      	ldr	r2, [pc, #36]	@ (8001388 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6013      	str	r3, [r2, #0]
}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40020400 	.word	0x40020400
 8001374:	2000025c 	.word	0x2000025c
 8001378:	20000260 	.word	0x20000260
 800137c:	20000268 	.word	0x20000268
 8001380:	2000025d 	.word	0x2000025d
 8001384:	20000264 	.word	0x20000264
 8001388:	2000026c 	.word	0x2000026c

0800138c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b090      	sub	sp, #64	@ 0x40
 8001390:	af02      	add	r7, sp, #8
 8001392:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800139c:	f040 80b5 	bne.w	800150a <HAL_TIM_PeriodElapsedCallback+0x17e>
	    {
			// 1) RPM 업데이트
			int16_t enc = __HAL_TIM_GET_COUNTER(&htim3);
 80013a0:	4b5c      	ldr	r3, [pc, #368]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
			int32_t delta = (int16_t)(enc - last_encoder);
 80013a8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80013aa:	4b5b      	ldr	r3, [pc, #364]	@ (8001518 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80013ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	b21b      	sxth	r3, r3
 80013b8:	633b      	str	r3, [r7, #48]	@ 0x30
			last_encoder = enc;
 80013ba:	4a57      	ldr	r2, [pc, #348]	@ (8001518 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80013bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80013be:	8013      	strh	r3, [r2, #0]

			motor_rpm = ((float)delta / TICKS_PER_REV) * 50.0f * 60.0f;
 80013c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ca:	eddf 6a54 	vldr	s13, [pc, #336]	@ 800151c <HAL_TIM_PeriodElapsedCallback+0x190>
 80013ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013d2:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001520 <HAL_TIM_PeriodElapsedCallback+0x194>
 80013d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013da:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001524 <HAL_TIM_PeriodElapsedCallback+0x198>
 80013de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e2:	4b51      	ldr	r3, [pc, #324]	@ (8001528 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80013e4:	edc3 7a00 	vstr	s15, [r3]
			// 주기 20ms이므로 1초에 50번 호출됨 → ×50 ×60 으로 환산

	        // 2) 버튼 누름 시간 카운트
	        if (accel_pressed) accel_count++;
 80013e8:	4b50      	ldr	r3, [pc, #320]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d004      	beq.n	80013fa <HAL_TIM_PeriodElapsedCallback+0x6e>
 80013f0:	4b4f      	ldr	r3, [pc, #316]	@ (8001530 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	3301      	adds	r3, #1
 80013f6:	4a4e      	ldr	r2, [pc, #312]	@ (8001530 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80013f8:	6013      	str	r3, [r2, #0]
	        if (brake_pressed) brake_count++;
 80013fa:	4b4e      	ldr	r3, [pc, #312]	@ (8001534 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d004      	beq.n	800140c <HAL_TIM_PeriodElapsedCallback+0x80>
 8001402:	4b4d      	ldr	r3, [pc, #308]	@ (8001538 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	3301      	adds	r3, #1
 8001408:	4a4b      	ldr	r2, [pc, #300]	@ (8001538 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800140a:	6013      	str	r3, [r2, #0]


	        // 3) PWM duty 제어
	        if (brake_pressed) //brake부터 체크해야 동시에 누를 때 brake가 우선처리됨
 800140c:	4b49      	ldr	r3, [pc, #292]	@ (8001534 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00c      	beq.n	800142e <HAL_TIM_PeriodElapsedCallback+0xa2>
	        {
	        	duty -= accel_step * 5;
 8001414:	4b49      	ldr	r3, [pc, #292]	@ (800153c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4613      	mov	r3, r2
 800141a:	079b      	lsls	r3, r3, #30
 800141c:	1a9b      	subs	r3, r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	1a9a      	subs	r2, r3, r2
 8001422:	4b47      	ldr	r3, [pc, #284]	@ (8001540 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4413      	add	r3, r2
 8001428:	4a45      	ldr	r2, [pc, #276]	@ (8001540 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	e01a      	b.n	8001464 <HAL_TIM_PeriodElapsedCallback+0xd8>
	        }
	        else if (accel_pressed)
 800142e:	4b3f      	ldr	r3, [pc, #252]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00f      	beq.n	8001456 <HAL_TIM_PeriodElapsedCallback+0xca>
	        {
	        	if (duty ==0) duty = 200; // deadzone으로 인해 초기값 수정
 8001436:	4b42      	ldr	r3, [pc, #264]	@ (8001540 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d103      	bne.n	8001446 <HAL_TIM_PeriodElapsedCallback+0xba>
 800143e:	4b40      	ldr	r3, [pc, #256]	@ (8001540 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001440:	22c8      	movs	r2, #200	@ 0xc8
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	e00e      	b.n	8001464 <HAL_TIM_PeriodElapsedCallback+0xd8>
	        	else duty += accel_step;
 8001446:	4b3e      	ldr	r3, [pc, #248]	@ (8001540 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4b3c      	ldr	r3, [pc, #240]	@ (800153c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a3b      	ldr	r2, [pc, #236]	@ (8001540 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	e006      	b.n	8001464 <HAL_TIM_PeriodElapsedCallback+0xd8>
	        }
	        else
	        {
	        	duty -= accel_step;
 8001456:	4b3a      	ldr	r3, [pc, #232]	@ (8001540 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b38      	ldr	r3, [pc, #224]	@ (800153c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	4a37      	ldr	r2, [pc, #220]	@ (8001540 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001462:	6013      	str	r3, [r2, #0]
	        }

	        // 4) duty 값 클램핑 (음수 또는 max 이상 방지)
			if (duty < 0) duty = 0;
 8001464:	4b36      	ldr	r3, [pc, #216]	@ (8001540 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	da02      	bge.n	8001472 <HAL_TIM_PeriodElapsedCallback+0xe6>
 800146c:	4b34      	ldr	r3, [pc, #208]	@ (8001540 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
			if (duty > max_duty) duty = max_duty;
 8001472:	4b33      	ldr	r3, [pc, #204]	@ (8001540 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4b33      	ldr	r3, [pc, #204]	@ (8001544 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	dd03      	ble.n	8001486 <HAL_TIM_PeriodElapsedCallback+0xfa>
 800147e:	4b31      	ldr	r3, [pc, #196]	@ (8001544 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a2f      	ldr	r2, [pc, #188]	@ (8001540 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001484:	6013      	str	r3, [r2, #0]

	        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, duty);
 8001486:	4b2e      	ldr	r3, [pc, #184]	@ (8001540 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4b2f      	ldr	r3, [pc, #188]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	63da      	str	r2, [r3, #60]	@ 0x3c


			// 4) OLED 출력
			char buffer1[20], buffer2[20];
			SSD1306_Clear(); // 화면 초기화 설정
 8001490:	f000 fa8b 	bl	80019aa <SSD1306_Clear>
			snprintf(buffer1, sizeof(buffer1), "DUTY: %.1f", (float)duty);
 8001494:	4b2a      	ldr	r3, [pc, #168]	@ (8001540 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	ee07 3a90 	vmov	s15, r3
 800149c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a0:	ee17 0a90 	vmov	r0, s15
 80014a4:	f7ff f870 	bl	8000588 <__aeabi_f2d>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	f107 001c 	add.w	r0, r7, #28
 80014b0:	e9cd 2300 	strd	r2, r3, [sp]
 80014b4:	4a25      	ldr	r2, [pc, #148]	@ (800154c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80014b6:	2114      	movs	r1, #20
 80014b8:	f004 fc28 	bl	8005d0c <sniprintf>
			SSD1306_GotoXY(0, 0);
 80014bc:	2100      	movs	r1, #0
 80014be:	2000      	movs	r0, #0
 80014c0:	f000 f9ba 	bl	8001838 <SSD1306_GotoXY>
			SSD1306_Puts(buffer1, &Font_11x18, 1);
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	2201      	movs	r2, #1
 80014ca:	4921      	ldr	r1, [pc, #132]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 fa47 	bl	8001960 <SSD1306_Puts>
			snprintf(buffer2, sizeof(buffer2), "RPM: %.1f", motor_rpm);
 80014d2:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f856 	bl	8000588 <__aeabi_f2d>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	f107 0008 	add.w	r0, r7, #8
 80014e4:	e9cd 2300 	strd	r2, r3, [sp]
 80014e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001554 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80014ea:	2114      	movs	r1, #20
 80014ec:	f004 fc0e 	bl	8005d0c <sniprintf>
			SSD1306_GotoXY(0, 20);
 80014f0:	2114      	movs	r1, #20
 80014f2:	2000      	movs	r0, #0
 80014f4:	f000 f9a0 	bl	8001838 <SSD1306_GotoXY>
	        SSD1306_Puts(buffer2, &Font_11x18, 1);
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	2201      	movs	r2, #1
 80014fe:	4914      	ldr	r1, [pc, #80]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001500:	4618      	mov	r0, r3
 8001502:	f000 fa2d 	bl	8001960 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8001506:	f000 f8f1 	bl	80016ec <SSD1306_UpdateScreen>
//        SSD1306_GotoXY(0, 20);
//        SSD1306_Puts(buffer2, &Font_11x18, 1);
//
//        SSD1306_UpdateScreen();
//    }
}
 800150a:	bf00      	nop
 800150c:	3738      	adds	r7, #56	@ 0x38
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200006c8 	.word	0x200006c8
 8001518:	20000254 	.word	0x20000254
 800151c:	446a4ccc 	.word	0x446a4ccc
 8001520:	42480000 	.word	0x42480000
 8001524:	42700000 	.word	0x42700000
 8001528:	20000258 	.word	0x20000258
 800152c:	2000025c 	.word	0x2000025c
 8001530:	20000260 	.word	0x20000260
 8001534:	2000025d 	.word	0x2000025d
 8001538:	20000264 	.word	0x20000264
 800153c:	20000008 	.word	0x20000008
 8001540:	20000270 	.word	0x20000270
 8001544:	2000000c 	.word	0x2000000c
 8001548:	20000710 	.word	0x20000710
 800154c:	08007fb0 	.word	0x08007fb0
 8001550:	20000000 	.word	0x20000000
 8001554:	08007fbc 	.word	0x08007fbc

08001558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i
}
 800155e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <Error_Handler+0x8>

08001564 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800156a:	f000 fa27 	bl	80019bc <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800156e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001572:	2201      	movs	r2, #1
 8001574:	2178      	movs	r1, #120	@ 0x78
 8001576:	485b      	ldr	r0, [pc, #364]	@ (80016e4 <SSD1306_Init+0x180>)
 8001578:	f001 fba4 	bl	8002cc4 <HAL_I2C_IsDeviceReady>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001582:	2300      	movs	r3, #0
 8001584:	e0a9      	b.n	80016da <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001586:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800158a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800158c:	e002      	b.n	8001594 <SSD1306_Init+0x30>
		p--;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3b01      	subs	r3, #1
 8001592:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f9      	bne.n	800158e <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800159a:	22ae      	movs	r2, #174	@ 0xae
 800159c:	2100      	movs	r1, #0
 800159e:	2078      	movs	r0, #120	@ 0x78
 80015a0:	f000 fa88 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80015a4:	2220      	movs	r2, #32
 80015a6:	2100      	movs	r1, #0
 80015a8:	2078      	movs	r0, #120	@ 0x78
 80015aa:	f000 fa83 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80015ae:	2210      	movs	r2, #16
 80015b0:	2100      	movs	r1, #0
 80015b2:	2078      	movs	r0, #120	@ 0x78
 80015b4:	f000 fa7e 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80015b8:	22b0      	movs	r2, #176	@ 0xb0
 80015ba:	2100      	movs	r1, #0
 80015bc:	2078      	movs	r0, #120	@ 0x78
 80015be:	f000 fa79 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80015c2:	22c8      	movs	r2, #200	@ 0xc8
 80015c4:	2100      	movs	r1, #0
 80015c6:	2078      	movs	r0, #120	@ 0x78
 80015c8:	f000 fa74 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80015cc:	2200      	movs	r2, #0
 80015ce:	2100      	movs	r1, #0
 80015d0:	2078      	movs	r0, #120	@ 0x78
 80015d2:	f000 fa6f 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80015d6:	2210      	movs	r2, #16
 80015d8:	2100      	movs	r1, #0
 80015da:	2078      	movs	r0, #120	@ 0x78
 80015dc:	f000 fa6a 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80015e0:	2240      	movs	r2, #64	@ 0x40
 80015e2:	2100      	movs	r1, #0
 80015e4:	2078      	movs	r0, #120	@ 0x78
 80015e6:	f000 fa65 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80015ea:	2281      	movs	r2, #129	@ 0x81
 80015ec:	2100      	movs	r1, #0
 80015ee:	2078      	movs	r0, #120	@ 0x78
 80015f0:	f000 fa60 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80015f4:	22ff      	movs	r2, #255	@ 0xff
 80015f6:	2100      	movs	r1, #0
 80015f8:	2078      	movs	r0, #120	@ 0x78
 80015fa:	f000 fa5b 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80015fe:	22a1      	movs	r2, #161	@ 0xa1
 8001600:	2100      	movs	r1, #0
 8001602:	2078      	movs	r0, #120	@ 0x78
 8001604:	f000 fa56 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001608:	22a6      	movs	r2, #166	@ 0xa6
 800160a:	2100      	movs	r1, #0
 800160c:	2078      	movs	r0, #120	@ 0x78
 800160e:	f000 fa51 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001612:	22a8      	movs	r2, #168	@ 0xa8
 8001614:	2100      	movs	r1, #0
 8001616:	2078      	movs	r0, #120	@ 0x78
 8001618:	f000 fa4c 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800161c:	223f      	movs	r2, #63	@ 0x3f
 800161e:	2100      	movs	r1, #0
 8001620:	2078      	movs	r0, #120	@ 0x78
 8001622:	f000 fa47 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001626:	22a4      	movs	r2, #164	@ 0xa4
 8001628:	2100      	movs	r1, #0
 800162a:	2078      	movs	r0, #120	@ 0x78
 800162c:	f000 fa42 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001630:	22d3      	movs	r2, #211	@ 0xd3
 8001632:	2100      	movs	r1, #0
 8001634:	2078      	movs	r0, #120	@ 0x78
 8001636:	f000 fa3d 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	2078      	movs	r0, #120	@ 0x78
 8001640:	f000 fa38 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001644:	22d5      	movs	r2, #213	@ 0xd5
 8001646:	2100      	movs	r1, #0
 8001648:	2078      	movs	r0, #120	@ 0x78
 800164a:	f000 fa33 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800164e:	22f0      	movs	r2, #240	@ 0xf0
 8001650:	2100      	movs	r1, #0
 8001652:	2078      	movs	r0, #120	@ 0x78
 8001654:	f000 fa2e 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001658:	22d9      	movs	r2, #217	@ 0xd9
 800165a:	2100      	movs	r1, #0
 800165c:	2078      	movs	r0, #120	@ 0x78
 800165e:	f000 fa29 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001662:	2222      	movs	r2, #34	@ 0x22
 8001664:	2100      	movs	r1, #0
 8001666:	2078      	movs	r0, #120	@ 0x78
 8001668:	f000 fa24 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800166c:	22da      	movs	r2, #218	@ 0xda
 800166e:	2100      	movs	r1, #0
 8001670:	2078      	movs	r0, #120	@ 0x78
 8001672:	f000 fa1f 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001676:	2212      	movs	r2, #18
 8001678:	2100      	movs	r1, #0
 800167a:	2078      	movs	r0, #120	@ 0x78
 800167c:	f000 fa1a 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001680:	22db      	movs	r2, #219	@ 0xdb
 8001682:	2100      	movs	r1, #0
 8001684:	2078      	movs	r0, #120	@ 0x78
 8001686:	f000 fa15 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800168a:	2220      	movs	r2, #32
 800168c:	2100      	movs	r1, #0
 800168e:	2078      	movs	r0, #120	@ 0x78
 8001690:	f000 fa10 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001694:	228d      	movs	r2, #141	@ 0x8d
 8001696:	2100      	movs	r1, #0
 8001698:	2078      	movs	r0, #120	@ 0x78
 800169a:	f000 fa0b 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800169e:	2214      	movs	r2, #20
 80016a0:	2100      	movs	r1, #0
 80016a2:	2078      	movs	r0, #120	@ 0x78
 80016a4:	f000 fa06 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80016a8:	22af      	movs	r2, #175	@ 0xaf
 80016aa:	2100      	movs	r1, #0
 80016ac:	2078      	movs	r0, #120	@ 0x78
 80016ae:	f000 fa01 	bl	8001ab4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80016b2:	222e      	movs	r2, #46	@ 0x2e
 80016b4:	2100      	movs	r1, #0
 80016b6:	2078      	movs	r0, #120	@ 0x78
 80016b8:	f000 f9fc 	bl	8001ab4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80016bc:	2000      	movs	r0, #0
 80016be:	f000 f843 	bl	8001748 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80016c2:	f000 f813 	bl	80016ec <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80016c6:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <SSD1306_Init+0x184>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <SSD1306_Init+0x184>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80016d2:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <SSD1306_Init+0x184>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80016d8:	2301      	movs	r3, #1
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000200 	.word	0x20000200
 80016e8:	20000674 	.word	0x20000674

080016ec <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80016f2:	2300      	movs	r3, #0
 80016f4:	71fb      	strb	r3, [r7, #7]
 80016f6:	e01d      	b.n	8001734 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	3b50      	subs	r3, #80	@ 0x50
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	461a      	mov	r2, r3
 8001700:	2100      	movs	r1, #0
 8001702:	2078      	movs	r0, #120	@ 0x78
 8001704:	f000 f9d6 	bl	8001ab4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001708:	2200      	movs	r2, #0
 800170a:	2100      	movs	r1, #0
 800170c:	2078      	movs	r0, #120	@ 0x78
 800170e:	f000 f9d1 	bl	8001ab4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001712:	2210      	movs	r2, #16
 8001714:	2100      	movs	r1, #0
 8001716:	2078      	movs	r0, #120	@ 0x78
 8001718:	f000 f9cc 	bl	8001ab4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	01db      	lsls	r3, r3, #7
 8001720:	4a08      	ldr	r2, [pc, #32]	@ (8001744 <SSD1306_UpdateScreen+0x58>)
 8001722:	441a      	add	r2, r3
 8001724:	2380      	movs	r3, #128	@ 0x80
 8001726:	2140      	movs	r1, #64	@ 0x40
 8001728:	2078      	movs	r0, #120	@ 0x78
 800172a:	f000 f95d 	bl	80019e8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	3301      	adds	r3, #1
 8001732:	71fb      	strb	r3, [r7, #7]
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	2b07      	cmp	r3, #7
 8001738:	d9de      	bls.n	80016f8 <SSD1306_UpdateScreen+0xc>
	}
}
 800173a:	bf00      	nop
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000274 	.word	0x20000274

08001748 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <SSD1306_Fill+0x14>
 8001758:	2300      	movs	r3, #0
 800175a:	e000      	b.n	800175e <SSD1306_Fill+0x16>
 800175c:	23ff      	movs	r3, #255	@ 0xff
 800175e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001762:	4619      	mov	r1, r3
 8001764:	4803      	ldr	r0, [pc, #12]	@ (8001774 <SSD1306_Fill+0x2c>)
 8001766:	f004 fb4a 	bl	8005dfe <memset>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000274 	.word	0x20000274

08001778 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	80fb      	strh	r3, [r7, #6]
 8001782:	460b      	mov	r3, r1
 8001784:	80bb      	strh	r3, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	70fb      	strb	r3, [r7, #3]
	if (
 800178a:	88fb      	ldrh	r3, [r7, #6]
 800178c:	2b7f      	cmp	r3, #127	@ 0x7f
 800178e:	d848      	bhi.n	8001822 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001790:	88bb      	ldrh	r3, [r7, #4]
 8001792:	2b3f      	cmp	r3, #63	@ 0x3f
 8001794:	d845      	bhi.n	8001822 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001796:	4b26      	ldr	r3, [pc, #152]	@ (8001830 <SSD1306_DrawPixel+0xb8>)
 8001798:	791b      	ldrb	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d006      	beq.n	80017ac <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800179e:	78fb      	ldrb	r3, [r7, #3]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	bf0c      	ite	eq
 80017a4:	2301      	moveq	r3, #1
 80017a6:	2300      	movne	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80017ac:	78fb      	ldrb	r3, [r7, #3]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d11a      	bne.n	80017e8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80017b2:	88fa      	ldrh	r2, [r7, #6]
 80017b4:	88bb      	ldrh	r3, [r7, #4]
 80017b6:	08db      	lsrs	r3, r3, #3
 80017b8:	b298      	uxth	r0, r3
 80017ba:	4603      	mov	r3, r0
 80017bc:	01db      	lsls	r3, r3, #7
 80017be:	4413      	add	r3, r2
 80017c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001834 <SSD1306_DrawPixel+0xbc>)
 80017c2:	5cd3      	ldrb	r3, [r2, r3]
 80017c4:	b25a      	sxtb	r2, r3
 80017c6:	88bb      	ldrh	r3, [r7, #4]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	2101      	movs	r1, #1
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	b25b      	sxtb	r3, r3
 80017d4:	4313      	orrs	r3, r2
 80017d6:	b259      	sxtb	r1, r3
 80017d8:	88fa      	ldrh	r2, [r7, #6]
 80017da:	4603      	mov	r3, r0
 80017dc:	01db      	lsls	r3, r3, #7
 80017de:	4413      	add	r3, r2
 80017e0:	b2c9      	uxtb	r1, r1
 80017e2:	4a14      	ldr	r2, [pc, #80]	@ (8001834 <SSD1306_DrawPixel+0xbc>)
 80017e4:	54d1      	strb	r1, [r2, r3]
 80017e6:	e01d      	b.n	8001824 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80017e8:	88fa      	ldrh	r2, [r7, #6]
 80017ea:	88bb      	ldrh	r3, [r7, #4]
 80017ec:	08db      	lsrs	r3, r3, #3
 80017ee:	b298      	uxth	r0, r3
 80017f0:	4603      	mov	r3, r0
 80017f2:	01db      	lsls	r3, r3, #7
 80017f4:	4413      	add	r3, r2
 80017f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001834 <SSD1306_DrawPixel+0xbc>)
 80017f8:	5cd3      	ldrb	r3, [r2, r3]
 80017fa:	b25a      	sxtb	r2, r3
 80017fc:	88bb      	ldrh	r3, [r7, #4]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	2101      	movs	r1, #1
 8001804:	fa01 f303 	lsl.w	r3, r1, r3
 8001808:	b25b      	sxtb	r3, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	b25b      	sxtb	r3, r3
 800180e:	4013      	ands	r3, r2
 8001810:	b259      	sxtb	r1, r3
 8001812:	88fa      	ldrh	r2, [r7, #6]
 8001814:	4603      	mov	r3, r0
 8001816:	01db      	lsls	r3, r3, #7
 8001818:	4413      	add	r3, r2
 800181a:	b2c9      	uxtb	r1, r1
 800181c:	4a05      	ldr	r2, [pc, #20]	@ (8001834 <SSD1306_DrawPixel+0xbc>)
 800181e:	54d1      	strb	r1, [r2, r3]
 8001820:	e000      	b.n	8001824 <SSD1306_DrawPixel+0xac>
		return;
 8001822:	bf00      	nop
	}
}
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000674 	.word	0x20000674
 8001834:	20000274 	.word	0x20000274

08001838 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	460a      	mov	r2, r1
 8001842:	80fb      	strh	r3, [r7, #6]
 8001844:	4613      	mov	r3, r2
 8001846:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001848:	4a05      	ldr	r2, [pc, #20]	@ (8001860 <SSD1306_GotoXY+0x28>)
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800184e:	4a04      	ldr	r2, [pc, #16]	@ (8001860 <SSD1306_GotoXY+0x28>)
 8001850:	88bb      	ldrh	r3, [r7, #4]
 8001852:	8053      	strh	r3, [r2, #2]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	20000674 	.word	0x20000674

08001864 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
 8001870:	4613      	mov	r3, r2
 8001872:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001874:	4b39      	ldr	r3, [pc, #228]	@ (800195c <SSD1306_Putc+0xf8>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	4413      	add	r3, r2
	if (
 8001880:	2b7f      	cmp	r3, #127	@ 0x7f
 8001882:	dc07      	bgt.n	8001894 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001884:	4b35      	ldr	r3, [pc, #212]	@ (800195c <SSD1306_Putc+0xf8>)
 8001886:	885b      	ldrh	r3, [r3, #2]
 8001888:	461a      	mov	r2, r3
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	785b      	ldrb	r3, [r3, #1]
 800188e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001890:	2b3f      	cmp	r3, #63	@ 0x3f
 8001892:	dd01      	ble.n	8001898 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001894:	2300      	movs	r3, #0
 8001896:	e05d      	b.n	8001954 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	e04b      	b.n	8001936 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	3b20      	subs	r3, #32
 80018a6:	6839      	ldr	r1, [r7, #0]
 80018a8:	7849      	ldrb	r1, [r1, #1]
 80018aa:	fb01 f303 	mul.w	r3, r1, r3
 80018ae:	4619      	mov	r1, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	440b      	add	r3, r1
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80018bc:	2300      	movs	r3, #0
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	e030      	b.n	8001924 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d010      	beq.n	80018f4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80018d2:	4b22      	ldr	r3, [pc, #136]	@ (800195c <SSD1306_Putc+0xf8>)
 80018d4:	881a      	ldrh	r2, [r3, #0]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	4413      	add	r3, r2
 80018dc:	b298      	uxth	r0, r3
 80018de:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <SSD1306_Putc+0xf8>)
 80018e0:	885a      	ldrh	r2, [r3, #2]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	79ba      	ldrb	r2, [r7, #6]
 80018ec:	4619      	mov	r1, r3
 80018ee:	f7ff ff43 	bl	8001778 <SSD1306_DrawPixel>
 80018f2:	e014      	b.n	800191e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80018f4:	4b19      	ldr	r3, [pc, #100]	@ (800195c <SSD1306_Putc+0xf8>)
 80018f6:	881a      	ldrh	r2, [r3, #0]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	b298      	uxth	r0, r3
 8001900:	4b16      	ldr	r3, [pc, #88]	@ (800195c <SSD1306_Putc+0xf8>)
 8001902:	885a      	ldrh	r2, [r3, #2]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	b29b      	uxth	r3, r3
 8001908:	4413      	add	r3, r2
 800190a:	b299      	uxth	r1, r3
 800190c:	79bb      	ldrb	r3, [r7, #6]
 800190e:	2b00      	cmp	r3, #0
 8001910:	bf0c      	ite	eq
 8001912:	2301      	moveq	r3, #1
 8001914:	2300      	movne	r3, #0
 8001916:	b2db      	uxtb	r3, r3
 8001918:	461a      	mov	r2, r3
 800191a:	f7ff ff2d 	bl	8001778 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	3301      	adds	r3, #1
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4293      	cmp	r3, r2
 800192e:	d3c8      	bcc.n	80018c2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	3301      	adds	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	785b      	ldrb	r3, [r3, #1]
 800193a:	461a      	mov	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	4293      	cmp	r3, r2
 8001940:	d3ad      	bcc.n	800189e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <SSD1306_Putc+0xf8>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	7812      	ldrb	r2, [r2, #0]
 800194a:	4413      	add	r3, r2
 800194c:	b29a      	uxth	r2, r3
 800194e:	4b03      	ldr	r3, [pc, #12]	@ (800195c <SSD1306_Putc+0xf8>)
 8001950:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001952:	79fb      	ldrb	r3, [r7, #7]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000674 	.word	0x20000674

08001960 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	4613      	mov	r3, r2
 800196c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800196e:	e012      	b.n	8001996 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	79fa      	ldrb	r2, [r7, #7]
 8001976:	68b9      	ldr	r1, [r7, #8]
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ff73 	bl	8001864 <SSD1306_Putc>
 800197e:	4603      	mov	r3, r0
 8001980:	461a      	mov	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d002      	beq.n	8001990 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	e008      	b.n	80019a2 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3301      	adds	r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1e8      	bne.n	8001970 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	781b      	ldrb	r3, [r3, #0]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80019ae:	2000      	movs	r0, #0
 80019b0:	f7ff feca 	bl	8001748 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80019b4:	f7ff fe9a 	bl	80016ec <SSD1306_UpdateScreen>
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80019c2:	4b08      	ldr	r3, [pc, #32]	@ (80019e4 <ssd1306_I2C_Init+0x28>)
 80019c4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80019c6:	e002      	b.n	80019ce <ssd1306_I2C_Init+0x12>
		p--;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f9      	bne.n	80019c8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	0003d090 	.word	0x0003d090

080019e8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	b0c7      	sub	sp, #284	@ 0x11c
 80019ec:	af02      	add	r7, sp, #8
 80019ee:	4604      	mov	r4, r0
 80019f0:	4608      	mov	r0, r1
 80019f2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80019f6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80019fa:	600a      	str	r2, [r1, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a02:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001a06:	4622      	mov	r2, r4
 8001a08:	701a      	strb	r2, [r3, #0]
 8001a0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a0e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001a12:	4602      	mov	r2, r0
 8001a14:	701a      	strb	r2, [r3, #0]
 8001a16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a1e:	460a      	mov	r2, r1
 8001a20:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001a22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a2a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a2e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001a32:	7812      	ldrb	r2, [r2, #0]
 8001a34:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001a3c:	e015      	b.n	8001a6a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001a3e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001a42:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a46:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	441a      	add	r2, r3
 8001a4e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001a52:	3301      	adds	r3, #1
 8001a54:	7811      	ldrb	r1, [r2, #0]
 8001a56:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a5a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001a5e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001a60:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001a64:	3301      	adds	r3, #1
 8001a66:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001a6a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a74:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001a78:	8812      	ldrh	r2, [r2, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d8df      	bhi.n	8001a3e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8001a7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a82:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	b299      	uxth	r1, r3
 8001a8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	3301      	adds	r3, #1
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	f107 020c 	add.w	r2, r7, #12
 8001a9c:	200a      	movs	r0, #10
 8001a9e:	9000      	str	r0, [sp, #0]
 8001aa0:	4803      	ldr	r0, [pc, #12]	@ (8001ab0 <ssd1306_I2C_WriteMulti+0xc8>)
 8001aa2:	f001 f811 	bl	8002ac8 <HAL_I2C_Master_Transmit>
}
 8001aa6:	bf00      	nop
 8001aa8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd90      	pop	{r4, r7, pc}
 8001ab0:	20000200 	.word	0x20000200

08001ab4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	71bb      	strb	r3, [r7, #6]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001ac6:	79bb      	ldrb	r3, [r7, #6]
 8001ac8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001aca:	797b      	ldrb	r3, [r7, #5]
 8001acc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	b299      	uxth	r1, r3
 8001ad2:	f107 020c 	add.w	r2, r7, #12
 8001ad6:	230a      	movs	r3, #10
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2302      	movs	r3, #2
 8001adc:	4803      	ldr	r0, [pc, #12]	@ (8001aec <ssd1306_I2C_Write+0x38>)
 8001ade:	f000 fff3 	bl	8002ac8 <HAL_I2C_Master_Transmit>
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000200 	.word	0x20000200

08001af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <HAL_MspInit+0x4c>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afe:	4a0f      	ldr	r2, [pc, #60]	@ (8001b3c <HAL_MspInit+0x4c>)
 8001b00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b06:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <HAL_MspInit+0x4c>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <HAL_MspInit+0x4c>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	4a08      	ldr	r2, [pc, #32]	@ (8001b3c <HAL_MspInit+0x4c>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b22:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <HAL_MspInit+0x4c>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b2e:	2007      	movs	r0, #7
 8001b30:	f000 fc66 	bl	8002400 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40023800 	.word	0x40023800

08001b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <NMI_Handler+0x4>

08001b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <HardFault_Handler+0x4>

08001b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <MemManage_Handler+0x4>

08001b58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <BusFault_Handler+0x4>

08001b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <UsageFault_Handler+0x4>

08001b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b96:	f000 fb43 	bl	8002220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	f000 fe34 	bl	8002810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}

08001bac <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001bb0:	2002      	movs	r0, #2
 8001bb2:	f000 fe2d 	bl	8002810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bc0:	4802      	ldr	r0, [pc, #8]	@ (8001bcc <TIM2_IRQHandler+0x10>)
 8001bc2:	f002 fd43 	bl	800464c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000680 	.word	0x20000680

08001bd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return 1;
 8001bd4:	2301      	movs	r3, #1
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <_kill>:

int _kill(int pid, int sig)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bea:	f004 f95b 	bl	8005ea4 <__errno>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2216      	movs	r2, #22
 8001bf2:	601a      	str	r2, [r3, #0]
  return -1;
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <_exit>:

void _exit (int status)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ffe7 	bl	8001be0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c12:	bf00      	nop
 8001c14:	e7fd      	b.n	8001c12 <_exit+0x12>

08001c16 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	e00a      	b.n	8001c3e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c28:	f3af 8000 	nop.w
 8001c2c:	4601      	mov	r1, r0
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	60ba      	str	r2, [r7, #8]
 8001c34:	b2ca      	uxtb	r2, r1
 8001c36:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	dbf0      	blt.n	8001c28 <_read+0x12>
  }

  return len;
 8001c46:	687b      	ldr	r3, [r7, #4]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	e009      	b.n	8001c76 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	1c5a      	adds	r2, r3, #1
 8001c66:	60ba      	str	r2, [r7, #8]
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	3301      	adds	r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	dbf1      	blt.n	8001c62 <_write+0x12>
  }
  return len;
 8001c7e:	687b      	ldr	r3, [r7, #4]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <_close>:

int _close(int file)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cb0:	605a      	str	r2, [r3, #4]
  return 0;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <_isatty>:

int _isatty(int file)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cc8:	2301      	movs	r3, #1
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b085      	sub	sp, #20
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf8:	4a14      	ldr	r2, [pc, #80]	@ (8001d4c <_sbrk+0x5c>)
 8001cfa:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <_sbrk+0x60>)
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d04:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <_sbrk+0x64>)
 8001d0e:	4a12      	ldr	r2, [pc, #72]	@ (8001d58 <_sbrk+0x68>)
 8001d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d12:	4b10      	ldr	r3, [pc, #64]	@ (8001d54 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d207      	bcs.n	8001d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d20:	f004 f8c0 	bl	8005ea4 <__errno>
 8001d24:	4603      	mov	r3, r0
 8001d26:	220c      	movs	r2, #12
 8001d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2e:	e009      	b.n	8001d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d30:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <_sbrk+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d36:	4b07      	ldr	r3, [pc, #28]	@ (8001d54 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	4a05      	ldr	r2, [pc, #20]	@ (8001d54 <_sbrk+0x64>)
 8001d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d42:	68fb      	ldr	r3, [r7, #12]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20020000 	.word	0x20020000
 8001d50:	00000400 	.word	0x00000400
 8001d54:	2000067c 	.word	0x2000067c
 8001d58:	200008a8 	.word	0x200008a8

08001d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d60:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <SystemInit+0x20>)
 8001d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d66:	4a05      	ldr	r2, [pc, #20]	@ (8001d7c <SystemInit+0x20>)
 8001d68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d86:	f107 0308 	add.w	r3, r7, #8
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d94:	463b      	mov	r3, r7
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e14 <MX_TIM2_Init+0x94>)
 8001d9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001da2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 89;
 8001da4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e14 <MX_TIM2_Init+0x94>)
 8001da6:	2259      	movs	r2, #89	@ 0x59
 8001da8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001daa:	4b1a      	ldr	r3, [pc, #104]	@ (8001e14 <MX_TIM2_Init+0x94>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001db0:	4b18      	ldr	r3, [pc, #96]	@ (8001e14 <MX_TIM2_Init+0x94>)
 8001db2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001db6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db8:	4b16      	ldr	r3, [pc, #88]	@ (8001e14 <MX_TIM2_Init+0x94>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dbe:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <MX_TIM2_Init+0x94>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dc4:	4813      	ldr	r0, [pc, #76]	@ (8001e14 <MX_TIM2_Init+0x94>)
 8001dc6:	f002 f92b 	bl	8004020 <HAL_TIM_Base_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001dd0:	f7ff fbc2 	bl	8001558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dda:	f107 0308 	add.w	r3, r7, #8
 8001dde:	4619      	mov	r1, r3
 8001de0:	480c      	ldr	r0, [pc, #48]	@ (8001e14 <MX_TIM2_Init+0x94>)
 8001de2:	f002 fde5 	bl	80049b0 <HAL_TIM_ConfigClockSource>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001dec:	f7ff fbb4 	bl	8001558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df0:	2300      	movs	r3, #0
 8001df2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001df8:	463b      	mov	r3, r7
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4805      	ldr	r0, [pc, #20]	@ (8001e14 <MX_TIM2_Init+0x94>)
 8001dfe:	f003 f9dd 	bl	80051bc <HAL_TIMEx_MasterConfigSynchronization>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001e08:	f7ff fba6 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000680 	.word	0x20000680

08001e18 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08c      	sub	sp, #48	@ 0x30
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e1e:	f107 030c 	add.w	r3, r7, #12
 8001e22:	2224      	movs	r2, #36	@ 0x24
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f003 ffe9 	bl	8005dfe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e34:	4b20      	ldr	r3, [pc, #128]	@ (8001eb8 <MX_TIM3_Init+0xa0>)
 8001e36:	4a21      	ldr	r2, [pc, #132]	@ (8001ebc <MX_TIM3_Init+0xa4>)
 8001e38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb8 <MX_TIM3_Init+0xa0>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e40:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb8 <MX_TIM3_Init+0xa0>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e46:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb8 <MX_TIM3_Init+0xa0>)
 8001e48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb8 <MX_TIM3_Init+0xa0>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e54:	4b18      	ldr	r3, [pc, #96]	@ (8001eb8 <MX_TIM3_Init+0xa0>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e62:	2301      	movs	r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001e6a:	230a      	movs	r3, #10
 8001e6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e72:	2301      	movs	r3, #1
 8001e74:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e76:	2300      	movs	r3, #0
 8001e78:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001e7a:	230a      	movs	r3, #10
 8001e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e7e:	f107 030c 	add.w	r3, r7, #12
 8001e82:	4619      	mov	r1, r3
 8001e84:	480c      	ldr	r0, [pc, #48]	@ (8001eb8 <MX_TIM3_Init+0xa0>)
 8001e86:	f002 faad 	bl	80043e4 <HAL_TIM_Encoder_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001e90:	f7ff fb62 	bl	8001558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e94:	2300      	movs	r3, #0
 8001e96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4805      	ldr	r0, [pc, #20]	@ (8001eb8 <MX_TIM3_Init+0xa0>)
 8001ea2:	f003 f98b 	bl	80051bc <HAL_TIMEx_MasterConfigSynchronization>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001eac:	f7ff fb54 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001eb0:	bf00      	nop
 8001eb2:	3730      	adds	r7, #48	@ 0x30
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	200006c8 	.word	0x200006c8
 8001ebc:	40000400 	.word	0x40000400

08001ec0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08e      	sub	sp, #56	@ 0x38
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed4:	f107 0320 	add.w	r3, r7, #32
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
 8001eec:	615a      	str	r2, [r3, #20]
 8001eee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ef0:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa4 <MX_TIM4_Init+0xe4>)
 8001ef2:	4a2d      	ldr	r2, [pc, #180]	@ (8001fa8 <MX_TIM4_Init+0xe8>)
 8001ef4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 8001ef6:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa4 <MX_TIM4_Init+0xe4>)
 8001ef8:	2259      	movs	r2, #89	@ 0x59
 8001efa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efc:	4b29      	ldr	r3, [pc, #164]	@ (8001fa4 <MX_TIM4_Init+0xe4>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001f02:	4b28      	ldr	r3, [pc, #160]	@ (8001fa4 <MX_TIM4_Init+0xe4>)
 8001f04:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0a:	4b26      	ldr	r3, [pc, #152]	@ (8001fa4 <MX_TIM4_Init+0xe4>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f10:	4b24      	ldr	r3, [pc, #144]	@ (8001fa4 <MX_TIM4_Init+0xe4>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f16:	4823      	ldr	r0, [pc, #140]	@ (8001fa4 <MX_TIM4_Init+0xe4>)
 8001f18:	f002 f882 	bl	8004020 <HAL_TIM_Base_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001f22:	f7ff fb19 	bl	8001558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f2c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f30:	4619      	mov	r1, r3
 8001f32:	481c      	ldr	r0, [pc, #112]	@ (8001fa4 <MX_TIM4_Init+0xe4>)
 8001f34:	f002 fd3c 	bl	80049b0 <HAL_TIM_ConfigClockSource>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001f3e:	f7ff fb0b 	bl	8001558 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f42:	4818      	ldr	r0, [pc, #96]	@ (8001fa4 <MX_TIM4_Init+0xe4>)
 8001f44:	f002 f92c 	bl	80041a0 <HAL_TIM_PWM_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001f4e:	f7ff fb03 	bl	8001558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f5a:	f107 0320 	add.w	r3, r7, #32
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4810      	ldr	r0, [pc, #64]	@ (8001fa4 <MX_TIM4_Init+0xe4>)
 8001f62:	f003 f92b 	bl	80051bc <HAL_TIMEx_MasterConfigSynchronization>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001f6c:	f7ff faf4 	bl	8001558 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f70:	2360      	movs	r3, #96	@ 0x60
 8001f72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	2208      	movs	r2, #8
 8001f84:	4619      	mov	r1, r3
 8001f86:	4807      	ldr	r0, [pc, #28]	@ (8001fa4 <MX_TIM4_Init+0xe4>)
 8001f88:	f002 fc50 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001f92:	f7ff fae1 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f96:	4803      	ldr	r0, [pc, #12]	@ (8001fa4 <MX_TIM4_Init+0xe4>)
 8001f98:	f000 f88c 	bl	80020b4 <HAL_TIM_MspPostInit>

}
 8001f9c:	bf00      	nop
 8001f9e:	3738      	adds	r7, #56	@ 0x38
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20000710 	.word	0x20000710
 8001fa8:	40000800 	.word	0x40000800

08001fac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fbc:	d116      	bne.n	8001fec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b16      	ldr	r3, [pc, #88]	@ (800201c <HAL_TIM_Base_MspInit+0x70>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	4a15      	ldr	r2, [pc, #84]	@ (800201c <HAL_TIM_Base_MspInit+0x70>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fce:	4b13      	ldr	r3, [pc, #76]	@ (800201c <HAL_TIM_Base_MspInit+0x70>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2100      	movs	r1, #0
 8001fde:	201c      	movs	r0, #28
 8001fe0:	f000 fa19 	bl	8002416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fe4:	201c      	movs	r0, #28
 8001fe6:	f000 fa32 	bl	800244e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001fea:	e012      	b.n	8002012 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a0b      	ldr	r2, [pc, #44]	@ (8002020 <HAL_TIM_Base_MspInit+0x74>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d10d      	bne.n	8002012 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	4b08      	ldr	r3, [pc, #32]	@ (800201c <HAL_TIM_Base_MspInit+0x70>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	4a07      	ldr	r2, [pc, #28]	@ (800201c <HAL_TIM_Base_MspInit+0x70>)
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	6413      	str	r3, [r2, #64]	@ 0x40
 8002006:	4b05      	ldr	r3, [pc, #20]	@ (800201c <HAL_TIM_Base_MspInit+0x70>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
}
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800
 8002020:	40000800 	.word	0x40000800

08002024 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	@ 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a19      	ldr	r2, [pc, #100]	@ (80020a8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d12b      	bne.n	800209e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	4b18      	ldr	r3, [pc, #96]	@ (80020ac <HAL_TIM_Encoder_MspInit+0x88>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204e:	4a17      	ldr	r2, [pc, #92]	@ (80020ac <HAL_TIM_Encoder_MspInit+0x88>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	6413      	str	r3, [r2, #64]	@ 0x40
 8002056:	4b15      	ldr	r3, [pc, #84]	@ (80020ac <HAL_TIM_Encoder_MspInit+0x88>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <HAL_TIM_Encoder_MspInit+0x88>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	4a10      	ldr	r2, [pc, #64]	@ (80020ac <HAL_TIM_Encoder_MspInit+0x88>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6313      	str	r3, [r2, #48]	@ 0x30
 8002072:	4b0e      	ldr	r3, [pc, #56]	@ (80020ac <HAL_TIM_Encoder_MspInit+0x88>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800207e:	23c0      	movs	r3, #192	@ 0xc0
 8002080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	2300      	movs	r3, #0
 800208c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800208e:	2302      	movs	r3, #2
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	4619      	mov	r1, r3
 8002098:	4805      	ldr	r0, [pc, #20]	@ (80020b0 <HAL_TIM_Encoder_MspInit+0x8c>)
 800209a:	f000 f9f3 	bl	8002484 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800209e:	bf00      	nop
 80020a0:	3728      	adds	r7, #40	@ 0x28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40000400 	.word	0x40000400
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40020000 	.word	0x40020000

080020b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 030c 	add.w	r3, r7, #12
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a12      	ldr	r2, [pc, #72]	@ (800211c <HAL_TIM_MspPostInit+0x68>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d11e      	bne.n	8002114 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	4b11      	ldr	r3, [pc, #68]	@ (8002120 <HAL_TIM_MspPostInit+0x6c>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	4a10      	ldr	r2, [pc, #64]	@ (8002120 <HAL_TIM_MspPostInit+0x6c>)
 80020e0:	f043 0302 	orr.w	r3, r3, #2
 80020e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002120 <HAL_TIM_MspPostInit+0x6c>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002100:	2300      	movs	r3, #0
 8002102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002104:	2302      	movs	r3, #2
 8002106:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002108:	f107 030c 	add.w	r3, r7, #12
 800210c:	4619      	mov	r1, r3
 800210e:	4805      	ldr	r0, [pc, #20]	@ (8002124 <HAL_TIM_MspPostInit+0x70>)
 8002110:	f000 f9b8 	bl	8002484 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002114:	bf00      	nop
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40000800 	.word	0x40000800
 8002120:	40023800 	.word	0x40023800
 8002124:	40020400 	.word	0x40020400

08002128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002128:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002160 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800212c:	f7ff fe16 	bl	8001d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002130:	480c      	ldr	r0, [pc, #48]	@ (8002164 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002132:	490d      	ldr	r1, [pc, #52]	@ (8002168 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002134:	4a0d      	ldr	r2, [pc, #52]	@ (800216c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002138:	e002      	b.n	8002140 <LoopCopyDataInit>

0800213a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800213c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800213e:	3304      	adds	r3, #4

08002140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002144:	d3f9      	bcc.n	800213a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002146:	4a0a      	ldr	r2, [pc, #40]	@ (8002170 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002148:	4c0a      	ldr	r4, [pc, #40]	@ (8002174 <LoopFillZerobss+0x22>)
  movs r3, #0
 800214a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800214c:	e001      	b.n	8002152 <LoopFillZerobss>

0800214e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800214e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002150:	3204      	adds	r2, #4

08002152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002154:	d3fb      	bcc.n	800214e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002156:	f003 feab 	bl	8005eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800215a:	f7ff f823 	bl	80011a4 <main>
  bx  lr    
 800215e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002160:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002168:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800216c:	080090c4 	.word	0x080090c4
  ldr r2, =_sbss
 8002170:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002174:	200008a8 	.word	0x200008a8

08002178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002178:	e7fe      	b.n	8002178 <ADC_IRQHandler>
	...

0800217c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002180:	4b0e      	ldr	r3, [pc, #56]	@ (80021bc <HAL_Init+0x40>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0d      	ldr	r2, [pc, #52]	@ (80021bc <HAL_Init+0x40>)
 8002186:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800218a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800218c:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <HAL_Init+0x40>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0a      	ldr	r2, [pc, #40]	@ (80021bc <HAL_Init+0x40>)
 8002192:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002196:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002198:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <HAL_Init+0x40>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a07      	ldr	r2, [pc, #28]	@ (80021bc <HAL_Init+0x40>)
 800219e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a4:	2003      	movs	r0, #3
 80021a6:	f000 f92b 	bl	8002400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021aa:	2000      	movs	r0, #0
 80021ac:	f000 f808 	bl	80021c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021b0:	f7ff fc9e 	bl	8001af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023c00 	.word	0x40023c00

080021c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c8:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <HAL_InitTick+0x54>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <HAL_InitTick+0x58>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4619      	mov	r1, r3
 80021d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021da:	fbb2 f3f3 	udiv	r3, r2, r3
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f943 	bl	800246a <HAL_SYSTICK_Config>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00e      	b.n	800220c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b0f      	cmp	r3, #15
 80021f2:	d80a      	bhi.n	800220a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f4:	2200      	movs	r2, #0
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295
 80021fc:	f000 f90b 	bl	8002416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002200:	4a06      	ldr	r2, [pc, #24]	@ (800221c <HAL_InitTick+0x5c>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	e000      	b.n	800220c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000010 	.word	0x20000010
 8002218:	20000018 	.word	0x20000018
 800221c:	20000014 	.word	0x20000014

08002220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002224:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <HAL_IncTick+0x20>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	4b06      	ldr	r3, [pc, #24]	@ (8002244 <HAL_IncTick+0x24>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4413      	add	r3, r2
 8002230:	4a04      	ldr	r2, [pc, #16]	@ (8002244 <HAL_IncTick+0x24>)
 8002232:	6013      	str	r3, [r2, #0]
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000018 	.word	0x20000018
 8002244:	20000758 	.word	0x20000758

08002248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return uwTick;
 800224c:	4b03      	ldr	r3, [pc, #12]	@ (800225c <HAL_GetTick+0x14>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000758 	.word	0x20000758

08002260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002270:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800227c:	4013      	ands	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002288:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800228c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002292:	4a04      	ldr	r2, [pc, #16]	@ (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	60d3      	str	r3, [r2, #12]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ac:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 0307 	and.w	r3, r3, #7
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	db0b      	blt.n	80022ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	f003 021f 	and.w	r2, r3, #31
 80022dc:	4907      	ldr	r1, [pc, #28]	@ (80022fc <__NVIC_EnableIRQ+0x38>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	2001      	movs	r0, #1
 80022e6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000e100 	.word	0xe000e100

08002300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	2b00      	cmp	r3, #0
 8002312:	db0a      	blt.n	800232a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	b2da      	uxtb	r2, r3
 8002318:	490c      	ldr	r1, [pc, #48]	@ (800234c <__NVIC_SetPriority+0x4c>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	440b      	add	r3, r1
 8002324:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002328:	e00a      	b.n	8002340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4908      	ldr	r1, [pc, #32]	@ (8002350 <__NVIC_SetPriority+0x50>)
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	3b04      	subs	r3, #4
 8002338:	0112      	lsls	r2, r2, #4
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	440b      	add	r3, r1
 800233e:	761a      	strb	r2, [r3, #24]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000e100 	.word	0xe000e100
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	@ 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f1c3 0307 	rsb	r3, r3, #7
 800236e:	2b04      	cmp	r3, #4
 8002370:	bf28      	it	cs
 8002372:	2304      	movcs	r3, #4
 8002374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3304      	adds	r3, #4
 800237a:	2b06      	cmp	r3, #6
 800237c:	d902      	bls.n	8002384 <NVIC_EncodePriority+0x30>
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3b03      	subs	r3, #3
 8002382:	e000      	b.n	8002386 <NVIC_EncodePriority+0x32>
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	f04f 32ff 	mov.w	r2, #4294967295
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	401a      	ands	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800239c:	f04f 31ff 	mov.w	r1, #4294967295
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43d9      	mvns	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	4313      	orrs	r3, r2
         );
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3724      	adds	r7, #36	@ 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023cc:	d301      	bcc.n	80023d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00f      	b.n	80023f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d2:	4a0a      	ldr	r2, [pc, #40]	@ (80023fc <SysTick_Config+0x40>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023da:	210f      	movs	r1, #15
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295
 80023e0:	f7ff ff8e 	bl	8002300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e4:	4b05      	ldr	r3, [pc, #20]	@ (80023fc <SysTick_Config+0x40>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ea:	4b04      	ldr	r3, [pc, #16]	@ (80023fc <SysTick_Config+0x40>)
 80023ec:	2207      	movs	r2, #7
 80023ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	e000e010 	.word	0xe000e010

08002400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ff29 	bl	8002260 <__NVIC_SetPriorityGrouping>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	4603      	mov	r3, r0
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002428:	f7ff ff3e 	bl	80022a8 <__NVIC_GetPriorityGrouping>
 800242c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	6978      	ldr	r0, [r7, #20]
 8002434:	f7ff ff8e 	bl	8002354 <NVIC_EncodePriority>
 8002438:	4602      	mov	r2, r0
 800243a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff5d 	bl	8002300 <__NVIC_SetPriority>
}
 8002446:	bf00      	nop
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	4603      	mov	r3, r0
 8002456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff31 	bl	80022c4 <__NVIC_EnableIRQ>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ffa2 	bl	80023bc <SysTick_Config>
 8002478:	4603      	mov	r3, r0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002484:	b480      	push	{r7}
 8002486:	b089      	sub	sp, #36	@ 0x24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002496:	2300      	movs	r3, #0
 8002498:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	e165      	b.n	800276c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024a0:	2201      	movs	r2, #1
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	f040 8154 	bne.w	8002766 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d005      	beq.n	80024d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d130      	bne.n	8002538 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	2203      	movs	r2, #3
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800250c:	2201      	movs	r2, #1
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 0201 	and.w	r2, r3, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b03      	cmp	r3, #3
 8002542:	d017      	beq.n	8002574 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	2203      	movs	r2, #3
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d123      	bne.n	80025c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	08da      	lsrs	r2, r3, #3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3208      	adds	r2, #8
 8002588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	220f      	movs	r2, #15
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	08da      	lsrs	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3208      	adds	r2, #8
 80025c2:	69b9      	ldr	r1, [r7, #24]
 80025c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0203 	and.w	r2, r3, #3
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 80ae 	beq.w	8002766 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	4b5d      	ldr	r3, [pc, #372]	@ (8002784 <HAL_GPIO_Init+0x300>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002612:	4a5c      	ldr	r2, [pc, #368]	@ (8002784 <HAL_GPIO_Init+0x300>)
 8002614:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002618:	6453      	str	r3, [r2, #68]	@ 0x44
 800261a:	4b5a      	ldr	r3, [pc, #360]	@ (8002784 <HAL_GPIO_Init+0x300>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002626:	4a58      	ldr	r2, [pc, #352]	@ (8002788 <HAL_GPIO_Init+0x304>)
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	089b      	lsrs	r3, r3, #2
 800262c:	3302      	adds	r3, #2
 800262e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	220f      	movs	r2, #15
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4f      	ldr	r2, [pc, #316]	@ (800278c <HAL_GPIO_Init+0x308>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d025      	beq.n	800269e <HAL_GPIO_Init+0x21a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4e      	ldr	r2, [pc, #312]	@ (8002790 <HAL_GPIO_Init+0x30c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d01f      	beq.n	800269a <HAL_GPIO_Init+0x216>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4d      	ldr	r2, [pc, #308]	@ (8002794 <HAL_GPIO_Init+0x310>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d019      	beq.n	8002696 <HAL_GPIO_Init+0x212>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4c      	ldr	r2, [pc, #304]	@ (8002798 <HAL_GPIO_Init+0x314>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_GPIO_Init+0x20e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4b      	ldr	r2, [pc, #300]	@ (800279c <HAL_GPIO_Init+0x318>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00d      	beq.n	800268e <HAL_GPIO_Init+0x20a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4a      	ldr	r2, [pc, #296]	@ (80027a0 <HAL_GPIO_Init+0x31c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d007      	beq.n	800268a <HAL_GPIO_Init+0x206>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a49      	ldr	r2, [pc, #292]	@ (80027a4 <HAL_GPIO_Init+0x320>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d101      	bne.n	8002686 <HAL_GPIO_Init+0x202>
 8002682:	2306      	movs	r3, #6
 8002684:	e00c      	b.n	80026a0 <HAL_GPIO_Init+0x21c>
 8002686:	2307      	movs	r3, #7
 8002688:	e00a      	b.n	80026a0 <HAL_GPIO_Init+0x21c>
 800268a:	2305      	movs	r3, #5
 800268c:	e008      	b.n	80026a0 <HAL_GPIO_Init+0x21c>
 800268e:	2304      	movs	r3, #4
 8002690:	e006      	b.n	80026a0 <HAL_GPIO_Init+0x21c>
 8002692:	2303      	movs	r3, #3
 8002694:	e004      	b.n	80026a0 <HAL_GPIO_Init+0x21c>
 8002696:	2302      	movs	r3, #2
 8002698:	e002      	b.n	80026a0 <HAL_GPIO_Init+0x21c>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <HAL_GPIO_Init+0x21c>
 800269e:	2300      	movs	r3, #0
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	f002 0203 	and.w	r2, r2, #3
 80026a6:	0092      	lsls	r2, r2, #2
 80026a8:	4093      	lsls	r3, r2
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026b0:	4935      	ldr	r1, [pc, #212]	@ (8002788 <HAL_GPIO_Init+0x304>)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	089b      	lsrs	r3, r3, #2
 80026b6:	3302      	adds	r3, #2
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026be:	4b3a      	ldr	r3, [pc, #232]	@ (80027a8 <HAL_GPIO_Init+0x324>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026e2:	4a31      	ldr	r2, [pc, #196]	@ (80027a8 <HAL_GPIO_Init+0x324>)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026e8:	4b2f      	ldr	r3, [pc, #188]	@ (80027a8 <HAL_GPIO_Init+0x324>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800270c:	4a26      	ldr	r2, [pc, #152]	@ (80027a8 <HAL_GPIO_Init+0x324>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002712:	4b25      	ldr	r3, [pc, #148]	@ (80027a8 <HAL_GPIO_Init+0x324>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002736:	4a1c      	ldr	r2, [pc, #112]	@ (80027a8 <HAL_GPIO_Init+0x324>)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800273c:	4b1a      	ldr	r3, [pc, #104]	@ (80027a8 <HAL_GPIO_Init+0x324>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002760:	4a11      	ldr	r2, [pc, #68]	@ (80027a8 <HAL_GPIO_Init+0x324>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3301      	adds	r3, #1
 800276a:	61fb      	str	r3, [r7, #28]
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	2b0f      	cmp	r3, #15
 8002770:	f67f ae96 	bls.w	80024a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	3724      	adds	r7, #36	@ 0x24
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800
 8002788:	40013800 	.word	0x40013800
 800278c:	40020000 	.word	0x40020000
 8002790:	40020400 	.word	0x40020400
 8002794:	40020800 	.word	0x40020800
 8002798:	40020c00 	.word	0x40020c00
 800279c:	40021000 	.word	0x40021000
 80027a0:	40021400 	.word	0x40021400
 80027a4:	40021800 	.word	0x40021800
 80027a8:	40013c00 	.word	0x40013c00

080027ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	887b      	ldrh	r3, [r7, #2]
 80027be:	4013      	ands	r3, r2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
 80027c8:	e001      	b.n	80027ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	807b      	strh	r3, [r7, #2]
 80027e8:	4613      	mov	r3, r2
 80027ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027ec:	787b      	ldrb	r3, [r7, #1]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027f2:	887a      	ldrh	r2, [r7, #2]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027f8:	e003      	b.n	8002802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027fa:	887b      	ldrh	r3, [r7, #2]
 80027fc:	041a      	lsls	r2, r3, #16
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	619a      	str	r2, [r3, #24]
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
	...

08002810 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800281a:	4b08      	ldr	r3, [pc, #32]	@ (800283c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800281c:	695a      	ldr	r2, [r3, #20]
 800281e:	88fb      	ldrh	r3, [r7, #6]
 8002820:	4013      	ands	r3, r2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d006      	beq.n	8002834 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002826:	4a05      	ldr	r2, [pc, #20]	@ (800283c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002828:	88fb      	ldrh	r3, [r7, #6]
 800282a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800282c:	88fb      	ldrh	r3, [r7, #6]
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe fd5c 	bl	80012ec <HAL_GPIO_EXTI_Callback>
  }
}
 8002834:	bf00      	nop
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40013c00 	.word	0x40013c00

08002840 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e12b      	b.n	8002aaa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fe fc32 	bl	80010d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2224      	movs	r2, #36	@ 0x24
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0201 	bic.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002892:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028a4:	f000 feda 	bl	800365c <HAL_RCC_GetPCLK1Freq>
 80028a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4a81      	ldr	r2, [pc, #516]	@ (8002ab4 <HAL_I2C_Init+0x274>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d807      	bhi.n	80028c4 <HAL_I2C_Init+0x84>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4a80      	ldr	r2, [pc, #512]	@ (8002ab8 <HAL_I2C_Init+0x278>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	bf94      	ite	ls
 80028bc:	2301      	movls	r3, #1
 80028be:	2300      	movhi	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	e006      	b.n	80028d2 <HAL_I2C_Init+0x92>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4a7d      	ldr	r2, [pc, #500]	@ (8002abc <HAL_I2C_Init+0x27c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	bf94      	ite	ls
 80028cc:	2301      	movls	r3, #1
 80028ce:	2300      	movhi	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e0e7      	b.n	8002aaa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4a78      	ldr	r2, [pc, #480]	@ (8002ac0 <HAL_I2C_Init+0x280>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	0c9b      	lsrs	r3, r3, #18
 80028e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4a6a      	ldr	r2, [pc, #424]	@ (8002ab4 <HAL_I2C_Init+0x274>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d802      	bhi.n	8002914 <HAL_I2C_Init+0xd4>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	3301      	adds	r3, #1
 8002912:	e009      	b.n	8002928 <HAL_I2C_Init+0xe8>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800291a:	fb02 f303 	mul.w	r3, r2, r3
 800291e:	4a69      	ldr	r2, [pc, #420]	@ (8002ac4 <HAL_I2C_Init+0x284>)
 8002920:	fba2 2303 	umull	r2, r3, r2, r3
 8002924:	099b      	lsrs	r3, r3, #6
 8002926:	3301      	adds	r3, #1
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	430b      	orrs	r3, r1
 800292e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800293a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	495c      	ldr	r1, [pc, #368]	@ (8002ab4 <HAL_I2C_Init+0x274>)
 8002944:	428b      	cmp	r3, r1
 8002946:	d819      	bhi.n	800297c <HAL_I2C_Init+0x13c>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1e59      	subs	r1, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	fbb1 f3f3 	udiv	r3, r1, r3
 8002956:	1c59      	adds	r1, r3, #1
 8002958:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800295c:	400b      	ands	r3, r1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <HAL_I2C_Init+0x138>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1e59      	subs	r1, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002970:	3301      	adds	r3, #1
 8002972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002976:	e051      	b.n	8002a1c <HAL_I2C_Init+0x1dc>
 8002978:	2304      	movs	r3, #4
 800297a:	e04f      	b.n	8002a1c <HAL_I2C_Init+0x1dc>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d111      	bne.n	80029a8 <HAL_I2C_Init+0x168>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1e58      	subs	r0, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6859      	ldr	r1, [r3, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	440b      	add	r3, r1
 8002992:	fbb0 f3f3 	udiv	r3, r0, r3
 8002996:	3301      	adds	r3, #1
 8002998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf0c      	ite	eq
 80029a0:	2301      	moveq	r3, #1
 80029a2:	2300      	movne	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	e012      	b.n	80029ce <HAL_I2C_Init+0x18e>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	1e58      	subs	r0, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6859      	ldr	r1, [r3, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	0099      	lsls	r1, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80029be:	3301      	adds	r3, #1
 80029c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bf0c      	ite	eq
 80029c8:	2301      	moveq	r3, #1
 80029ca:	2300      	movne	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_I2C_Init+0x196>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e022      	b.n	8002a1c <HAL_I2C_Init+0x1dc>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10e      	bne.n	80029fc <HAL_I2C_Init+0x1bc>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	1e58      	subs	r0, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6859      	ldr	r1, [r3, #4]
 80029e6:	460b      	mov	r3, r1
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	440b      	add	r3, r1
 80029ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f0:	3301      	adds	r3, #1
 80029f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029fa:	e00f      	b.n	8002a1c <HAL_I2C_Init+0x1dc>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1e58      	subs	r0, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6859      	ldr	r1, [r3, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	0099      	lsls	r1, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a12:	3301      	adds	r3, #1
 8002a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	6809      	ldr	r1, [r1, #0]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69da      	ldr	r2, [r3, #28]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6911      	ldr	r1, [r2, #16]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	68d2      	ldr	r2, [r2, #12]
 8002a56:	4311      	orrs	r1, r2
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0201 	orr.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	000186a0 	.word	0x000186a0
 8002ab8:	001e847f 	.word	0x001e847f
 8002abc:	003d08ff 	.word	0x003d08ff
 8002ac0:	431bde83 	.word	0x431bde83
 8002ac4:	10624dd3 	.word	0x10624dd3

08002ac8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	817b      	strh	r3, [r7, #10]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002adc:	f7ff fbb4 	bl	8002248 <HAL_GetTick>
 8002ae0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b20      	cmp	r3, #32
 8002aec:	f040 80e0 	bne.w	8002cb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	2319      	movs	r3, #25
 8002af6:	2201      	movs	r2, #1
 8002af8:	4970      	ldr	r1, [pc, #448]	@ (8002cbc <HAL_I2C_Master_Transmit+0x1f4>)
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 fa92 	bl	8003024 <I2C_WaitOnFlagUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b06:	2302      	movs	r3, #2
 8002b08:	e0d3      	b.n	8002cb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_I2C_Master_Transmit+0x50>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e0cc      	b.n	8002cb2 <HAL_I2C_Master_Transmit+0x1ea>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d007      	beq.n	8002b3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f042 0201 	orr.w	r2, r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2221      	movs	r2, #33	@ 0x21
 8002b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2210      	movs	r2, #16
 8002b5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	893a      	ldrh	r2, [r7, #8]
 8002b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4a50      	ldr	r2, [pc, #320]	@ (8002cc0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b80:	8979      	ldrh	r1, [r7, #10]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	6a3a      	ldr	r2, [r7, #32]
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f9ca 	bl	8002f20 <I2C_MasterRequestWrite>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e08d      	b.n	8002cb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bac:	e066      	b.n	8002c7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	6a39      	ldr	r1, [r7, #32]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 fb50 	bl	8003258 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00d      	beq.n	8002bda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d107      	bne.n	8002bd6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e06b      	b.n	8002cb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bde:	781a      	ldrb	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d11b      	bne.n	8002c50 <HAL_I2C_Master_Transmit+0x188>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d017      	beq.n	8002c50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c24:	781a      	ldrb	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	6a39      	ldr	r1, [r7, #32]
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 fb47 	bl	80032e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00d      	beq.n	8002c7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d107      	bne.n	8002c78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e01a      	b.n	8002cb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d194      	bne.n	8002bae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	e000      	b.n	8002cb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cb0:	2302      	movs	r3, #2
  }
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	00100002 	.word	0x00100002
 8002cc0:	ffff0000 	.word	0xffff0000

08002cc4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	@ 0x28
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002cd4:	f7ff fab8 	bl	8002248 <HAL_GetTick>
 8002cd8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b20      	cmp	r3, #32
 8002ce8:	f040 8111 	bne.w	8002f0e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	2319      	movs	r3, #25
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	4988      	ldr	r1, [pc, #544]	@ (8002f18 <HAL_I2C_IsDeviceReady+0x254>)
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f994 	bl	8003024 <I2C_WaitOnFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002d02:	2302      	movs	r3, #2
 8002d04:	e104      	b.n	8002f10 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_I2C_IsDeviceReady+0x50>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e0fd      	b.n	8002f10 <HAL_I2C_IsDeviceReady+0x24c>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d007      	beq.n	8002d3a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0201 	orr.w	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2224      	movs	r2, #36	@ 0x24
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4a70      	ldr	r2, [pc, #448]	@ (8002f1c <HAL_I2C_IsDeviceReady+0x258>)
 8002d5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d6c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f952 	bl	8003024 <I2C_WaitOnFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00d      	beq.n	8002da2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d94:	d103      	bne.n	8002d9e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d9c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e0b6      	b.n	8002f10 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002da2:	897b      	ldrh	r3, [r7, #10]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002db0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002db2:	f7ff fa49 	bl	8002248 <HAL_GetTick>
 8002db6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	bf0c      	ite	eq
 8002dc6:	2301      	moveq	r3, #1
 8002dc8:	2300      	movne	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ddc:	bf0c      	ite	eq
 8002dde:	2301      	moveq	r3, #1
 8002de0:	2300      	movne	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002de6:	e025      	b.n	8002e34 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002de8:	f7ff fa2e 	bl	8002248 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d302      	bcc.n	8002dfe <HAL_I2C_IsDeviceReady+0x13a>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d103      	bne.n	8002e06 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	22a0      	movs	r2, #160	@ 0xa0
 8002e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	bf0c      	ite	eq
 8002e14:	2301      	moveq	r3, #1
 8002e16:	2300      	movne	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e2a:	bf0c      	ite	eq
 8002e2c:	2301      	moveq	r3, #1
 8002e2e:	2300      	movne	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e3e:	d005      	beq.n	8002e4c <HAL_I2C_IsDeviceReady+0x188>
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d102      	bne.n	8002e4c <HAL_I2C_IsDeviceReady+0x188>
 8002e46:	7dbb      	ldrb	r3, [r7, #22]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0cd      	beq.n	8002de8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d129      	bne.n	8002eb6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e70:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e72:	2300      	movs	r3, #0
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	2319      	movs	r3, #25
 8002e8e:	2201      	movs	r2, #1
 8002e90:	4921      	ldr	r1, [pc, #132]	@ (8002f18 <HAL_I2C_IsDeviceReady+0x254>)
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f8c6 	bl	8003024 <I2C_WaitOnFlagUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e036      	b.n	8002f10 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e02c      	b.n	8002f10 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ec4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ece:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	2319      	movs	r3, #25
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	490f      	ldr	r1, [pc, #60]	@ (8002f18 <HAL_I2C_IsDeviceReady+0x254>)
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f8a2 	bl	8003024 <I2C_WaitOnFlagUntilTimeout>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e012      	b.n	8002f10 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	3301      	adds	r3, #1
 8002eee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	f4ff af32 	bcc.w	8002d5e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002f0e:	2302      	movs	r3, #2
  }
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3720      	adds	r7, #32
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	00100002 	.word	0x00100002
 8002f1c:	ffff0000 	.word	0xffff0000

08002f20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d006      	beq.n	8002f4a <I2C_MasterRequestWrite+0x2a>
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d003      	beq.n	8002f4a <I2C_MasterRequestWrite+0x2a>
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f48:	d108      	bne.n	8002f5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	e00b      	b.n	8002f74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f60:	2b12      	cmp	r3, #18
 8002f62:	d107      	bne.n	8002f74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f84f 	bl	8003024 <I2C_WaitOnFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00d      	beq.n	8002fa8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f9a:	d103      	bne.n	8002fa4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fa2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e035      	b.n	8003014 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fb0:	d108      	bne.n	8002fc4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fb2:	897b      	ldrh	r3, [r7, #10]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002fc0:	611a      	str	r2, [r3, #16]
 8002fc2:	e01b      	b.n	8002ffc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fc4:	897b      	ldrh	r3, [r7, #10]
 8002fc6:	11db      	asrs	r3, r3, #7
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	f003 0306 	and.w	r3, r3, #6
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f063 030f 	orn	r3, r3, #15
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	490e      	ldr	r1, [pc, #56]	@ (800301c <I2C_MasterRequestWrite+0xfc>)
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f898 	bl	8003118 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e010      	b.n	8003014 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ff2:	897b      	ldrh	r3, [r7, #10]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	4907      	ldr	r1, [pc, #28]	@ (8003020 <I2C_MasterRequestWrite+0x100>)
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f888 	bl	8003118 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	00010008 	.word	0x00010008
 8003020:	00010002 	.word	0x00010002

08003024 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	4613      	mov	r3, r2
 8003032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003034:	e048      	b.n	80030c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d044      	beq.n	80030c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303e:	f7ff f903 	bl	8002248 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d302      	bcc.n	8003054 <I2C_WaitOnFlagUntilTimeout+0x30>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d139      	bne.n	80030c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	0c1b      	lsrs	r3, r3, #16
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b01      	cmp	r3, #1
 800305c:	d10d      	bne.n	800307a <I2C_WaitOnFlagUntilTimeout+0x56>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	43da      	mvns	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	4013      	ands	r3, r2
 800306a:	b29b      	uxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	e00c      	b.n	8003094 <I2C_WaitOnFlagUntilTimeout+0x70>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	43da      	mvns	r2, r3
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	4013      	ands	r3, r2
 8003086:	b29b      	uxth	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	429a      	cmp	r2, r3
 8003098:	d116      	bne.n	80030c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b4:	f043 0220 	orr.w	r2, r3, #32
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e023      	b.n	8003110 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	0c1b      	lsrs	r3, r3, #16
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d10d      	bne.n	80030ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	43da      	mvns	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	4013      	ands	r3, r2
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	bf0c      	ite	eq
 80030e4:	2301      	moveq	r3, #1
 80030e6:	2300      	movne	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	461a      	mov	r2, r3
 80030ec:	e00c      	b.n	8003108 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	43da      	mvns	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	4013      	ands	r3, r2
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf0c      	ite	eq
 8003100:	2301      	moveq	r3, #1
 8003102:	2300      	movne	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	461a      	mov	r2, r3
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	429a      	cmp	r2, r3
 800310c:	d093      	beq.n	8003036 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003126:	e071      	b.n	800320c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003132:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003136:	d123      	bne.n	8003180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003146:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003150:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316c:	f043 0204 	orr.w	r2, r3, #4
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e067      	b.n	8003250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003186:	d041      	beq.n	800320c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003188:	f7ff f85e 	bl	8002248 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	429a      	cmp	r2, r3
 8003196:	d302      	bcc.n	800319e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d136      	bne.n	800320c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	0c1b      	lsrs	r3, r3, #16
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d10c      	bne.n	80031c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	43da      	mvns	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4013      	ands	r3, r2
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	bf14      	ite	ne
 80031ba:	2301      	movne	r3, #1
 80031bc:	2300      	moveq	r3, #0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	e00b      	b.n	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	43da      	mvns	r2, r3
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	4013      	ands	r3, r2
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	bf14      	ite	ne
 80031d4:	2301      	movne	r3, #1
 80031d6:	2300      	moveq	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d016      	beq.n	800320c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f8:	f043 0220 	orr.w	r2, r3, #32
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e021      	b.n	8003250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	0c1b      	lsrs	r3, r3, #16
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b01      	cmp	r3, #1
 8003214:	d10c      	bne.n	8003230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	43da      	mvns	r2, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	4013      	ands	r3, r2
 8003222:	b29b      	uxth	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	bf14      	ite	ne
 8003228:	2301      	movne	r3, #1
 800322a:	2300      	moveq	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	e00b      	b.n	8003248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	43da      	mvns	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	4013      	ands	r3, r2
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	bf14      	ite	ne
 8003242:	2301      	movne	r3, #1
 8003244:	2300      	moveq	r3, #0
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	f47f af6d 	bne.w	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003264:	e034      	b.n	80032d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f886 	bl	8003378 <I2C_IsAcknowledgeFailed>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e034      	b.n	80032e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327c:	d028      	beq.n	80032d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800327e:	f7fe ffe3 	bl	8002248 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	429a      	cmp	r2, r3
 800328c:	d302      	bcc.n	8003294 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d11d      	bne.n	80032d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800329e:	2b80      	cmp	r3, #128	@ 0x80
 80032a0:	d016      	beq.n	80032d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032bc:	f043 0220 	orr.w	r2, r3, #32
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e007      	b.n	80032e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032da:	2b80      	cmp	r3, #128	@ 0x80
 80032dc:	d1c3      	bne.n	8003266 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032f4:	e034      	b.n	8003360 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f83e 	bl	8003378 <I2C_IsAcknowledgeFailed>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e034      	b.n	8003370 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330c:	d028      	beq.n	8003360 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800330e:	f7fe ff9b 	bl	8002248 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	429a      	cmp	r2, r3
 800331c:	d302      	bcc.n	8003324 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d11d      	bne.n	8003360 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b04      	cmp	r3, #4
 8003330:	d016      	beq.n	8003360 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334c:	f043 0220 	orr.w	r2, r3, #32
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e007      	b.n	8003370 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b04      	cmp	r3, #4
 800336c:	d1c3      	bne.n	80032f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800338a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800338e:	d11b      	bne.n	80033c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003398:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	f043 0204 	orr.w	r2, r3, #4
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
	...

080033d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	603b      	str	r3, [r7, #0]
 80033e6:	4b20      	ldr	r3, [pc, #128]	@ (8003468 <HAL_PWREx_EnableOverDrive+0x90>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003468 <HAL_PWREx_EnableOverDrive+0x90>)
 80033ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003468 <HAL_PWREx_EnableOverDrive+0x90>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033fe:	4b1b      	ldr	r3, [pc, #108]	@ (800346c <HAL_PWREx_EnableOverDrive+0x94>)
 8003400:	2201      	movs	r2, #1
 8003402:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003404:	f7fe ff20 	bl	8002248 <HAL_GetTick>
 8003408:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800340a:	e009      	b.n	8003420 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800340c:	f7fe ff1c 	bl	8002248 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800341a:	d901      	bls.n	8003420 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e01f      	b.n	8003460 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003420:	4b13      	ldr	r3, [pc, #76]	@ (8003470 <HAL_PWREx_EnableOverDrive+0x98>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800342c:	d1ee      	bne.n	800340c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800342e:	4b11      	ldr	r3, [pc, #68]	@ (8003474 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003430:	2201      	movs	r2, #1
 8003432:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003434:	f7fe ff08 	bl	8002248 <HAL_GetTick>
 8003438:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800343a:	e009      	b.n	8003450 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800343c:	f7fe ff04 	bl	8002248 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800344a:	d901      	bls.n	8003450 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e007      	b.n	8003460 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003450:	4b07      	ldr	r3, [pc, #28]	@ (8003470 <HAL_PWREx_EnableOverDrive+0x98>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003458:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800345c:	d1ee      	bne.n	800343c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40023800 	.word	0x40023800
 800346c:	420e0040 	.word	0x420e0040
 8003470:	40007000 	.word	0x40007000
 8003474:	420e0044 	.word	0x420e0044

08003478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0cc      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800348c:	4b68      	ldr	r3, [pc, #416]	@ (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d90c      	bls.n	80034b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349a:	4b65      	ldr	r3, [pc, #404]	@ (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a2:	4b63      	ldr	r3, [pc, #396]	@ (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0b8      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d020      	beq.n	8003502 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034cc:	4b59      	ldr	r3, [pc, #356]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4a58      	ldr	r2, [pc, #352]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80034d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e4:	4b53      	ldr	r3, [pc, #332]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	4a52      	ldr	r2, [pc, #328]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80034ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f0:	4b50      	ldr	r3, [pc, #320]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	494d      	ldr	r1, [pc, #308]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d044      	beq.n	8003598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d107      	bne.n	8003526 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003516:	4b47      	ldr	r3, [pc, #284]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d119      	bne.n	8003556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e07f      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d003      	beq.n	8003536 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003532:	2b03      	cmp	r3, #3
 8003534:	d107      	bne.n	8003546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003536:	4b3f      	ldr	r3, [pc, #252]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d109      	bne.n	8003556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e06f      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003546:	4b3b      	ldr	r3, [pc, #236]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e067      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003556:	4b37      	ldr	r3, [pc, #220]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f023 0203 	bic.w	r2, r3, #3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	4934      	ldr	r1, [pc, #208]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	4313      	orrs	r3, r2
 8003566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003568:	f7fe fe6e 	bl	8002248 <HAL_GetTick>
 800356c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356e:	e00a      	b.n	8003586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003570:	f7fe fe6a 	bl	8002248 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800357e:	4293      	cmp	r3, r2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e04f      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003586:	4b2b      	ldr	r3, [pc, #172]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 020c 	and.w	r2, r3, #12
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	429a      	cmp	r2, r3
 8003596:	d1eb      	bne.n	8003570 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003598:	4b25      	ldr	r3, [pc, #148]	@ (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d20c      	bcs.n	80035c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a6:	4b22      	ldr	r3, [pc, #136]	@ (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ae:	4b20      	ldr	r3, [pc, #128]	@ (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e032      	b.n	8003626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035cc:	4b19      	ldr	r3, [pc, #100]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	4916      	ldr	r1, [pc, #88]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ea:	4b12      	ldr	r3, [pc, #72]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	490e      	ldr	r1, [pc, #56]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035fe:	f000 f841 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 8003602:	4602      	mov	r2, r0
 8003604:	4b0b      	ldr	r3, [pc, #44]	@ (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	091b      	lsrs	r3, r3, #4
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	490a      	ldr	r1, [pc, #40]	@ (8003638 <HAL_RCC_ClockConfig+0x1c0>)
 8003610:	5ccb      	ldrb	r3, [r1, r3]
 8003612:	fa22 f303 	lsr.w	r3, r2, r3
 8003616:	4a09      	ldr	r2, [pc, #36]	@ (800363c <HAL_RCC_ClockConfig+0x1c4>)
 8003618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800361a:	4b09      	ldr	r3, [pc, #36]	@ (8003640 <HAL_RCC_ClockConfig+0x1c8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7fe fdce 	bl	80021c0 <HAL_InitTick>

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40023c00 	.word	0x40023c00
 8003634:	40023800 	.word	0x40023800
 8003638:	08008d24 	.word	0x08008d24
 800363c:	20000010 	.word	0x20000010
 8003640:	20000014 	.word	0x20000014

08003644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003648:	4b03      	ldr	r3, [pc, #12]	@ (8003658 <HAL_RCC_GetHCLKFreq+0x14>)
 800364a:	681b      	ldr	r3, [r3, #0]
}
 800364c:	4618      	mov	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	20000010 	.word	0x20000010

0800365c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003660:	f7ff fff0 	bl	8003644 <HAL_RCC_GetHCLKFreq>
 8003664:	4602      	mov	r2, r0
 8003666:	4b05      	ldr	r3, [pc, #20]	@ (800367c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	0a9b      	lsrs	r3, r3, #10
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	4903      	ldr	r1, [pc, #12]	@ (8003680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003672:	5ccb      	ldrb	r3, [r1, r3]
 8003674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003678:	4618      	mov	r0, r3
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40023800 	.word	0x40023800
 8003680:	08008d34 	.word	0x08008d34

08003684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003688:	b0ae      	sub	sp, #184	@ 0xb8
 800368a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003692:	2300      	movs	r3, #0
 8003694:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036aa:	4bcb      	ldr	r3, [pc, #812]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 030c 	and.w	r3, r3, #12
 80036b2:	2b0c      	cmp	r3, #12
 80036b4:	f200 8206 	bhi.w	8003ac4 <HAL_RCC_GetSysClockFreq+0x440>
 80036b8:	a201      	add	r2, pc, #4	@ (adr r2, 80036c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80036ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036be:	bf00      	nop
 80036c0:	080036f5 	.word	0x080036f5
 80036c4:	08003ac5 	.word	0x08003ac5
 80036c8:	08003ac5 	.word	0x08003ac5
 80036cc:	08003ac5 	.word	0x08003ac5
 80036d0:	080036fd 	.word	0x080036fd
 80036d4:	08003ac5 	.word	0x08003ac5
 80036d8:	08003ac5 	.word	0x08003ac5
 80036dc:	08003ac5 	.word	0x08003ac5
 80036e0:	08003705 	.word	0x08003705
 80036e4:	08003ac5 	.word	0x08003ac5
 80036e8:	08003ac5 	.word	0x08003ac5
 80036ec:	08003ac5 	.word	0x08003ac5
 80036f0:	080038f5 	.word	0x080038f5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036f4:	4bb9      	ldr	r3, [pc, #740]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x358>)
 80036f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80036fa:	e1e7      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036fc:	4bb8      	ldr	r3, [pc, #736]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80036fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003702:	e1e3      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003704:	4bb4      	ldr	r3, [pc, #720]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800370c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003710:	4bb1      	ldr	r3, [pc, #708]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d071      	beq.n	8003800 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371c:	4bae      	ldr	r3, [pc, #696]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	099b      	lsrs	r3, r3, #6
 8003722:	2200      	movs	r2, #0
 8003724:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003728:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800372c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003734:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003738:	2300      	movs	r3, #0
 800373a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800373e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003742:	4622      	mov	r2, r4
 8003744:	462b      	mov	r3, r5
 8003746:	f04f 0000 	mov.w	r0, #0
 800374a:	f04f 0100 	mov.w	r1, #0
 800374e:	0159      	lsls	r1, r3, #5
 8003750:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003754:	0150      	lsls	r0, r2, #5
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	4621      	mov	r1, r4
 800375c:	1a51      	subs	r1, r2, r1
 800375e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003760:	4629      	mov	r1, r5
 8003762:	eb63 0301 	sbc.w	r3, r3, r1
 8003766:	647b      	str	r3, [r7, #68]	@ 0x44
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003774:	4649      	mov	r1, r9
 8003776:	018b      	lsls	r3, r1, #6
 8003778:	4641      	mov	r1, r8
 800377a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800377e:	4641      	mov	r1, r8
 8003780:	018a      	lsls	r2, r1, #6
 8003782:	4641      	mov	r1, r8
 8003784:	1a51      	subs	r1, r2, r1
 8003786:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003788:	4649      	mov	r1, r9
 800378a:	eb63 0301 	sbc.w	r3, r3, r1
 800378e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800379c:	4649      	mov	r1, r9
 800379e:	00cb      	lsls	r3, r1, #3
 80037a0:	4641      	mov	r1, r8
 80037a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037a6:	4641      	mov	r1, r8
 80037a8:	00ca      	lsls	r2, r1, #3
 80037aa:	4610      	mov	r0, r2
 80037ac:	4619      	mov	r1, r3
 80037ae:	4603      	mov	r3, r0
 80037b0:	4622      	mov	r2, r4
 80037b2:	189b      	adds	r3, r3, r2
 80037b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80037b6:	462b      	mov	r3, r5
 80037b8:	460a      	mov	r2, r1
 80037ba:	eb42 0303 	adc.w	r3, r2, r3
 80037be:	637b      	str	r3, [r7, #52]	@ 0x34
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80037cc:	4629      	mov	r1, r5
 80037ce:	024b      	lsls	r3, r1, #9
 80037d0:	4621      	mov	r1, r4
 80037d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037d6:	4621      	mov	r1, r4
 80037d8:	024a      	lsls	r2, r1, #9
 80037da:	4610      	mov	r0, r2
 80037dc:	4619      	mov	r1, r3
 80037de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80037ec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80037f0:	f7fd f9fa 	bl	8000be8 <__aeabi_uldivmod>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4613      	mov	r3, r2
 80037fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037fe:	e067      	b.n	80038d0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003800:	4b75      	ldr	r3, [pc, #468]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	099b      	lsrs	r3, r3, #6
 8003806:	2200      	movs	r2, #0
 8003808:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800380c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003810:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003818:	67bb      	str	r3, [r7, #120]	@ 0x78
 800381a:	2300      	movs	r3, #0
 800381c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800381e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003822:	4622      	mov	r2, r4
 8003824:	462b      	mov	r3, r5
 8003826:	f04f 0000 	mov.w	r0, #0
 800382a:	f04f 0100 	mov.w	r1, #0
 800382e:	0159      	lsls	r1, r3, #5
 8003830:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003834:	0150      	lsls	r0, r2, #5
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4621      	mov	r1, r4
 800383c:	1a51      	subs	r1, r2, r1
 800383e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003840:	4629      	mov	r1, r5
 8003842:	eb63 0301 	sbc.w	r3, r3, r1
 8003846:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003854:	4649      	mov	r1, r9
 8003856:	018b      	lsls	r3, r1, #6
 8003858:	4641      	mov	r1, r8
 800385a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800385e:	4641      	mov	r1, r8
 8003860:	018a      	lsls	r2, r1, #6
 8003862:	4641      	mov	r1, r8
 8003864:	ebb2 0a01 	subs.w	sl, r2, r1
 8003868:	4649      	mov	r1, r9
 800386a:	eb63 0b01 	sbc.w	fp, r3, r1
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800387a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800387e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003882:	4692      	mov	sl, r2
 8003884:	469b      	mov	fp, r3
 8003886:	4623      	mov	r3, r4
 8003888:	eb1a 0303 	adds.w	r3, sl, r3
 800388c:	623b      	str	r3, [r7, #32]
 800388e:	462b      	mov	r3, r5
 8003890:	eb4b 0303 	adc.w	r3, fp, r3
 8003894:	627b      	str	r3, [r7, #36]	@ 0x24
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80038a2:	4629      	mov	r1, r5
 80038a4:	028b      	lsls	r3, r1, #10
 80038a6:	4621      	mov	r1, r4
 80038a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038ac:	4621      	mov	r1, r4
 80038ae:	028a      	lsls	r2, r1, #10
 80038b0:	4610      	mov	r0, r2
 80038b2:	4619      	mov	r1, r3
 80038b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038b8:	2200      	movs	r2, #0
 80038ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80038bc:	677a      	str	r2, [r7, #116]	@ 0x74
 80038be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80038c2:	f7fd f991 	bl	8000be8 <__aeabi_uldivmod>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4613      	mov	r3, r2
 80038cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038d0:	4b41      	ldr	r3, [pc, #260]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	0c1b      	lsrs	r3, r3, #16
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	3301      	adds	r3, #1
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80038e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80038e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80038f2:	e0eb      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038f4:	4b38      	ldr	r3, [pc, #224]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003900:	4b35      	ldr	r3, [pc, #212]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d06b      	beq.n	80039e4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800390c:	4b32      	ldr	r3, [pc, #200]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	099b      	lsrs	r3, r3, #6
 8003912:	2200      	movs	r2, #0
 8003914:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003916:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003918:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800391a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800391e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003920:	2300      	movs	r3, #0
 8003922:	667b      	str	r3, [r7, #100]	@ 0x64
 8003924:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003928:	4622      	mov	r2, r4
 800392a:	462b      	mov	r3, r5
 800392c:	f04f 0000 	mov.w	r0, #0
 8003930:	f04f 0100 	mov.w	r1, #0
 8003934:	0159      	lsls	r1, r3, #5
 8003936:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800393a:	0150      	lsls	r0, r2, #5
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4621      	mov	r1, r4
 8003942:	1a51      	subs	r1, r2, r1
 8003944:	61b9      	str	r1, [r7, #24]
 8003946:	4629      	mov	r1, r5
 8003948:	eb63 0301 	sbc.w	r3, r3, r1
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800395a:	4659      	mov	r1, fp
 800395c:	018b      	lsls	r3, r1, #6
 800395e:	4651      	mov	r1, sl
 8003960:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003964:	4651      	mov	r1, sl
 8003966:	018a      	lsls	r2, r1, #6
 8003968:	4651      	mov	r1, sl
 800396a:	ebb2 0801 	subs.w	r8, r2, r1
 800396e:	4659      	mov	r1, fp
 8003970:	eb63 0901 	sbc.w	r9, r3, r1
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003980:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003984:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003988:	4690      	mov	r8, r2
 800398a:	4699      	mov	r9, r3
 800398c:	4623      	mov	r3, r4
 800398e:	eb18 0303 	adds.w	r3, r8, r3
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	462b      	mov	r3, r5
 8003996:	eb49 0303 	adc.w	r3, r9, r3
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80039a8:	4629      	mov	r1, r5
 80039aa:	024b      	lsls	r3, r1, #9
 80039ac:	4621      	mov	r1, r4
 80039ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039b2:	4621      	mov	r1, r4
 80039b4:	024a      	lsls	r2, r1, #9
 80039b6:	4610      	mov	r0, r2
 80039b8:	4619      	mov	r1, r3
 80039ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039be:	2200      	movs	r2, #0
 80039c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039c2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80039c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039c8:	f7fd f90e 	bl	8000be8 <__aeabi_uldivmod>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4613      	mov	r3, r2
 80039d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039d6:	e065      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x420>
 80039d8:	40023800 	.word	0x40023800
 80039dc:	00f42400 	.word	0x00f42400
 80039e0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e4:	4b3d      	ldr	r3, [pc, #244]	@ (8003adc <HAL_RCC_GetSysClockFreq+0x458>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	099b      	lsrs	r3, r3, #6
 80039ea:	2200      	movs	r2, #0
 80039ec:	4618      	mov	r0, r3
 80039ee:	4611      	mov	r1, r2
 80039f0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80039f6:	2300      	movs	r3, #0
 80039f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80039fa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80039fe:	4642      	mov	r2, r8
 8003a00:	464b      	mov	r3, r9
 8003a02:	f04f 0000 	mov.w	r0, #0
 8003a06:	f04f 0100 	mov.w	r1, #0
 8003a0a:	0159      	lsls	r1, r3, #5
 8003a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a10:	0150      	lsls	r0, r2, #5
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4641      	mov	r1, r8
 8003a18:	1a51      	subs	r1, r2, r1
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	4649      	mov	r1, r9
 8003a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003a30:	4659      	mov	r1, fp
 8003a32:	018b      	lsls	r3, r1, #6
 8003a34:	4651      	mov	r1, sl
 8003a36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a3a:	4651      	mov	r1, sl
 8003a3c:	018a      	lsls	r2, r1, #6
 8003a3e:	4651      	mov	r1, sl
 8003a40:	1a54      	subs	r4, r2, r1
 8003a42:	4659      	mov	r1, fp
 8003a44:	eb63 0501 	sbc.w	r5, r3, r1
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	00eb      	lsls	r3, r5, #3
 8003a52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a56:	00e2      	lsls	r2, r4, #3
 8003a58:	4614      	mov	r4, r2
 8003a5a:	461d      	mov	r5, r3
 8003a5c:	4643      	mov	r3, r8
 8003a5e:	18e3      	adds	r3, r4, r3
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	464b      	mov	r3, r9
 8003a64:	eb45 0303 	adc.w	r3, r5, r3
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a76:	4629      	mov	r1, r5
 8003a78:	028b      	lsls	r3, r1, #10
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a80:	4621      	mov	r1, r4
 8003a82:	028a      	lsls	r2, r1, #10
 8003a84:	4610      	mov	r0, r2
 8003a86:	4619      	mov	r1, r3
 8003a88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a90:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003a92:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a96:	f7fd f8a7 	bl	8000be8 <__aeabi_uldivmod>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8003adc <HAL_RCC_GetSysClockFreq+0x458>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	0f1b      	lsrs	r3, r3, #28
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003ab2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ab6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ac2:	e003      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ac4:	4b06      	ldr	r3, [pc, #24]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003ac6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003aca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003acc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	37b8      	adds	r7, #184	@ 0xb8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ada:	bf00      	nop
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	00f42400 	.word	0x00f42400

08003ae4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e28d      	b.n	8004012 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 8083 	beq.w	8003c0a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b04:	4b94      	ldr	r3, [pc, #592]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 030c 	and.w	r3, r3, #12
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d019      	beq.n	8003b44 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003b10:	4b91      	ldr	r3, [pc, #580]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 030c 	and.w	r3, r3, #12
        || \
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d106      	bne.n	8003b2a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003b1c:	4b8e      	ldr	r3, [pc, #568]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b28:	d00c      	beq.n	8003b44 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b2a:	4b8b      	ldr	r3, [pc, #556]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003b32:	2b0c      	cmp	r3, #12
 8003b34:	d112      	bne.n	8003b5c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b36:	4b88      	ldr	r3, [pc, #544]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b42:	d10b      	bne.n	8003b5c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b44:	4b84      	ldr	r3, [pc, #528]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d05b      	beq.n	8003c08 <HAL_RCC_OscConfig+0x124>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d157      	bne.n	8003c08 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e25a      	b.n	8004012 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b64:	d106      	bne.n	8003b74 <HAL_RCC_OscConfig+0x90>
 8003b66:	4b7c      	ldr	r3, [pc, #496]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a7b      	ldr	r2, [pc, #492]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	e01d      	b.n	8003bb0 <HAL_RCC_OscConfig+0xcc>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b7c:	d10c      	bne.n	8003b98 <HAL_RCC_OscConfig+0xb4>
 8003b7e:	4b76      	ldr	r3, [pc, #472]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a75      	ldr	r2, [pc, #468]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003b84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	4b73      	ldr	r3, [pc, #460]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a72      	ldr	r2, [pc, #456]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	e00b      	b.n	8003bb0 <HAL_RCC_OscConfig+0xcc>
 8003b98:	4b6f      	ldr	r3, [pc, #444]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a6e      	ldr	r2, [pc, #440]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003b9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ba2:	6013      	str	r3, [r2, #0]
 8003ba4:	4b6c      	ldr	r3, [pc, #432]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a6b      	ldr	r2, [pc, #428]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003baa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d013      	beq.n	8003be0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb8:	f7fe fb46 	bl	8002248 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc0:	f7fe fb42 	bl	8002248 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b64      	cmp	r3, #100	@ 0x64
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e21f      	b.n	8004012 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd2:	4b61      	ldr	r3, [pc, #388]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0f0      	beq.n	8003bc0 <HAL_RCC_OscConfig+0xdc>
 8003bde:	e014      	b.n	8003c0a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fe fb32 	bl	8002248 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be8:	f7fe fb2e 	bl	8002248 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b64      	cmp	r3, #100	@ 0x64
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e20b      	b.n	8004012 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bfa:	4b57      	ldr	r3, [pc, #348]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x104>
 8003c06:	e000      	b.n	8003c0a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d06f      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c16:	4b50      	ldr	r3, [pc, #320]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d017      	beq.n	8003c52 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003c22:	4b4d      	ldr	r3, [pc, #308]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 030c 	and.w	r3, r3, #12
        || \
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d105      	bne.n	8003c3a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003c2e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00b      	beq.n	8003c52 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c3a:	4b47      	ldr	r3, [pc, #284]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003c42:	2b0c      	cmp	r3, #12
 8003c44:	d11c      	bne.n	8003c80 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c46:	4b44      	ldr	r3, [pc, #272]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d116      	bne.n	8003c80 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c52:	4b41      	ldr	r3, [pc, #260]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <HAL_RCC_OscConfig+0x186>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d001      	beq.n	8003c6a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e1d3      	b.n	8004012 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	4937      	ldr	r1, [pc, #220]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7e:	e03a      	b.n	8003cf6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d020      	beq.n	8003cca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c88:	4b34      	ldr	r3, [pc, #208]	@ (8003d5c <HAL_RCC_OscConfig+0x278>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8e:	f7fe fadb 	bl	8002248 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c96:	f7fe fad7 	bl	8002248 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e1b4      	b.n	8004012 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0f0      	beq.n	8003c96 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb4:	4b28      	ldr	r3, [pc, #160]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4925      	ldr	r1, [pc, #148]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	600b      	str	r3, [r1, #0]
 8003cc8:	e015      	b.n	8003cf6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cca:	4b24      	ldr	r3, [pc, #144]	@ (8003d5c <HAL_RCC_OscConfig+0x278>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd0:	f7fe faba 	bl	8002248 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd8:	f7fe fab6 	bl	8002248 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e193      	b.n	8004012 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cea:	4b1b      	ldr	r3, [pc, #108]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d036      	beq.n	8003d70 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d016      	beq.n	8003d38 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d0a:	4b15      	ldr	r3, [pc, #84]	@ (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d10:	f7fe fa9a 	bl	8002248 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d18:	f7fe fa96 	bl	8002248 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e173      	b.n	8004012 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0f0      	beq.n	8003d18 <HAL_RCC_OscConfig+0x234>
 8003d36:	e01b      	b.n	8003d70 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d38:	4b09      	ldr	r3, [pc, #36]	@ (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3e:	f7fe fa83 	bl	8002248 <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d44:	e00e      	b.n	8003d64 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d46:	f7fe fa7f 	bl	8002248 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d907      	bls.n	8003d64 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e15c      	b.n	8004012 <HAL_RCC_OscConfig+0x52e>
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	42470000 	.word	0x42470000
 8003d60:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d64:	4b8a      	ldr	r3, [pc, #552]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1ea      	bne.n	8003d46 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 8097 	beq.w	8003eac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d82:	4b83      	ldr	r3, [pc, #524]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10f      	bne.n	8003dae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	4b7f      	ldr	r3, [pc, #508]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d96:	4a7e      	ldr	r2, [pc, #504]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d9e:	4b7c      	ldr	r3, [pc, #496]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da6:	60bb      	str	r3, [r7, #8]
 8003da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003daa:	2301      	movs	r3, #1
 8003dac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dae:	4b79      	ldr	r3, [pc, #484]	@ (8003f94 <HAL_RCC_OscConfig+0x4b0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d118      	bne.n	8003dec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dba:	4b76      	ldr	r3, [pc, #472]	@ (8003f94 <HAL_RCC_OscConfig+0x4b0>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a75      	ldr	r2, [pc, #468]	@ (8003f94 <HAL_RCC_OscConfig+0x4b0>)
 8003dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc6:	f7fe fa3f 	bl	8002248 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dce:	f7fe fa3b 	bl	8002248 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e118      	b.n	8004012 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de0:	4b6c      	ldr	r3, [pc, #432]	@ (8003f94 <HAL_RCC_OscConfig+0x4b0>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d106      	bne.n	8003e02 <HAL_RCC_OscConfig+0x31e>
 8003df4:	4b66      	ldr	r3, [pc, #408]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df8:	4a65      	ldr	r2, [pc, #404]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e00:	e01c      	b.n	8003e3c <HAL_RCC_OscConfig+0x358>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b05      	cmp	r3, #5
 8003e08:	d10c      	bne.n	8003e24 <HAL_RCC_OscConfig+0x340>
 8003e0a:	4b61      	ldr	r3, [pc, #388]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0e:	4a60      	ldr	r2, [pc, #384]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003e10:	f043 0304 	orr.w	r3, r3, #4
 8003e14:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e16:	4b5e      	ldr	r3, [pc, #376]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1a:	4a5d      	ldr	r2, [pc, #372]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003e1c:	f043 0301 	orr.w	r3, r3, #1
 8003e20:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e22:	e00b      	b.n	8003e3c <HAL_RCC_OscConfig+0x358>
 8003e24:	4b5a      	ldr	r3, [pc, #360]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e28:	4a59      	ldr	r2, [pc, #356]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003e2a:	f023 0301 	bic.w	r3, r3, #1
 8003e2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e30:	4b57      	ldr	r3, [pc, #348]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e34:	4a56      	ldr	r2, [pc, #344]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003e36:	f023 0304 	bic.w	r3, r3, #4
 8003e3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d015      	beq.n	8003e70 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e44:	f7fe fa00 	bl	8002248 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e4a:	e00a      	b.n	8003e62 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4c:	f7fe f9fc 	bl	8002248 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e0d7      	b.n	8004012 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e62:	4b4b      	ldr	r3, [pc, #300]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0ee      	beq.n	8003e4c <HAL_RCC_OscConfig+0x368>
 8003e6e:	e014      	b.n	8003e9a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e70:	f7fe f9ea 	bl	8002248 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e76:	e00a      	b.n	8003e8e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e78:	f7fe f9e6 	bl	8002248 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e0c1      	b.n	8004012 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e8e:	4b40      	ldr	r3, [pc, #256]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1ee      	bne.n	8003e78 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e9a:	7dfb      	ldrb	r3, [r7, #23]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d105      	bne.n	8003eac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea4:	4a3a      	ldr	r2, [pc, #232]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003ea6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eaa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80ad 	beq.w	8004010 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eb6:	4b36      	ldr	r3, [pc, #216]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d060      	beq.n	8003f84 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d145      	bne.n	8003f56 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eca:	4b33      	ldr	r3, [pc, #204]	@ (8003f98 <HAL_RCC_OscConfig+0x4b4>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7fe f9ba 	bl	8002248 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed8:	f7fe f9b6 	bl	8002248 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e093      	b.n	8004012 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eea:	4b29      	ldr	r3, [pc, #164]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69da      	ldr	r2, [r3, #28]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	019b      	lsls	r3, r3, #6
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0c:	085b      	lsrs	r3, r3, #1
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	041b      	lsls	r3, r3, #16
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f18:	061b      	lsls	r3, r3, #24
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f20:	071b      	lsls	r3, r3, #28
 8003f22:	491b      	ldr	r1, [pc, #108]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f28:	4b1b      	ldr	r3, [pc, #108]	@ (8003f98 <HAL_RCC_OscConfig+0x4b4>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2e:	f7fe f98b 	bl	8002248 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f36:	f7fe f987 	bl	8002248 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e064      	b.n	8004012 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f48:	4b11      	ldr	r3, [pc, #68]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0x452>
 8003f54:	e05c      	b.n	8004010 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f56:	4b10      	ldr	r3, [pc, #64]	@ (8003f98 <HAL_RCC_OscConfig+0x4b4>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7fe f974 	bl	8002248 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f64:	f7fe f970 	bl	8002248 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e04d      	b.n	8004012 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f76:	4b06      	ldr	r3, [pc, #24]	@ (8003f90 <HAL_RCC_OscConfig+0x4ac>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f0      	bne.n	8003f64 <HAL_RCC_OscConfig+0x480>
 8003f82:	e045      	b.n	8004010 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d107      	bne.n	8003f9c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e040      	b.n	8004012 <HAL_RCC_OscConfig+0x52e>
 8003f90:	40023800 	.word	0x40023800
 8003f94:	40007000 	.word	0x40007000
 8003f98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800401c <HAL_RCC_OscConfig+0x538>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d030      	beq.n	800400c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d129      	bne.n	800400c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d122      	bne.n	800400c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fcc:	4013      	ands	r3, r2
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d119      	bne.n	800400c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe2:	085b      	lsrs	r3, r3, #1
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d10f      	bne.n	800400c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d107      	bne.n	800400c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004006:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d001      	beq.n	8004010 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e000      	b.n	8004012 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40023800 	.word	0x40023800

08004020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e041      	b.n	80040b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fd ffb0 	bl	8001fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	4619      	mov	r1, r3
 800405e:	4610      	mov	r0, r2
 8004060:	f000 fd96 	bl	8004b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d001      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e04e      	b.n	8004176 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a23      	ldr	r2, [pc, #140]	@ (8004184 <HAL_TIM_Base_Start_IT+0xc4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d022      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0x80>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004102:	d01d      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0x80>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1f      	ldr	r2, [pc, #124]	@ (8004188 <HAL_TIM_Base_Start_IT+0xc8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d018      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0x80>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a1e      	ldr	r2, [pc, #120]	@ (800418c <HAL_TIM_Base_Start_IT+0xcc>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d013      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0x80>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1c      	ldr	r2, [pc, #112]	@ (8004190 <HAL_TIM_Base_Start_IT+0xd0>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00e      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0x80>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a1b      	ldr	r2, [pc, #108]	@ (8004194 <HAL_TIM_Base_Start_IT+0xd4>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d009      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0x80>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a19      	ldr	r2, [pc, #100]	@ (8004198 <HAL_TIM_Base_Start_IT+0xd8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d004      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0x80>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a18      	ldr	r2, [pc, #96]	@ (800419c <HAL_TIM_Base_Start_IT+0xdc>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d111      	bne.n	8004164 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b06      	cmp	r3, #6
 8004150:	d010      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0201 	orr.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004162:	e007      	b.n	8004174 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40010000 	.word	0x40010000
 8004188:	40000400 	.word	0x40000400
 800418c:	40000800 	.word	0x40000800
 8004190:	40000c00 	.word	0x40000c00
 8004194:	40010400 	.word	0x40010400
 8004198:	40014000 	.word	0x40014000
 800419c:	40001800 	.word	0x40001800

080041a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e041      	b.n	8004236 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f839 	bl	800423e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3304      	adds	r3, #4
 80041dc:	4619      	mov	r1, r3
 80041de:	4610      	mov	r0, r2
 80041e0:	f000 fcd6 	bl	8004b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
	...

08004254 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d109      	bne.n	8004278 <HAL_TIM_PWM_Start+0x24>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b01      	cmp	r3, #1
 800426e:	bf14      	ite	ne
 8004270:	2301      	movne	r3, #1
 8004272:	2300      	moveq	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	e022      	b.n	80042be <HAL_TIM_PWM_Start+0x6a>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b04      	cmp	r3, #4
 800427c:	d109      	bne.n	8004292 <HAL_TIM_PWM_Start+0x3e>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b01      	cmp	r3, #1
 8004288:	bf14      	ite	ne
 800428a:	2301      	movne	r3, #1
 800428c:	2300      	moveq	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	e015      	b.n	80042be <HAL_TIM_PWM_Start+0x6a>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b08      	cmp	r3, #8
 8004296:	d109      	bne.n	80042ac <HAL_TIM_PWM_Start+0x58>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	bf14      	ite	ne
 80042a4:	2301      	movne	r3, #1
 80042a6:	2300      	moveq	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	e008      	b.n	80042be <HAL_TIM_PWM_Start+0x6a>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	bf14      	ite	ne
 80042b8:	2301      	movne	r3, #1
 80042ba:	2300      	moveq	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e07c      	b.n	80043c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d104      	bne.n	80042d6 <HAL_TIM_PWM_Start+0x82>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042d4:	e013      	b.n	80042fe <HAL_TIM_PWM_Start+0xaa>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d104      	bne.n	80042e6 <HAL_TIM_PWM_Start+0x92>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042e4:	e00b      	b.n	80042fe <HAL_TIM_PWM_Start+0xaa>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d104      	bne.n	80042f6 <HAL_TIM_PWM_Start+0xa2>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042f4:	e003      	b.n	80042fe <HAL_TIM_PWM_Start+0xaa>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2202      	movs	r2, #2
 80042fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2201      	movs	r2, #1
 8004304:	6839      	ldr	r1, [r7, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f000 ff32 	bl	8005170 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a2d      	ldr	r2, [pc, #180]	@ (80043c8 <HAL_TIM_PWM_Start+0x174>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d004      	beq.n	8004320 <HAL_TIM_PWM_Start+0xcc>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a2c      	ldr	r2, [pc, #176]	@ (80043cc <HAL_TIM_PWM_Start+0x178>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d101      	bne.n	8004324 <HAL_TIM_PWM_Start+0xd0>
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <HAL_TIM_PWM_Start+0xd2>
 8004324:	2300      	movs	r3, #0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d007      	beq.n	800433a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004338:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a22      	ldr	r2, [pc, #136]	@ (80043c8 <HAL_TIM_PWM_Start+0x174>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d022      	beq.n	800438a <HAL_TIM_PWM_Start+0x136>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800434c:	d01d      	beq.n	800438a <HAL_TIM_PWM_Start+0x136>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a1f      	ldr	r2, [pc, #124]	@ (80043d0 <HAL_TIM_PWM_Start+0x17c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d018      	beq.n	800438a <HAL_TIM_PWM_Start+0x136>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a1d      	ldr	r2, [pc, #116]	@ (80043d4 <HAL_TIM_PWM_Start+0x180>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d013      	beq.n	800438a <HAL_TIM_PWM_Start+0x136>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a1c      	ldr	r2, [pc, #112]	@ (80043d8 <HAL_TIM_PWM_Start+0x184>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00e      	beq.n	800438a <HAL_TIM_PWM_Start+0x136>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a16      	ldr	r2, [pc, #88]	@ (80043cc <HAL_TIM_PWM_Start+0x178>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d009      	beq.n	800438a <HAL_TIM_PWM_Start+0x136>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a18      	ldr	r2, [pc, #96]	@ (80043dc <HAL_TIM_PWM_Start+0x188>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d004      	beq.n	800438a <HAL_TIM_PWM_Start+0x136>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a16      	ldr	r2, [pc, #88]	@ (80043e0 <HAL_TIM_PWM_Start+0x18c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d111      	bne.n	80043ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b06      	cmp	r3, #6
 800439a:	d010      	beq.n	80043be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ac:	e007      	b.n	80043be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0201 	orr.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40010000 	.word	0x40010000
 80043cc:	40010400 	.word	0x40010400
 80043d0:	40000400 	.word	0x40000400
 80043d4:	40000800 	.word	0x40000800
 80043d8:	40000c00 	.word	0x40000c00
 80043dc:	40014000 	.word	0x40014000
 80043e0:	40001800 	.word	0x40001800

080043e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e097      	b.n	8004528 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d106      	bne.n	8004412 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7fd fe09 	bl	8002024 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2202      	movs	r2, #2
 8004416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6812      	ldr	r2, [r2, #0]
 8004424:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004428:	f023 0307 	bic.w	r3, r3, #7
 800442c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3304      	adds	r3, #4
 8004436:	4619      	mov	r1, r3
 8004438:	4610      	mov	r0, r2
 800443a:	f000 fba9 	bl	8004b90 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004466:	f023 0303 	bic.w	r3, r3, #3
 800446a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	021b      	lsls	r3, r3, #8
 8004476:	4313      	orrs	r3, r2
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004484:	f023 030c 	bic.w	r3, r3, #12
 8004488:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004490:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004494:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	021b      	lsls	r3, r3, #8
 80044a0:	4313      	orrs	r3, r2
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	011a      	lsls	r2, r3, #4
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	031b      	lsls	r3, r3, #12
 80044b4:	4313      	orrs	r3, r2
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80044c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80044ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	4313      	orrs	r3, r2
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004540:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004548:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004550:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004558:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d110      	bne.n	8004582 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d102      	bne.n	800456c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004566:	7b7b      	ldrb	r3, [r7, #13]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d001      	beq.n	8004570 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e069      	b.n	8004644 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004580:	e031      	b.n	80045e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b04      	cmp	r3, #4
 8004586:	d110      	bne.n	80045aa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004588:	7bbb      	ldrb	r3, [r7, #14]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d102      	bne.n	8004594 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800458e:	7b3b      	ldrb	r3, [r7, #12]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d001      	beq.n	8004598 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e055      	b.n	8004644 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045a8:	e01d      	b.n	80045e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d108      	bne.n	80045c2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045b0:	7bbb      	ldrb	r3, [r7, #14]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d105      	bne.n	80045c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045b6:	7b7b      	ldrb	r3, [r7, #13]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d102      	bne.n	80045c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80045bc:	7b3b      	ldrb	r3, [r7, #12]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d001      	beq.n	80045c6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e03e      	b.n	8004644 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2202      	movs	r2, #2
 80045ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2202      	movs	r2, #2
 80045d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2202      	movs	r2, #2
 80045da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2202      	movs	r2, #2
 80045e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_TIM_Encoder_Start+0xc4>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d008      	beq.n	8004604 <HAL_TIM_Encoder_Start+0xd4>
 80045f2:	e00f      	b.n	8004614 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2201      	movs	r2, #1
 80045fa:	2100      	movs	r1, #0
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fdb7 	bl	8005170 <TIM_CCxChannelCmd>
      break;
 8004602:	e016      	b.n	8004632 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2201      	movs	r2, #1
 800460a:	2104      	movs	r1, #4
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fdaf 	bl	8005170 <TIM_CCxChannelCmd>
      break;
 8004612:	e00e      	b.n	8004632 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2201      	movs	r2, #1
 800461a:	2100      	movs	r1, #0
 800461c:	4618      	mov	r0, r3
 800461e:	f000 fda7 	bl	8005170 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2201      	movs	r2, #1
 8004628:	2104      	movs	r1, #4
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fda0 	bl	8005170 <TIM_CCxChannelCmd>
      break;
 8004630:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f042 0201 	orr.w	r2, r2, #1
 8004640:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d020      	beq.n	80046b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01b      	beq.n	80046b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0202 	mvn.w	r2, #2
 8004680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fa5b 	bl	8004b52 <HAL_TIM_IC_CaptureCallback>
 800469c:	e005      	b.n	80046aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fa4d 	bl	8004b3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 fa5e 	bl	8004b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d020      	beq.n	80046fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01b      	beq.n	80046fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0204 	mvn.w	r2, #4
 80046cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2202      	movs	r2, #2
 80046d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fa35 	bl	8004b52 <HAL_TIM_IC_CaptureCallback>
 80046e8:	e005      	b.n	80046f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fa27 	bl	8004b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fa38 	bl	8004b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d020      	beq.n	8004748 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b00      	cmp	r3, #0
 800470e:	d01b      	beq.n	8004748 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0208 	mvn.w	r2, #8
 8004718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2204      	movs	r2, #4
 800471e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fa0f 	bl	8004b52 <HAL_TIM_IC_CaptureCallback>
 8004734:	e005      	b.n	8004742 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fa01 	bl	8004b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 fa12 	bl	8004b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f003 0310 	and.w	r3, r3, #16
 800474e:	2b00      	cmp	r3, #0
 8004750:	d020      	beq.n	8004794 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f003 0310 	and.w	r3, r3, #16
 8004758:	2b00      	cmp	r3, #0
 800475a:	d01b      	beq.n	8004794 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0210 	mvn.w	r2, #16
 8004764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2208      	movs	r2, #8
 800476a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f9e9 	bl	8004b52 <HAL_TIM_IC_CaptureCallback>
 8004780:	e005      	b.n	800478e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f9db 	bl	8004b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f9ec 	bl	8004b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00c      	beq.n	80047b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d007      	beq.n	80047b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0201 	mvn.w	r2, #1
 80047b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fc fdea 	bl	800138c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00c      	beq.n	80047dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d007      	beq.n	80047dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80047d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fd76 	bl	80052c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00c      	beq.n	8004800 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d007      	beq.n	8004800 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f9bd 	bl	8004b7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f003 0320 	and.w	r3, r3, #32
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00c      	beq.n	8004824 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f003 0320 	and.w	r3, r3, #32
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f06f 0220 	mvn.w	r2, #32
 800481c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fd48 	bl	80052b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004824:	bf00      	nop
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004842:	2b01      	cmp	r3, #1
 8004844:	d101      	bne.n	800484a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004846:	2302      	movs	r3, #2
 8004848:	e0ae      	b.n	80049a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b0c      	cmp	r3, #12
 8004856:	f200 809f 	bhi.w	8004998 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800485a:	a201      	add	r2, pc, #4	@ (adr r2, 8004860 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800485c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004860:	08004895 	.word	0x08004895
 8004864:	08004999 	.word	0x08004999
 8004868:	08004999 	.word	0x08004999
 800486c:	08004999 	.word	0x08004999
 8004870:	080048d5 	.word	0x080048d5
 8004874:	08004999 	.word	0x08004999
 8004878:	08004999 	.word	0x08004999
 800487c:	08004999 	.word	0x08004999
 8004880:	08004917 	.word	0x08004917
 8004884:	08004999 	.word	0x08004999
 8004888:	08004999 	.word	0x08004999
 800488c:	08004999 	.word	0x08004999
 8004890:	08004957 	.word	0x08004957
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fa1e 	bl	8004cdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699a      	ldr	r2, [r3, #24]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0208 	orr.w	r2, r2, #8
 80048ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699a      	ldr	r2, [r3, #24]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0204 	bic.w	r2, r2, #4
 80048be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6999      	ldr	r1, [r3, #24]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	691a      	ldr	r2, [r3, #16]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	619a      	str	r2, [r3, #24]
      break;
 80048d2:	e064      	b.n	800499e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68b9      	ldr	r1, [r7, #8]
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fa6e 	bl	8004dbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699a      	ldr	r2, [r3, #24]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6999      	ldr	r1, [r3, #24]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	021a      	lsls	r2, r3, #8
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	619a      	str	r2, [r3, #24]
      break;
 8004914:	e043      	b.n	800499e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68b9      	ldr	r1, [r7, #8]
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fac3 	bl	8004ea8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69da      	ldr	r2, [r3, #28]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f042 0208 	orr.w	r2, r2, #8
 8004930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69da      	ldr	r2, [r3, #28]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0204 	bic.w	r2, r2, #4
 8004940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69d9      	ldr	r1, [r3, #28]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	691a      	ldr	r2, [r3, #16]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	61da      	str	r2, [r3, #28]
      break;
 8004954:	e023      	b.n	800499e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	4618      	mov	r0, r3
 800495e:	f000 fb17 	bl	8004f90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69da      	ldr	r2, [r3, #28]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	69da      	ldr	r2, [r3, #28]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	69d9      	ldr	r1, [r3, #28]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	021a      	lsls	r2, r3, #8
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	61da      	str	r2, [r3, #28]
      break;
 8004996:	e002      	b.n	800499e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	75fb      	strb	r3, [r7, #23]
      break;
 800499c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_TIM_ConfigClockSource+0x1c>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e0b4      	b.n	8004b36 <HAL_TIM_ConfigClockSource+0x186>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80049ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a04:	d03e      	beq.n	8004a84 <HAL_TIM_ConfigClockSource+0xd4>
 8004a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a0a:	f200 8087 	bhi.w	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a12:	f000 8086 	beq.w	8004b22 <HAL_TIM_ConfigClockSource+0x172>
 8004a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a1a:	d87f      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a1c:	2b70      	cmp	r3, #112	@ 0x70
 8004a1e:	d01a      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0xa6>
 8004a20:	2b70      	cmp	r3, #112	@ 0x70
 8004a22:	d87b      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a24:	2b60      	cmp	r3, #96	@ 0x60
 8004a26:	d050      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0x11a>
 8004a28:	2b60      	cmp	r3, #96	@ 0x60
 8004a2a:	d877      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a2c:	2b50      	cmp	r3, #80	@ 0x50
 8004a2e:	d03c      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0xfa>
 8004a30:	2b50      	cmp	r3, #80	@ 0x50
 8004a32:	d873      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a34:	2b40      	cmp	r3, #64	@ 0x40
 8004a36:	d058      	beq.n	8004aea <HAL_TIM_ConfigClockSource+0x13a>
 8004a38:	2b40      	cmp	r3, #64	@ 0x40
 8004a3a:	d86f      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a3c:	2b30      	cmp	r3, #48	@ 0x30
 8004a3e:	d064      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a40:	2b30      	cmp	r3, #48	@ 0x30
 8004a42:	d86b      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	d060      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d867      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d05c      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d05a      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a54:	e062      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a66:	f000 fb63 	bl	8005130 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	609a      	str	r2, [r3, #8]
      break;
 8004a82:	e04f      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a94:	f000 fb4c 	bl	8005130 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004aa6:	609a      	str	r2, [r3, #8]
      break;
 8004aa8:	e03c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f000 fac0 	bl	800503c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2150      	movs	r1, #80	@ 0x50
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 fb19 	bl	80050fa <TIM_ITRx_SetConfig>
      break;
 8004ac8:	e02c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f000 fadf 	bl	800509a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2160      	movs	r1, #96	@ 0x60
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fb09 	bl	80050fa <TIM_ITRx_SetConfig>
      break;
 8004ae8:	e01c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af6:	461a      	mov	r2, r3
 8004af8:	f000 faa0 	bl	800503c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2140      	movs	r1, #64	@ 0x40
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 faf9 	bl	80050fa <TIM_ITRx_SetConfig>
      break;
 8004b08:	e00c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4619      	mov	r1, r3
 8004b14:	4610      	mov	r0, r2
 8004b16:	f000 faf0 	bl	80050fa <TIM_ITRx_SetConfig>
      break;
 8004b1a:	e003      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b20:	e000      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a43      	ldr	r2, [pc, #268]	@ (8004cb0 <TIM_Base_SetConfig+0x120>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d013      	beq.n	8004bd0 <TIM_Base_SetConfig+0x40>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bae:	d00f      	beq.n	8004bd0 <TIM_Base_SetConfig+0x40>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a40      	ldr	r2, [pc, #256]	@ (8004cb4 <TIM_Base_SetConfig+0x124>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00b      	beq.n	8004bd0 <TIM_Base_SetConfig+0x40>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a3f      	ldr	r2, [pc, #252]	@ (8004cb8 <TIM_Base_SetConfig+0x128>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d007      	beq.n	8004bd0 <TIM_Base_SetConfig+0x40>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a3e      	ldr	r2, [pc, #248]	@ (8004cbc <TIM_Base_SetConfig+0x12c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d003      	beq.n	8004bd0 <TIM_Base_SetConfig+0x40>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a3d      	ldr	r2, [pc, #244]	@ (8004cc0 <TIM_Base_SetConfig+0x130>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d108      	bne.n	8004be2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a32      	ldr	r2, [pc, #200]	@ (8004cb0 <TIM_Base_SetConfig+0x120>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d02b      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bf0:	d027      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a2f      	ldr	r2, [pc, #188]	@ (8004cb4 <TIM_Base_SetConfig+0x124>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d023      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a2e      	ldr	r2, [pc, #184]	@ (8004cb8 <TIM_Base_SetConfig+0x128>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d01f      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a2d      	ldr	r2, [pc, #180]	@ (8004cbc <TIM_Base_SetConfig+0x12c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d01b      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a2c      	ldr	r2, [pc, #176]	@ (8004cc0 <TIM_Base_SetConfig+0x130>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d017      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a2b      	ldr	r2, [pc, #172]	@ (8004cc4 <TIM_Base_SetConfig+0x134>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d013      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a2a      	ldr	r2, [pc, #168]	@ (8004cc8 <TIM_Base_SetConfig+0x138>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d00f      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a29      	ldr	r2, [pc, #164]	@ (8004ccc <TIM_Base_SetConfig+0x13c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d00b      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a28      	ldr	r2, [pc, #160]	@ (8004cd0 <TIM_Base_SetConfig+0x140>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d007      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a27      	ldr	r2, [pc, #156]	@ (8004cd4 <TIM_Base_SetConfig+0x144>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d003      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a26      	ldr	r2, [pc, #152]	@ (8004cd8 <TIM_Base_SetConfig+0x148>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d108      	bne.n	8004c54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a0e      	ldr	r2, [pc, #56]	@ (8004cb0 <TIM_Base_SetConfig+0x120>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d003      	beq.n	8004c82 <TIM_Base_SetConfig+0xf2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a10      	ldr	r2, [pc, #64]	@ (8004cc0 <TIM_Base_SetConfig+0x130>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d103      	bne.n	8004c8a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f043 0204 	orr.w	r2, r3, #4
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	601a      	str	r2, [r3, #0]
}
 8004ca2:	bf00      	nop
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40010000 	.word	0x40010000
 8004cb4:	40000400 	.word	0x40000400
 8004cb8:	40000800 	.word	0x40000800
 8004cbc:	40000c00 	.word	0x40000c00
 8004cc0:	40010400 	.word	0x40010400
 8004cc4:	40014000 	.word	0x40014000
 8004cc8:	40014400 	.word	0x40014400
 8004ccc:	40014800 	.word	0x40014800
 8004cd0:	40001800 	.word	0x40001800
 8004cd4:	40001c00 	.word	0x40001c00
 8004cd8:	40002000 	.word	0x40002000

08004cdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	f023 0201 	bic.w	r2, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0303 	bic.w	r3, r3, #3
 8004d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f023 0302 	bic.w	r3, r3, #2
 8004d24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a20      	ldr	r2, [pc, #128]	@ (8004db4 <TIM_OC1_SetConfig+0xd8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d003      	beq.n	8004d40 <TIM_OC1_SetConfig+0x64>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8004db8 <TIM_OC1_SetConfig+0xdc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d10c      	bne.n	8004d5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f023 0308 	bic.w	r3, r3, #8
 8004d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f023 0304 	bic.w	r3, r3, #4
 8004d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a15      	ldr	r2, [pc, #84]	@ (8004db4 <TIM_OC1_SetConfig+0xd8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d003      	beq.n	8004d6a <TIM_OC1_SetConfig+0x8e>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a14      	ldr	r2, [pc, #80]	@ (8004db8 <TIM_OC1_SetConfig+0xdc>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d111      	bne.n	8004d8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	621a      	str	r2, [r3, #32]
}
 8004da8:	bf00      	nop
 8004daa:	371c      	adds	r7, #28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	40010000 	.word	0x40010000
 8004db8:	40010400 	.word	0x40010400

08004dbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	f023 0210 	bic.w	r2, r3, #16
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	021b      	lsls	r3, r3, #8
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f023 0320 	bic.w	r3, r3, #32
 8004e06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	011b      	lsls	r3, r3, #4
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a22      	ldr	r2, [pc, #136]	@ (8004ea0 <TIM_OC2_SetConfig+0xe4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d003      	beq.n	8004e24 <TIM_OC2_SetConfig+0x68>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a21      	ldr	r2, [pc, #132]	@ (8004ea4 <TIM_OC2_SetConfig+0xe8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d10d      	bne.n	8004e40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a17      	ldr	r2, [pc, #92]	@ (8004ea0 <TIM_OC2_SetConfig+0xe4>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d003      	beq.n	8004e50 <TIM_OC2_SetConfig+0x94>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a16      	ldr	r2, [pc, #88]	@ (8004ea4 <TIM_OC2_SetConfig+0xe8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d113      	bne.n	8004e78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	621a      	str	r2, [r3, #32]
}
 8004e92:	bf00      	nop
 8004e94:	371c      	adds	r7, #28
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40010000 	.word	0x40010000
 8004ea4:	40010400 	.word	0x40010400

08004ea8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0303 	bic.w	r3, r3, #3
 8004ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	021b      	lsls	r3, r3, #8
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a21      	ldr	r2, [pc, #132]	@ (8004f88 <TIM_OC3_SetConfig+0xe0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d003      	beq.n	8004f0e <TIM_OC3_SetConfig+0x66>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a20      	ldr	r2, [pc, #128]	@ (8004f8c <TIM_OC3_SetConfig+0xe4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d10d      	bne.n	8004f2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	021b      	lsls	r3, r3, #8
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a16      	ldr	r2, [pc, #88]	@ (8004f88 <TIM_OC3_SetConfig+0xe0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d003      	beq.n	8004f3a <TIM_OC3_SetConfig+0x92>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a15      	ldr	r2, [pc, #84]	@ (8004f8c <TIM_OC3_SetConfig+0xe4>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d113      	bne.n	8004f62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	621a      	str	r2, [r3, #32]
}
 8004f7c:	bf00      	nop
 8004f7e:	371c      	adds	r7, #28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	40010000 	.word	0x40010000
 8004f8c:	40010400 	.word	0x40010400

08004f90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	021b      	lsls	r3, r3, #8
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	031b      	lsls	r3, r3, #12
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a12      	ldr	r2, [pc, #72]	@ (8005034 <TIM_OC4_SetConfig+0xa4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d003      	beq.n	8004ff8 <TIM_OC4_SetConfig+0x68>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a11      	ldr	r2, [pc, #68]	@ (8005038 <TIM_OC4_SetConfig+0xa8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d109      	bne.n	800500c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ffe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	019b      	lsls	r3, r3, #6
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	621a      	str	r2, [r3, #32]
}
 8005026:	bf00      	nop
 8005028:	371c      	adds	r7, #28
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40010000 	.word	0x40010000
 8005038:	40010400 	.word	0x40010400

0800503c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	f023 0201 	bic.w	r2, r3, #1
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f023 030a 	bic.w	r3, r3, #10
 8005078:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	621a      	str	r2, [r3, #32]
}
 800508e:	bf00      	nop
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800509a:	b480      	push	{r7}
 800509c:	b087      	sub	sp, #28
 800509e:	af00      	add	r7, sp, #0
 80050a0:	60f8      	str	r0, [r7, #12]
 80050a2:	60b9      	str	r1, [r7, #8]
 80050a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	f023 0210 	bic.w	r2, r3, #16
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	031b      	lsls	r3, r3, #12
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80050d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	621a      	str	r2, [r3, #32]
}
 80050ee:	bf00      	nop
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b085      	sub	sp, #20
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005110:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	f043 0307 	orr.w	r3, r3, #7
 800511c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	609a      	str	r2, [r3, #8]
}
 8005124:	bf00      	nop
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800514a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	021a      	lsls	r2, r3, #8
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	431a      	orrs	r2, r3
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4313      	orrs	r3, r2
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	609a      	str	r2, [r3, #8]
}
 8005164:	bf00      	nop
 8005166:	371c      	adds	r7, #28
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f003 031f 	and.w	r3, r3, #31
 8005182:	2201      	movs	r2, #1
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6a1a      	ldr	r2, [r3, #32]
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	43db      	mvns	r3, r3
 8005192:	401a      	ands	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a1a      	ldr	r2, [r3, #32]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f003 031f 	and.w	r3, r3, #31
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	fa01 f303 	lsl.w	r3, r1, r3
 80051a8:	431a      	orrs	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	621a      	str	r2, [r3, #32]
}
 80051ae:	bf00      	nop
 80051b0:	371c      	adds	r7, #28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
	...

080051bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e05a      	b.n	800528a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a21      	ldr	r2, [pc, #132]	@ (8005298 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d022      	beq.n	800525e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005220:	d01d      	beq.n	800525e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a1d      	ldr	r2, [pc, #116]	@ (800529c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d018      	beq.n	800525e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a1b      	ldr	r2, [pc, #108]	@ (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d013      	beq.n	800525e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a1a      	ldr	r2, [pc, #104]	@ (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00e      	beq.n	800525e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a18      	ldr	r2, [pc, #96]	@ (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d009      	beq.n	800525e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a17      	ldr	r2, [pc, #92]	@ (80052ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d004      	beq.n	800525e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a15      	ldr	r2, [pc, #84]	@ (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d10c      	bne.n	8005278 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005264:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	4313      	orrs	r3, r2
 800526e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40010000 	.word	0x40010000
 800529c:	40000400 	.word	0x40000400
 80052a0:	40000800 	.word	0x40000800
 80052a4:	40000c00 	.word	0x40000c00
 80052a8:	40010400 	.word	0x40010400
 80052ac:	40014000 	.word	0x40014000
 80052b0:	40001800 	.word	0x40001800

080052b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <__cvt>:
 80052dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052e0:	ec57 6b10 	vmov	r6, r7, d0
 80052e4:	2f00      	cmp	r7, #0
 80052e6:	460c      	mov	r4, r1
 80052e8:	4619      	mov	r1, r3
 80052ea:	463b      	mov	r3, r7
 80052ec:	bfbb      	ittet	lt
 80052ee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80052f2:	461f      	movlt	r7, r3
 80052f4:	2300      	movge	r3, #0
 80052f6:	232d      	movlt	r3, #45	@ 0x2d
 80052f8:	700b      	strb	r3, [r1, #0]
 80052fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005300:	4691      	mov	r9, r2
 8005302:	f023 0820 	bic.w	r8, r3, #32
 8005306:	bfbc      	itt	lt
 8005308:	4632      	movlt	r2, r6
 800530a:	4616      	movlt	r6, r2
 800530c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005310:	d005      	beq.n	800531e <__cvt+0x42>
 8005312:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005316:	d100      	bne.n	800531a <__cvt+0x3e>
 8005318:	3401      	adds	r4, #1
 800531a:	2102      	movs	r1, #2
 800531c:	e000      	b.n	8005320 <__cvt+0x44>
 800531e:	2103      	movs	r1, #3
 8005320:	ab03      	add	r3, sp, #12
 8005322:	9301      	str	r3, [sp, #4]
 8005324:	ab02      	add	r3, sp, #8
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	ec47 6b10 	vmov	d0, r6, r7
 800532c:	4653      	mov	r3, sl
 800532e:	4622      	mov	r2, r4
 8005330:	f000 fe6e 	bl	8006010 <_dtoa_r>
 8005334:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005338:	4605      	mov	r5, r0
 800533a:	d119      	bne.n	8005370 <__cvt+0x94>
 800533c:	f019 0f01 	tst.w	r9, #1
 8005340:	d00e      	beq.n	8005360 <__cvt+0x84>
 8005342:	eb00 0904 	add.w	r9, r0, r4
 8005346:	2200      	movs	r2, #0
 8005348:	2300      	movs	r3, #0
 800534a:	4630      	mov	r0, r6
 800534c:	4639      	mov	r1, r7
 800534e:	f7fb fbdb 	bl	8000b08 <__aeabi_dcmpeq>
 8005352:	b108      	cbz	r0, 8005358 <__cvt+0x7c>
 8005354:	f8cd 900c 	str.w	r9, [sp, #12]
 8005358:	2230      	movs	r2, #48	@ 0x30
 800535a:	9b03      	ldr	r3, [sp, #12]
 800535c:	454b      	cmp	r3, r9
 800535e:	d31e      	bcc.n	800539e <__cvt+0xc2>
 8005360:	9b03      	ldr	r3, [sp, #12]
 8005362:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005364:	1b5b      	subs	r3, r3, r5
 8005366:	4628      	mov	r0, r5
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	b004      	add	sp, #16
 800536c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005370:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005374:	eb00 0904 	add.w	r9, r0, r4
 8005378:	d1e5      	bne.n	8005346 <__cvt+0x6a>
 800537a:	7803      	ldrb	r3, [r0, #0]
 800537c:	2b30      	cmp	r3, #48	@ 0x30
 800537e:	d10a      	bne.n	8005396 <__cvt+0xba>
 8005380:	2200      	movs	r2, #0
 8005382:	2300      	movs	r3, #0
 8005384:	4630      	mov	r0, r6
 8005386:	4639      	mov	r1, r7
 8005388:	f7fb fbbe 	bl	8000b08 <__aeabi_dcmpeq>
 800538c:	b918      	cbnz	r0, 8005396 <__cvt+0xba>
 800538e:	f1c4 0401 	rsb	r4, r4, #1
 8005392:	f8ca 4000 	str.w	r4, [sl]
 8005396:	f8da 3000 	ldr.w	r3, [sl]
 800539a:	4499      	add	r9, r3
 800539c:	e7d3      	b.n	8005346 <__cvt+0x6a>
 800539e:	1c59      	adds	r1, r3, #1
 80053a0:	9103      	str	r1, [sp, #12]
 80053a2:	701a      	strb	r2, [r3, #0]
 80053a4:	e7d9      	b.n	800535a <__cvt+0x7e>

080053a6 <__exponent>:
 80053a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053a8:	2900      	cmp	r1, #0
 80053aa:	bfba      	itte	lt
 80053ac:	4249      	neglt	r1, r1
 80053ae:	232d      	movlt	r3, #45	@ 0x2d
 80053b0:	232b      	movge	r3, #43	@ 0x2b
 80053b2:	2909      	cmp	r1, #9
 80053b4:	7002      	strb	r2, [r0, #0]
 80053b6:	7043      	strb	r3, [r0, #1]
 80053b8:	dd29      	ble.n	800540e <__exponent+0x68>
 80053ba:	f10d 0307 	add.w	r3, sp, #7
 80053be:	461d      	mov	r5, r3
 80053c0:	270a      	movs	r7, #10
 80053c2:	461a      	mov	r2, r3
 80053c4:	fbb1 f6f7 	udiv	r6, r1, r7
 80053c8:	fb07 1416 	mls	r4, r7, r6, r1
 80053cc:	3430      	adds	r4, #48	@ 0x30
 80053ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 80053d2:	460c      	mov	r4, r1
 80053d4:	2c63      	cmp	r4, #99	@ 0x63
 80053d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80053da:	4631      	mov	r1, r6
 80053dc:	dcf1      	bgt.n	80053c2 <__exponent+0x1c>
 80053de:	3130      	adds	r1, #48	@ 0x30
 80053e0:	1e94      	subs	r4, r2, #2
 80053e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80053e6:	1c41      	adds	r1, r0, #1
 80053e8:	4623      	mov	r3, r4
 80053ea:	42ab      	cmp	r3, r5
 80053ec:	d30a      	bcc.n	8005404 <__exponent+0x5e>
 80053ee:	f10d 0309 	add.w	r3, sp, #9
 80053f2:	1a9b      	subs	r3, r3, r2
 80053f4:	42ac      	cmp	r4, r5
 80053f6:	bf88      	it	hi
 80053f8:	2300      	movhi	r3, #0
 80053fa:	3302      	adds	r3, #2
 80053fc:	4403      	add	r3, r0
 80053fe:	1a18      	subs	r0, r3, r0
 8005400:	b003      	add	sp, #12
 8005402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005404:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005408:	f801 6f01 	strb.w	r6, [r1, #1]!
 800540c:	e7ed      	b.n	80053ea <__exponent+0x44>
 800540e:	2330      	movs	r3, #48	@ 0x30
 8005410:	3130      	adds	r1, #48	@ 0x30
 8005412:	7083      	strb	r3, [r0, #2]
 8005414:	70c1      	strb	r1, [r0, #3]
 8005416:	1d03      	adds	r3, r0, #4
 8005418:	e7f1      	b.n	80053fe <__exponent+0x58>
	...

0800541c <_printf_float>:
 800541c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005420:	b08d      	sub	sp, #52	@ 0x34
 8005422:	460c      	mov	r4, r1
 8005424:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005428:	4616      	mov	r6, r2
 800542a:	461f      	mov	r7, r3
 800542c:	4605      	mov	r5, r0
 800542e:	f000 fcef 	bl	8005e10 <_localeconv_r>
 8005432:	6803      	ldr	r3, [r0, #0]
 8005434:	9304      	str	r3, [sp, #16]
 8005436:	4618      	mov	r0, r3
 8005438:	f7fa ff3a 	bl	80002b0 <strlen>
 800543c:	2300      	movs	r3, #0
 800543e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005440:	f8d8 3000 	ldr.w	r3, [r8]
 8005444:	9005      	str	r0, [sp, #20]
 8005446:	3307      	adds	r3, #7
 8005448:	f023 0307 	bic.w	r3, r3, #7
 800544c:	f103 0208 	add.w	r2, r3, #8
 8005450:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005454:	f8d4 b000 	ldr.w	fp, [r4]
 8005458:	f8c8 2000 	str.w	r2, [r8]
 800545c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005460:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005464:	9307      	str	r3, [sp, #28]
 8005466:	f8cd 8018 	str.w	r8, [sp, #24]
 800546a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800546e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005472:	4b9c      	ldr	r3, [pc, #624]	@ (80056e4 <_printf_float+0x2c8>)
 8005474:	f04f 32ff 	mov.w	r2, #4294967295
 8005478:	f7fb fb78 	bl	8000b6c <__aeabi_dcmpun>
 800547c:	bb70      	cbnz	r0, 80054dc <_printf_float+0xc0>
 800547e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005482:	4b98      	ldr	r3, [pc, #608]	@ (80056e4 <_printf_float+0x2c8>)
 8005484:	f04f 32ff 	mov.w	r2, #4294967295
 8005488:	f7fb fb52 	bl	8000b30 <__aeabi_dcmple>
 800548c:	bb30      	cbnz	r0, 80054dc <_printf_float+0xc0>
 800548e:	2200      	movs	r2, #0
 8005490:	2300      	movs	r3, #0
 8005492:	4640      	mov	r0, r8
 8005494:	4649      	mov	r1, r9
 8005496:	f7fb fb41 	bl	8000b1c <__aeabi_dcmplt>
 800549a:	b110      	cbz	r0, 80054a2 <_printf_float+0x86>
 800549c:	232d      	movs	r3, #45	@ 0x2d
 800549e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054a2:	4a91      	ldr	r2, [pc, #580]	@ (80056e8 <_printf_float+0x2cc>)
 80054a4:	4b91      	ldr	r3, [pc, #580]	@ (80056ec <_printf_float+0x2d0>)
 80054a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80054aa:	bf8c      	ite	hi
 80054ac:	4690      	movhi	r8, r2
 80054ae:	4698      	movls	r8, r3
 80054b0:	2303      	movs	r3, #3
 80054b2:	6123      	str	r3, [r4, #16]
 80054b4:	f02b 0304 	bic.w	r3, fp, #4
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	f04f 0900 	mov.w	r9, #0
 80054be:	9700      	str	r7, [sp, #0]
 80054c0:	4633      	mov	r3, r6
 80054c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80054c4:	4621      	mov	r1, r4
 80054c6:	4628      	mov	r0, r5
 80054c8:	f000 f9d2 	bl	8005870 <_printf_common>
 80054cc:	3001      	adds	r0, #1
 80054ce:	f040 808d 	bne.w	80055ec <_printf_float+0x1d0>
 80054d2:	f04f 30ff 	mov.w	r0, #4294967295
 80054d6:	b00d      	add	sp, #52	@ 0x34
 80054d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054dc:	4642      	mov	r2, r8
 80054de:	464b      	mov	r3, r9
 80054e0:	4640      	mov	r0, r8
 80054e2:	4649      	mov	r1, r9
 80054e4:	f7fb fb42 	bl	8000b6c <__aeabi_dcmpun>
 80054e8:	b140      	cbz	r0, 80054fc <_printf_float+0xe0>
 80054ea:	464b      	mov	r3, r9
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	bfbc      	itt	lt
 80054f0:	232d      	movlt	r3, #45	@ 0x2d
 80054f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80054f6:	4a7e      	ldr	r2, [pc, #504]	@ (80056f0 <_printf_float+0x2d4>)
 80054f8:	4b7e      	ldr	r3, [pc, #504]	@ (80056f4 <_printf_float+0x2d8>)
 80054fa:	e7d4      	b.n	80054a6 <_printf_float+0x8a>
 80054fc:	6863      	ldr	r3, [r4, #4]
 80054fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005502:	9206      	str	r2, [sp, #24]
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	d13b      	bne.n	8005580 <_printf_float+0x164>
 8005508:	2306      	movs	r3, #6
 800550a:	6063      	str	r3, [r4, #4]
 800550c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005510:	2300      	movs	r3, #0
 8005512:	6022      	str	r2, [r4, #0]
 8005514:	9303      	str	r3, [sp, #12]
 8005516:	ab0a      	add	r3, sp, #40	@ 0x28
 8005518:	e9cd a301 	strd	sl, r3, [sp, #4]
 800551c:	ab09      	add	r3, sp, #36	@ 0x24
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	6861      	ldr	r1, [r4, #4]
 8005522:	ec49 8b10 	vmov	d0, r8, r9
 8005526:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800552a:	4628      	mov	r0, r5
 800552c:	f7ff fed6 	bl	80052dc <__cvt>
 8005530:	9b06      	ldr	r3, [sp, #24]
 8005532:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005534:	2b47      	cmp	r3, #71	@ 0x47
 8005536:	4680      	mov	r8, r0
 8005538:	d129      	bne.n	800558e <_printf_float+0x172>
 800553a:	1cc8      	adds	r0, r1, #3
 800553c:	db02      	blt.n	8005544 <_printf_float+0x128>
 800553e:	6863      	ldr	r3, [r4, #4]
 8005540:	4299      	cmp	r1, r3
 8005542:	dd41      	ble.n	80055c8 <_printf_float+0x1ac>
 8005544:	f1aa 0a02 	sub.w	sl, sl, #2
 8005548:	fa5f fa8a 	uxtb.w	sl, sl
 800554c:	3901      	subs	r1, #1
 800554e:	4652      	mov	r2, sl
 8005550:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005554:	9109      	str	r1, [sp, #36]	@ 0x24
 8005556:	f7ff ff26 	bl	80053a6 <__exponent>
 800555a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800555c:	1813      	adds	r3, r2, r0
 800555e:	2a01      	cmp	r2, #1
 8005560:	4681      	mov	r9, r0
 8005562:	6123      	str	r3, [r4, #16]
 8005564:	dc02      	bgt.n	800556c <_printf_float+0x150>
 8005566:	6822      	ldr	r2, [r4, #0]
 8005568:	07d2      	lsls	r2, r2, #31
 800556a:	d501      	bpl.n	8005570 <_printf_float+0x154>
 800556c:	3301      	adds	r3, #1
 800556e:	6123      	str	r3, [r4, #16]
 8005570:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0a2      	beq.n	80054be <_printf_float+0xa2>
 8005578:	232d      	movs	r3, #45	@ 0x2d
 800557a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800557e:	e79e      	b.n	80054be <_printf_float+0xa2>
 8005580:	9a06      	ldr	r2, [sp, #24]
 8005582:	2a47      	cmp	r2, #71	@ 0x47
 8005584:	d1c2      	bne.n	800550c <_printf_float+0xf0>
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1c0      	bne.n	800550c <_printf_float+0xf0>
 800558a:	2301      	movs	r3, #1
 800558c:	e7bd      	b.n	800550a <_printf_float+0xee>
 800558e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005592:	d9db      	bls.n	800554c <_printf_float+0x130>
 8005594:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005598:	d118      	bne.n	80055cc <_printf_float+0x1b0>
 800559a:	2900      	cmp	r1, #0
 800559c:	6863      	ldr	r3, [r4, #4]
 800559e:	dd0b      	ble.n	80055b8 <_printf_float+0x19c>
 80055a0:	6121      	str	r1, [r4, #16]
 80055a2:	b913      	cbnz	r3, 80055aa <_printf_float+0x18e>
 80055a4:	6822      	ldr	r2, [r4, #0]
 80055a6:	07d0      	lsls	r0, r2, #31
 80055a8:	d502      	bpl.n	80055b0 <_printf_float+0x194>
 80055aa:	3301      	adds	r3, #1
 80055ac:	440b      	add	r3, r1
 80055ae:	6123      	str	r3, [r4, #16]
 80055b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80055b2:	f04f 0900 	mov.w	r9, #0
 80055b6:	e7db      	b.n	8005570 <_printf_float+0x154>
 80055b8:	b913      	cbnz	r3, 80055c0 <_printf_float+0x1a4>
 80055ba:	6822      	ldr	r2, [r4, #0]
 80055bc:	07d2      	lsls	r2, r2, #31
 80055be:	d501      	bpl.n	80055c4 <_printf_float+0x1a8>
 80055c0:	3302      	adds	r3, #2
 80055c2:	e7f4      	b.n	80055ae <_printf_float+0x192>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e7f2      	b.n	80055ae <_printf_float+0x192>
 80055c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80055cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055ce:	4299      	cmp	r1, r3
 80055d0:	db05      	blt.n	80055de <_printf_float+0x1c2>
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	6121      	str	r1, [r4, #16]
 80055d6:	07d8      	lsls	r0, r3, #31
 80055d8:	d5ea      	bpl.n	80055b0 <_printf_float+0x194>
 80055da:	1c4b      	adds	r3, r1, #1
 80055dc:	e7e7      	b.n	80055ae <_printf_float+0x192>
 80055de:	2900      	cmp	r1, #0
 80055e0:	bfd4      	ite	le
 80055e2:	f1c1 0202 	rsble	r2, r1, #2
 80055e6:	2201      	movgt	r2, #1
 80055e8:	4413      	add	r3, r2
 80055ea:	e7e0      	b.n	80055ae <_printf_float+0x192>
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	055a      	lsls	r2, r3, #21
 80055f0:	d407      	bmi.n	8005602 <_printf_float+0x1e6>
 80055f2:	6923      	ldr	r3, [r4, #16]
 80055f4:	4642      	mov	r2, r8
 80055f6:	4631      	mov	r1, r6
 80055f8:	4628      	mov	r0, r5
 80055fa:	47b8      	blx	r7
 80055fc:	3001      	adds	r0, #1
 80055fe:	d12b      	bne.n	8005658 <_printf_float+0x23c>
 8005600:	e767      	b.n	80054d2 <_printf_float+0xb6>
 8005602:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005606:	f240 80dd 	bls.w	80057c4 <_printf_float+0x3a8>
 800560a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800560e:	2200      	movs	r2, #0
 8005610:	2300      	movs	r3, #0
 8005612:	f7fb fa79 	bl	8000b08 <__aeabi_dcmpeq>
 8005616:	2800      	cmp	r0, #0
 8005618:	d033      	beq.n	8005682 <_printf_float+0x266>
 800561a:	4a37      	ldr	r2, [pc, #220]	@ (80056f8 <_printf_float+0x2dc>)
 800561c:	2301      	movs	r3, #1
 800561e:	4631      	mov	r1, r6
 8005620:	4628      	mov	r0, r5
 8005622:	47b8      	blx	r7
 8005624:	3001      	adds	r0, #1
 8005626:	f43f af54 	beq.w	80054d2 <_printf_float+0xb6>
 800562a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800562e:	4543      	cmp	r3, r8
 8005630:	db02      	blt.n	8005638 <_printf_float+0x21c>
 8005632:	6823      	ldr	r3, [r4, #0]
 8005634:	07d8      	lsls	r0, r3, #31
 8005636:	d50f      	bpl.n	8005658 <_printf_float+0x23c>
 8005638:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800563c:	4631      	mov	r1, r6
 800563e:	4628      	mov	r0, r5
 8005640:	47b8      	blx	r7
 8005642:	3001      	adds	r0, #1
 8005644:	f43f af45 	beq.w	80054d2 <_printf_float+0xb6>
 8005648:	f04f 0900 	mov.w	r9, #0
 800564c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005650:	f104 0a1a 	add.w	sl, r4, #26
 8005654:	45c8      	cmp	r8, r9
 8005656:	dc09      	bgt.n	800566c <_printf_float+0x250>
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	079b      	lsls	r3, r3, #30
 800565c:	f100 8103 	bmi.w	8005866 <_printf_float+0x44a>
 8005660:	68e0      	ldr	r0, [r4, #12]
 8005662:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005664:	4298      	cmp	r0, r3
 8005666:	bfb8      	it	lt
 8005668:	4618      	movlt	r0, r3
 800566a:	e734      	b.n	80054d6 <_printf_float+0xba>
 800566c:	2301      	movs	r3, #1
 800566e:	4652      	mov	r2, sl
 8005670:	4631      	mov	r1, r6
 8005672:	4628      	mov	r0, r5
 8005674:	47b8      	blx	r7
 8005676:	3001      	adds	r0, #1
 8005678:	f43f af2b 	beq.w	80054d2 <_printf_float+0xb6>
 800567c:	f109 0901 	add.w	r9, r9, #1
 8005680:	e7e8      	b.n	8005654 <_printf_float+0x238>
 8005682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005684:	2b00      	cmp	r3, #0
 8005686:	dc39      	bgt.n	80056fc <_printf_float+0x2e0>
 8005688:	4a1b      	ldr	r2, [pc, #108]	@ (80056f8 <_printf_float+0x2dc>)
 800568a:	2301      	movs	r3, #1
 800568c:	4631      	mov	r1, r6
 800568e:	4628      	mov	r0, r5
 8005690:	47b8      	blx	r7
 8005692:	3001      	adds	r0, #1
 8005694:	f43f af1d 	beq.w	80054d2 <_printf_float+0xb6>
 8005698:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800569c:	ea59 0303 	orrs.w	r3, r9, r3
 80056a0:	d102      	bne.n	80056a8 <_printf_float+0x28c>
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	07d9      	lsls	r1, r3, #31
 80056a6:	d5d7      	bpl.n	8005658 <_printf_float+0x23c>
 80056a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056ac:	4631      	mov	r1, r6
 80056ae:	4628      	mov	r0, r5
 80056b0:	47b8      	blx	r7
 80056b2:	3001      	adds	r0, #1
 80056b4:	f43f af0d 	beq.w	80054d2 <_printf_float+0xb6>
 80056b8:	f04f 0a00 	mov.w	sl, #0
 80056bc:	f104 0b1a 	add.w	fp, r4, #26
 80056c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056c2:	425b      	negs	r3, r3
 80056c4:	4553      	cmp	r3, sl
 80056c6:	dc01      	bgt.n	80056cc <_printf_float+0x2b0>
 80056c8:	464b      	mov	r3, r9
 80056ca:	e793      	b.n	80055f4 <_printf_float+0x1d8>
 80056cc:	2301      	movs	r3, #1
 80056ce:	465a      	mov	r2, fp
 80056d0:	4631      	mov	r1, r6
 80056d2:	4628      	mov	r0, r5
 80056d4:	47b8      	blx	r7
 80056d6:	3001      	adds	r0, #1
 80056d8:	f43f aefb 	beq.w	80054d2 <_printf_float+0xb6>
 80056dc:	f10a 0a01 	add.w	sl, sl, #1
 80056e0:	e7ee      	b.n	80056c0 <_printf_float+0x2a4>
 80056e2:	bf00      	nop
 80056e4:	7fefffff 	.word	0x7fefffff
 80056e8:	08008d40 	.word	0x08008d40
 80056ec:	08008d3c 	.word	0x08008d3c
 80056f0:	08008d48 	.word	0x08008d48
 80056f4:	08008d44 	.word	0x08008d44
 80056f8:	08008d4c 	.word	0x08008d4c
 80056fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005702:	4553      	cmp	r3, sl
 8005704:	bfa8      	it	ge
 8005706:	4653      	movge	r3, sl
 8005708:	2b00      	cmp	r3, #0
 800570a:	4699      	mov	r9, r3
 800570c:	dc36      	bgt.n	800577c <_printf_float+0x360>
 800570e:	f04f 0b00 	mov.w	fp, #0
 8005712:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005716:	f104 021a 	add.w	r2, r4, #26
 800571a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800571c:	9306      	str	r3, [sp, #24]
 800571e:	eba3 0309 	sub.w	r3, r3, r9
 8005722:	455b      	cmp	r3, fp
 8005724:	dc31      	bgt.n	800578a <_printf_float+0x36e>
 8005726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005728:	459a      	cmp	sl, r3
 800572a:	dc3a      	bgt.n	80057a2 <_printf_float+0x386>
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	07da      	lsls	r2, r3, #31
 8005730:	d437      	bmi.n	80057a2 <_printf_float+0x386>
 8005732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005734:	ebaa 0903 	sub.w	r9, sl, r3
 8005738:	9b06      	ldr	r3, [sp, #24]
 800573a:	ebaa 0303 	sub.w	r3, sl, r3
 800573e:	4599      	cmp	r9, r3
 8005740:	bfa8      	it	ge
 8005742:	4699      	movge	r9, r3
 8005744:	f1b9 0f00 	cmp.w	r9, #0
 8005748:	dc33      	bgt.n	80057b2 <_printf_float+0x396>
 800574a:	f04f 0800 	mov.w	r8, #0
 800574e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005752:	f104 0b1a 	add.w	fp, r4, #26
 8005756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005758:	ebaa 0303 	sub.w	r3, sl, r3
 800575c:	eba3 0309 	sub.w	r3, r3, r9
 8005760:	4543      	cmp	r3, r8
 8005762:	f77f af79 	ble.w	8005658 <_printf_float+0x23c>
 8005766:	2301      	movs	r3, #1
 8005768:	465a      	mov	r2, fp
 800576a:	4631      	mov	r1, r6
 800576c:	4628      	mov	r0, r5
 800576e:	47b8      	blx	r7
 8005770:	3001      	adds	r0, #1
 8005772:	f43f aeae 	beq.w	80054d2 <_printf_float+0xb6>
 8005776:	f108 0801 	add.w	r8, r8, #1
 800577a:	e7ec      	b.n	8005756 <_printf_float+0x33a>
 800577c:	4642      	mov	r2, r8
 800577e:	4631      	mov	r1, r6
 8005780:	4628      	mov	r0, r5
 8005782:	47b8      	blx	r7
 8005784:	3001      	adds	r0, #1
 8005786:	d1c2      	bne.n	800570e <_printf_float+0x2f2>
 8005788:	e6a3      	b.n	80054d2 <_printf_float+0xb6>
 800578a:	2301      	movs	r3, #1
 800578c:	4631      	mov	r1, r6
 800578e:	4628      	mov	r0, r5
 8005790:	9206      	str	r2, [sp, #24]
 8005792:	47b8      	blx	r7
 8005794:	3001      	adds	r0, #1
 8005796:	f43f ae9c 	beq.w	80054d2 <_printf_float+0xb6>
 800579a:	9a06      	ldr	r2, [sp, #24]
 800579c:	f10b 0b01 	add.w	fp, fp, #1
 80057a0:	e7bb      	b.n	800571a <_printf_float+0x2fe>
 80057a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057a6:	4631      	mov	r1, r6
 80057a8:	4628      	mov	r0, r5
 80057aa:	47b8      	blx	r7
 80057ac:	3001      	adds	r0, #1
 80057ae:	d1c0      	bne.n	8005732 <_printf_float+0x316>
 80057b0:	e68f      	b.n	80054d2 <_printf_float+0xb6>
 80057b2:	9a06      	ldr	r2, [sp, #24]
 80057b4:	464b      	mov	r3, r9
 80057b6:	4442      	add	r2, r8
 80057b8:	4631      	mov	r1, r6
 80057ba:	4628      	mov	r0, r5
 80057bc:	47b8      	blx	r7
 80057be:	3001      	adds	r0, #1
 80057c0:	d1c3      	bne.n	800574a <_printf_float+0x32e>
 80057c2:	e686      	b.n	80054d2 <_printf_float+0xb6>
 80057c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80057c8:	f1ba 0f01 	cmp.w	sl, #1
 80057cc:	dc01      	bgt.n	80057d2 <_printf_float+0x3b6>
 80057ce:	07db      	lsls	r3, r3, #31
 80057d0:	d536      	bpl.n	8005840 <_printf_float+0x424>
 80057d2:	2301      	movs	r3, #1
 80057d4:	4642      	mov	r2, r8
 80057d6:	4631      	mov	r1, r6
 80057d8:	4628      	mov	r0, r5
 80057da:	47b8      	blx	r7
 80057dc:	3001      	adds	r0, #1
 80057de:	f43f ae78 	beq.w	80054d2 <_printf_float+0xb6>
 80057e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057e6:	4631      	mov	r1, r6
 80057e8:	4628      	mov	r0, r5
 80057ea:	47b8      	blx	r7
 80057ec:	3001      	adds	r0, #1
 80057ee:	f43f ae70 	beq.w	80054d2 <_printf_float+0xb6>
 80057f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057f6:	2200      	movs	r2, #0
 80057f8:	2300      	movs	r3, #0
 80057fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057fe:	f7fb f983 	bl	8000b08 <__aeabi_dcmpeq>
 8005802:	b9c0      	cbnz	r0, 8005836 <_printf_float+0x41a>
 8005804:	4653      	mov	r3, sl
 8005806:	f108 0201 	add.w	r2, r8, #1
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	47b8      	blx	r7
 8005810:	3001      	adds	r0, #1
 8005812:	d10c      	bne.n	800582e <_printf_float+0x412>
 8005814:	e65d      	b.n	80054d2 <_printf_float+0xb6>
 8005816:	2301      	movs	r3, #1
 8005818:	465a      	mov	r2, fp
 800581a:	4631      	mov	r1, r6
 800581c:	4628      	mov	r0, r5
 800581e:	47b8      	blx	r7
 8005820:	3001      	adds	r0, #1
 8005822:	f43f ae56 	beq.w	80054d2 <_printf_float+0xb6>
 8005826:	f108 0801 	add.w	r8, r8, #1
 800582a:	45d0      	cmp	r8, sl
 800582c:	dbf3      	blt.n	8005816 <_printf_float+0x3fa>
 800582e:	464b      	mov	r3, r9
 8005830:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005834:	e6df      	b.n	80055f6 <_printf_float+0x1da>
 8005836:	f04f 0800 	mov.w	r8, #0
 800583a:	f104 0b1a 	add.w	fp, r4, #26
 800583e:	e7f4      	b.n	800582a <_printf_float+0x40e>
 8005840:	2301      	movs	r3, #1
 8005842:	4642      	mov	r2, r8
 8005844:	e7e1      	b.n	800580a <_printf_float+0x3ee>
 8005846:	2301      	movs	r3, #1
 8005848:	464a      	mov	r2, r9
 800584a:	4631      	mov	r1, r6
 800584c:	4628      	mov	r0, r5
 800584e:	47b8      	blx	r7
 8005850:	3001      	adds	r0, #1
 8005852:	f43f ae3e 	beq.w	80054d2 <_printf_float+0xb6>
 8005856:	f108 0801 	add.w	r8, r8, #1
 800585a:	68e3      	ldr	r3, [r4, #12]
 800585c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800585e:	1a5b      	subs	r3, r3, r1
 8005860:	4543      	cmp	r3, r8
 8005862:	dcf0      	bgt.n	8005846 <_printf_float+0x42a>
 8005864:	e6fc      	b.n	8005660 <_printf_float+0x244>
 8005866:	f04f 0800 	mov.w	r8, #0
 800586a:	f104 0919 	add.w	r9, r4, #25
 800586e:	e7f4      	b.n	800585a <_printf_float+0x43e>

08005870 <_printf_common>:
 8005870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005874:	4616      	mov	r6, r2
 8005876:	4698      	mov	r8, r3
 8005878:	688a      	ldr	r2, [r1, #8]
 800587a:	690b      	ldr	r3, [r1, #16]
 800587c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005880:	4293      	cmp	r3, r2
 8005882:	bfb8      	it	lt
 8005884:	4613      	movlt	r3, r2
 8005886:	6033      	str	r3, [r6, #0]
 8005888:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800588c:	4607      	mov	r7, r0
 800588e:	460c      	mov	r4, r1
 8005890:	b10a      	cbz	r2, 8005896 <_printf_common+0x26>
 8005892:	3301      	adds	r3, #1
 8005894:	6033      	str	r3, [r6, #0]
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	0699      	lsls	r1, r3, #26
 800589a:	bf42      	ittt	mi
 800589c:	6833      	ldrmi	r3, [r6, #0]
 800589e:	3302      	addmi	r3, #2
 80058a0:	6033      	strmi	r3, [r6, #0]
 80058a2:	6825      	ldr	r5, [r4, #0]
 80058a4:	f015 0506 	ands.w	r5, r5, #6
 80058a8:	d106      	bne.n	80058b8 <_printf_common+0x48>
 80058aa:	f104 0a19 	add.w	sl, r4, #25
 80058ae:	68e3      	ldr	r3, [r4, #12]
 80058b0:	6832      	ldr	r2, [r6, #0]
 80058b2:	1a9b      	subs	r3, r3, r2
 80058b4:	42ab      	cmp	r3, r5
 80058b6:	dc26      	bgt.n	8005906 <_printf_common+0x96>
 80058b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058bc:	6822      	ldr	r2, [r4, #0]
 80058be:	3b00      	subs	r3, #0
 80058c0:	bf18      	it	ne
 80058c2:	2301      	movne	r3, #1
 80058c4:	0692      	lsls	r2, r2, #26
 80058c6:	d42b      	bmi.n	8005920 <_printf_common+0xb0>
 80058c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058cc:	4641      	mov	r1, r8
 80058ce:	4638      	mov	r0, r7
 80058d0:	47c8      	blx	r9
 80058d2:	3001      	adds	r0, #1
 80058d4:	d01e      	beq.n	8005914 <_printf_common+0xa4>
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	6922      	ldr	r2, [r4, #16]
 80058da:	f003 0306 	and.w	r3, r3, #6
 80058de:	2b04      	cmp	r3, #4
 80058e0:	bf02      	ittt	eq
 80058e2:	68e5      	ldreq	r5, [r4, #12]
 80058e4:	6833      	ldreq	r3, [r6, #0]
 80058e6:	1aed      	subeq	r5, r5, r3
 80058e8:	68a3      	ldr	r3, [r4, #8]
 80058ea:	bf0c      	ite	eq
 80058ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058f0:	2500      	movne	r5, #0
 80058f2:	4293      	cmp	r3, r2
 80058f4:	bfc4      	itt	gt
 80058f6:	1a9b      	subgt	r3, r3, r2
 80058f8:	18ed      	addgt	r5, r5, r3
 80058fa:	2600      	movs	r6, #0
 80058fc:	341a      	adds	r4, #26
 80058fe:	42b5      	cmp	r5, r6
 8005900:	d11a      	bne.n	8005938 <_printf_common+0xc8>
 8005902:	2000      	movs	r0, #0
 8005904:	e008      	b.n	8005918 <_printf_common+0xa8>
 8005906:	2301      	movs	r3, #1
 8005908:	4652      	mov	r2, sl
 800590a:	4641      	mov	r1, r8
 800590c:	4638      	mov	r0, r7
 800590e:	47c8      	blx	r9
 8005910:	3001      	adds	r0, #1
 8005912:	d103      	bne.n	800591c <_printf_common+0xac>
 8005914:	f04f 30ff 	mov.w	r0, #4294967295
 8005918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800591c:	3501      	adds	r5, #1
 800591e:	e7c6      	b.n	80058ae <_printf_common+0x3e>
 8005920:	18e1      	adds	r1, r4, r3
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	2030      	movs	r0, #48	@ 0x30
 8005926:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800592a:	4422      	add	r2, r4
 800592c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005930:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005934:	3302      	adds	r3, #2
 8005936:	e7c7      	b.n	80058c8 <_printf_common+0x58>
 8005938:	2301      	movs	r3, #1
 800593a:	4622      	mov	r2, r4
 800593c:	4641      	mov	r1, r8
 800593e:	4638      	mov	r0, r7
 8005940:	47c8      	blx	r9
 8005942:	3001      	adds	r0, #1
 8005944:	d0e6      	beq.n	8005914 <_printf_common+0xa4>
 8005946:	3601      	adds	r6, #1
 8005948:	e7d9      	b.n	80058fe <_printf_common+0x8e>
	...

0800594c <_printf_i>:
 800594c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005950:	7e0f      	ldrb	r7, [r1, #24]
 8005952:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005954:	2f78      	cmp	r7, #120	@ 0x78
 8005956:	4691      	mov	r9, r2
 8005958:	4680      	mov	r8, r0
 800595a:	460c      	mov	r4, r1
 800595c:	469a      	mov	sl, r3
 800595e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005962:	d807      	bhi.n	8005974 <_printf_i+0x28>
 8005964:	2f62      	cmp	r7, #98	@ 0x62
 8005966:	d80a      	bhi.n	800597e <_printf_i+0x32>
 8005968:	2f00      	cmp	r7, #0
 800596a:	f000 80d1 	beq.w	8005b10 <_printf_i+0x1c4>
 800596e:	2f58      	cmp	r7, #88	@ 0x58
 8005970:	f000 80b8 	beq.w	8005ae4 <_printf_i+0x198>
 8005974:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005978:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800597c:	e03a      	b.n	80059f4 <_printf_i+0xa8>
 800597e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005982:	2b15      	cmp	r3, #21
 8005984:	d8f6      	bhi.n	8005974 <_printf_i+0x28>
 8005986:	a101      	add	r1, pc, #4	@ (adr r1, 800598c <_printf_i+0x40>)
 8005988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800598c:	080059e5 	.word	0x080059e5
 8005990:	080059f9 	.word	0x080059f9
 8005994:	08005975 	.word	0x08005975
 8005998:	08005975 	.word	0x08005975
 800599c:	08005975 	.word	0x08005975
 80059a0:	08005975 	.word	0x08005975
 80059a4:	080059f9 	.word	0x080059f9
 80059a8:	08005975 	.word	0x08005975
 80059ac:	08005975 	.word	0x08005975
 80059b0:	08005975 	.word	0x08005975
 80059b4:	08005975 	.word	0x08005975
 80059b8:	08005af7 	.word	0x08005af7
 80059bc:	08005a23 	.word	0x08005a23
 80059c0:	08005ab1 	.word	0x08005ab1
 80059c4:	08005975 	.word	0x08005975
 80059c8:	08005975 	.word	0x08005975
 80059cc:	08005b19 	.word	0x08005b19
 80059d0:	08005975 	.word	0x08005975
 80059d4:	08005a23 	.word	0x08005a23
 80059d8:	08005975 	.word	0x08005975
 80059dc:	08005975 	.word	0x08005975
 80059e0:	08005ab9 	.word	0x08005ab9
 80059e4:	6833      	ldr	r3, [r6, #0]
 80059e6:	1d1a      	adds	r2, r3, #4
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6032      	str	r2, [r6, #0]
 80059ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059f4:	2301      	movs	r3, #1
 80059f6:	e09c      	b.n	8005b32 <_printf_i+0x1e6>
 80059f8:	6833      	ldr	r3, [r6, #0]
 80059fa:	6820      	ldr	r0, [r4, #0]
 80059fc:	1d19      	adds	r1, r3, #4
 80059fe:	6031      	str	r1, [r6, #0]
 8005a00:	0606      	lsls	r6, r0, #24
 8005a02:	d501      	bpl.n	8005a08 <_printf_i+0xbc>
 8005a04:	681d      	ldr	r5, [r3, #0]
 8005a06:	e003      	b.n	8005a10 <_printf_i+0xc4>
 8005a08:	0645      	lsls	r5, r0, #25
 8005a0a:	d5fb      	bpl.n	8005a04 <_printf_i+0xb8>
 8005a0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a10:	2d00      	cmp	r5, #0
 8005a12:	da03      	bge.n	8005a1c <_printf_i+0xd0>
 8005a14:	232d      	movs	r3, #45	@ 0x2d
 8005a16:	426d      	negs	r5, r5
 8005a18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a1c:	4858      	ldr	r0, [pc, #352]	@ (8005b80 <_printf_i+0x234>)
 8005a1e:	230a      	movs	r3, #10
 8005a20:	e011      	b.n	8005a46 <_printf_i+0xfa>
 8005a22:	6821      	ldr	r1, [r4, #0]
 8005a24:	6833      	ldr	r3, [r6, #0]
 8005a26:	0608      	lsls	r0, r1, #24
 8005a28:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a2c:	d402      	bmi.n	8005a34 <_printf_i+0xe8>
 8005a2e:	0649      	lsls	r1, r1, #25
 8005a30:	bf48      	it	mi
 8005a32:	b2ad      	uxthmi	r5, r5
 8005a34:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a36:	4852      	ldr	r0, [pc, #328]	@ (8005b80 <_printf_i+0x234>)
 8005a38:	6033      	str	r3, [r6, #0]
 8005a3a:	bf14      	ite	ne
 8005a3c:	230a      	movne	r3, #10
 8005a3e:	2308      	moveq	r3, #8
 8005a40:	2100      	movs	r1, #0
 8005a42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a46:	6866      	ldr	r6, [r4, #4]
 8005a48:	60a6      	str	r6, [r4, #8]
 8005a4a:	2e00      	cmp	r6, #0
 8005a4c:	db05      	blt.n	8005a5a <_printf_i+0x10e>
 8005a4e:	6821      	ldr	r1, [r4, #0]
 8005a50:	432e      	orrs	r6, r5
 8005a52:	f021 0104 	bic.w	r1, r1, #4
 8005a56:	6021      	str	r1, [r4, #0]
 8005a58:	d04b      	beq.n	8005af2 <_printf_i+0x1a6>
 8005a5a:	4616      	mov	r6, r2
 8005a5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a60:	fb03 5711 	mls	r7, r3, r1, r5
 8005a64:	5dc7      	ldrb	r7, [r0, r7]
 8005a66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a6a:	462f      	mov	r7, r5
 8005a6c:	42bb      	cmp	r3, r7
 8005a6e:	460d      	mov	r5, r1
 8005a70:	d9f4      	bls.n	8005a5c <_printf_i+0x110>
 8005a72:	2b08      	cmp	r3, #8
 8005a74:	d10b      	bne.n	8005a8e <_printf_i+0x142>
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	07df      	lsls	r7, r3, #31
 8005a7a:	d508      	bpl.n	8005a8e <_printf_i+0x142>
 8005a7c:	6923      	ldr	r3, [r4, #16]
 8005a7e:	6861      	ldr	r1, [r4, #4]
 8005a80:	4299      	cmp	r1, r3
 8005a82:	bfde      	ittt	le
 8005a84:	2330      	movle	r3, #48	@ 0x30
 8005a86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a8e:	1b92      	subs	r2, r2, r6
 8005a90:	6122      	str	r2, [r4, #16]
 8005a92:	f8cd a000 	str.w	sl, [sp]
 8005a96:	464b      	mov	r3, r9
 8005a98:	aa03      	add	r2, sp, #12
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	4640      	mov	r0, r8
 8005a9e:	f7ff fee7 	bl	8005870 <_printf_common>
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	d14a      	bne.n	8005b3c <_printf_i+0x1f0>
 8005aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8005aaa:	b004      	add	sp, #16
 8005aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	f043 0320 	orr.w	r3, r3, #32
 8005ab6:	6023      	str	r3, [r4, #0]
 8005ab8:	4832      	ldr	r0, [pc, #200]	@ (8005b84 <_printf_i+0x238>)
 8005aba:	2778      	movs	r7, #120	@ 0x78
 8005abc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	6831      	ldr	r1, [r6, #0]
 8005ac4:	061f      	lsls	r7, r3, #24
 8005ac6:	f851 5b04 	ldr.w	r5, [r1], #4
 8005aca:	d402      	bmi.n	8005ad2 <_printf_i+0x186>
 8005acc:	065f      	lsls	r7, r3, #25
 8005ace:	bf48      	it	mi
 8005ad0:	b2ad      	uxthmi	r5, r5
 8005ad2:	6031      	str	r1, [r6, #0]
 8005ad4:	07d9      	lsls	r1, r3, #31
 8005ad6:	bf44      	itt	mi
 8005ad8:	f043 0320 	orrmi.w	r3, r3, #32
 8005adc:	6023      	strmi	r3, [r4, #0]
 8005ade:	b11d      	cbz	r5, 8005ae8 <_printf_i+0x19c>
 8005ae0:	2310      	movs	r3, #16
 8005ae2:	e7ad      	b.n	8005a40 <_printf_i+0xf4>
 8005ae4:	4826      	ldr	r0, [pc, #152]	@ (8005b80 <_printf_i+0x234>)
 8005ae6:	e7e9      	b.n	8005abc <_printf_i+0x170>
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	f023 0320 	bic.w	r3, r3, #32
 8005aee:	6023      	str	r3, [r4, #0]
 8005af0:	e7f6      	b.n	8005ae0 <_printf_i+0x194>
 8005af2:	4616      	mov	r6, r2
 8005af4:	e7bd      	b.n	8005a72 <_printf_i+0x126>
 8005af6:	6833      	ldr	r3, [r6, #0]
 8005af8:	6825      	ldr	r5, [r4, #0]
 8005afa:	6961      	ldr	r1, [r4, #20]
 8005afc:	1d18      	adds	r0, r3, #4
 8005afe:	6030      	str	r0, [r6, #0]
 8005b00:	062e      	lsls	r6, r5, #24
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	d501      	bpl.n	8005b0a <_printf_i+0x1be>
 8005b06:	6019      	str	r1, [r3, #0]
 8005b08:	e002      	b.n	8005b10 <_printf_i+0x1c4>
 8005b0a:	0668      	lsls	r0, r5, #25
 8005b0c:	d5fb      	bpl.n	8005b06 <_printf_i+0x1ba>
 8005b0e:	8019      	strh	r1, [r3, #0]
 8005b10:	2300      	movs	r3, #0
 8005b12:	6123      	str	r3, [r4, #16]
 8005b14:	4616      	mov	r6, r2
 8005b16:	e7bc      	b.n	8005a92 <_printf_i+0x146>
 8005b18:	6833      	ldr	r3, [r6, #0]
 8005b1a:	1d1a      	adds	r2, r3, #4
 8005b1c:	6032      	str	r2, [r6, #0]
 8005b1e:	681e      	ldr	r6, [r3, #0]
 8005b20:	6862      	ldr	r2, [r4, #4]
 8005b22:	2100      	movs	r1, #0
 8005b24:	4630      	mov	r0, r6
 8005b26:	f7fa fb73 	bl	8000210 <memchr>
 8005b2a:	b108      	cbz	r0, 8005b30 <_printf_i+0x1e4>
 8005b2c:	1b80      	subs	r0, r0, r6
 8005b2e:	6060      	str	r0, [r4, #4]
 8005b30:	6863      	ldr	r3, [r4, #4]
 8005b32:	6123      	str	r3, [r4, #16]
 8005b34:	2300      	movs	r3, #0
 8005b36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b3a:	e7aa      	b.n	8005a92 <_printf_i+0x146>
 8005b3c:	6923      	ldr	r3, [r4, #16]
 8005b3e:	4632      	mov	r2, r6
 8005b40:	4649      	mov	r1, r9
 8005b42:	4640      	mov	r0, r8
 8005b44:	47d0      	blx	sl
 8005b46:	3001      	adds	r0, #1
 8005b48:	d0ad      	beq.n	8005aa6 <_printf_i+0x15a>
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	079b      	lsls	r3, r3, #30
 8005b4e:	d413      	bmi.n	8005b78 <_printf_i+0x22c>
 8005b50:	68e0      	ldr	r0, [r4, #12]
 8005b52:	9b03      	ldr	r3, [sp, #12]
 8005b54:	4298      	cmp	r0, r3
 8005b56:	bfb8      	it	lt
 8005b58:	4618      	movlt	r0, r3
 8005b5a:	e7a6      	b.n	8005aaa <_printf_i+0x15e>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	4632      	mov	r2, r6
 8005b60:	4649      	mov	r1, r9
 8005b62:	4640      	mov	r0, r8
 8005b64:	47d0      	blx	sl
 8005b66:	3001      	adds	r0, #1
 8005b68:	d09d      	beq.n	8005aa6 <_printf_i+0x15a>
 8005b6a:	3501      	adds	r5, #1
 8005b6c:	68e3      	ldr	r3, [r4, #12]
 8005b6e:	9903      	ldr	r1, [sp, #12]
 8005b70:	1a5b      	subs	r3, r3, r1
 8005b72:	42ab      	cmp	r3, r5
 8005b74:	dcf2      	bgt.n	8005b5c <_printf_i+0x210>
 8005b76:	e7eb      	b.n	8005b50 <_printf_i+0x204>
 8005b78:	2500      	movs	r5, #0
 8005b7a:	f104 0619 	add.w	r6, r4, #25
 8005b7e:	e7f5      	b.n	8005b6c <_printf_i+0x220>
 8005b80:	08008d4e 	.word	0x08008d4e
 8005b84:	08008d5f 	.word	0x08008d5f

08005b88 <std>:
 8005b88:	2300      	movs	r3, #0
 8005b8a:	b510      	push	{r4, lr}
 8005b8c:	4604      	mov	r4, r0
 8005b8e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b96:	6083      	str	r3, [r0, #8]
 8005b98:	8181      	strh	r1, [r0, #12]
 8005b9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b9c:	81c2      	strh	r2, [r0, #14]
 8005b9e:	6183      	str	r3, [r0, #24]
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	2208      	movs	r2, #8
 8005ba4:	305c      	adds	r0, #92	@ 0x5c
 8005ba6:	f000 f92a 	bl	8005dfe <memset>
 8005baa:	4b0d      	ldr	r3, [pc, #52]	@ (8005be0 <std+0x58>)
 8005bac:	6263      	str	r3, [r4, #36]	@ 0x24
 8005bae:	4b0d      	ldr	r3, [pc, #52]	@ (8005be4 <std+0x5c>)
 8005bb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005be8 <std+0x60>)
 8005bb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bec <std+0x64>)
 8005bb8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005bba:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf0 <std+0x68>)
 8005bbc:	6224      	str	r4, [r4, #32]
 8005bbe:	429c      	cmp	r4, r3
 8005bc0:	d006      	beq.n	8005bd0 <std+0x48>
 8005bc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005bc6:	4294      	cmp	r4, r2
 8005bc8:	d002      	beq.n	8005bd0 <std+0x48>
 8005bca:	33d0      	adds	r3, #208	@ 0xd0
 8005bcc:	429c      	cmp	r4, r3
 8005bce:	d105      	bne.n	8005bdc <std+0x54>
 8005bd0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bd8:	f000 b98e 	b.w	8005ef8 <__retarget_lock_init_recursive>
 8005bdc:	bd10      	pop	{r4, pc}
 8005bde:	bf00      	nop
 8005be0:	08005d79 	.word	0x08005d79
 8005be4:	08005d9b 	.word	0x08005d9b
 8005be8:	08005dd3 	.word	0x08005dd3
 8005bec:	08005df7 	.word	0x08005df7
 8005bf0:	2000075c 	.word	0x2000075c

08005bf4 <stdio_exit_handler>:
 8005bf4:	4a02      	ldr	r2, [pc, #8]	@ (8005c00 <stdio_exit_handler+0xc>)
 8005bf6:	4903      	ldr	r1, [pc, #12]	@ (8005c04 <stdio_exit_handler+0x10>)
 8005bf8:	4803      	ldr	r0, [pc, #12]	@ (8005c08 <stdio_exit_handler+0x14>)
 8005bfa:	f000 b869 	b.w	8005cd0 <_fwalk_sglue>
 8005bfe:	bf00      	nop
 8005c00:	2000001c 	.word	0x2000001c
 8005c04:	0800785d 	.word	0x0800785d
 8005c08:	2000002c 	.word	0x2000002c

08005c0c <cleanup_stdio>:
 8005c0c:	6841      	ldr	r1, [r0, #4]
 8005c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c40 <cleanup_stdio+0x34>)
 8005c10:	4299      	cmp	r1, r3
 8005c12:	b510      	push	{r4, lr}
 8005c14:	4604      	mov	r4, r0
 8005c16:	d001      	beq.n	8005c1c <cleanup_stdio+0x10>
 8005c18:	f001 fe20 	bl	800785c <_fflush_r>
 8005c1c:	68a1      	ldr	r1, [r4, #8]
 8005c1e:	4b09      	ldr	r3, [pc, #36]	@ (8005c44 <cleanup_stdio+0x38>)
 8005c20:	4299      	cmp	r1, r3
 8005c22:	d002      	beq.n	8005c2a <cleanup_stdio+0x1e>
 8005c24:	4620      	mov	r0, r4
 8005c26:	f001 fe19 	bl	800785c <_fflush_r>
 8005c2a:	68e1      	ldr	r1, [r4, #12]
 8005c2c:	4b06      	ldr	r3, [pc, #24]	@ (8005c48 <cleanup_stdio+0x3c>)
 8005c2e:	4299      	cmp	r1, r3
 8005c30:	d004      	beq.n	8005c3c <cleanup_stdio+0x30>
 8005c32:	4620      	mov	r0, r4
 8005c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c38:	f001 be10 	b.w	800785c <_fflush_r>
 8005c3c:	bd10      	pop	{r4, pc}
 8005c3e:	bf00      	nop
 8005c40:	2000075c 	.word	0x2000075c
 8005c44:	200007c4 	.word	0x200007c4
 8005c48:	2000082c 	.word	0x2000082c

08005c4c <global_stdio_init.part.0>:
 8005c4c:	b510      	push	{r4, lr}
 8005c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c7c <global_stdio_init.part.0+0x30>)
 8005c50:	4c0b      	ldr	r4, [pc, #44]	@ (8005c80 <global_stdio_init.part.0+0x34>)
 8005c52:	4a0c      	ldr	r2, [pc, #48]	@ (8005c84 <global_stdio_init.part.0+0x38>)
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	4620      	mov	r0, r4
 8005c58:	2200      	movs	r2, #0
 8005c5a:	2104      	movs	r1, #4
 8005c5c:	f7ff ff94 	bl	8005b88 <std>
 8005c60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c64:	2201      	movs	r2, #1
 8005c66:	2109      	movs	r1, #9
 8005c68:	f7ff ff8e 	bl	8005b88 <std>
 8005c6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c70:	2202      	movs	r2, #2
 8005c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c76:	2112      	movs	r1, #18
 8005c78:	f7ff bf86 	b.w	8005b88 <std>
 8005c7c:	20000894 	.word	0x20000894
 8005c80:	2000075c 	.word	0x2000075c
 8005c84:	08005bf5 	.word	0x08005bf5

08005c88 <__sfp_lock_acquire>:
 8005c88:	4801      	ldr	r0, [pc, #4]	@ (8005c90 <__sfp_lock_acquire+0x8>)
 8005c8a:	f000 b936 	b.w	8005efa <__retarget_lock_acquire_recursive>
 8005c8e:	bf00      	nop
 8005c90:	2000089d 	.word	0x2000089d

08005c94 <__sfp_lock_release>:
 8005c94:	4801      	ldr	r0, [pc, #4]	@ (8005c9c <__sfp_lock_release+0x8>)
 8005c96:	f000 b931 	b.w	8005efc <__retarget_lock_release_recursive>
 8005c9a:	bf00      	nop
 8005c9c:	2000089d 	.word	0x2000089d

08005ca0 <__sinit>:
 8005ca0:	b510      	push	{r4, lr}
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	f7ff fff0 	bl	8005c88 <__sfp_lock_acquire>
 8005ca8:	6a23      	ldr	r3, [r4, #32]
 8005caa:	b11b      	cbz	r3, 8005cb4 <__sinit+0x14>
 8005cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cb0:	f7ff bff0 	b.w	8005c94 <__sfp_lock_release>
 8005cb4:	4b04      	ldr	r3, [pc, #16]	@ (8005cc8 <__sinit+0x28>)
 8005cb6:	6223      	str	r3, [r4, #32]
 8005cb8:	4b04      	ldr	r3, [pc, #16]	@ (8005ccc <__sinit+0x2c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1f5      	bne.n	8005cac <__sinit+0xc>
 8005cc0:	f7ff ffc4 	bl	8005c4c <global_stdio_init.part.0>
 8005cc4:	e7f2      	b.n	8005cac <__sinit+0xc>
 8005cc6:	bf00      	nop
 8005cc8:	08005c0d 	.word	0x08005c0d
 8005ccc:	20000894 	.word	0x20000894

08005cd0 <_fwalk_sglue>:
 8005cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cd4:	4607      	mov	r7, r0
 8005cd6:	4688      	mov	r8, r1
 8005cd8:	4614      	mov	r4, r2
 8005cda:	2600      	movs	r6, #0
 8005cdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ce0:	f1b9 0901 	subs.w	r9, r9, #1
 8005ce4:	d505      	bpl.n	8005cf2 <_fwalk_sglue+0x22>
 8005ce6:	6824      	ldr	r4, [r4, #0]
 8005ce8:	2c00      	cmp	r4, #0
 8005cea:	d1f7      	bne.n	8005cdc <_fwalk_sglue+0xc>
 8005cec:	4630      	mov	r0, r6
 8005cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cf2:	89ab      	ldrh	r3, [r5, #12]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d907      	bls.n	8005d08 <_fwalk_sglue+0x38>
 8005cf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	d003      	beq.n	8005d08 <_fwalk_sglue+0x38>
 8005d00:	4629      	mov	r1, r5
 8005d02:	4638      	mov	r0, r7
 8005d04:	47c0      	blx	r8
 8005d06:	4306      	orrs	r6, r0
 8005d08:	3568      	adds	r5, #104	@ 0x68
 8005d0a:	e7e9      	b.n	8005ce0 <_fwalk_sglue+0x10>

08005d0c <sniprintf>:
 8005d0c:	b40c      	push	{r2, r3}
 8005d0e:	b530      	push	{r4, r5, lr}
 8005d10:	4b18      	ldr	r3, [pc, #96]	@ (8005d74 <sniprintf+0x68>)
 8005d12:	1e0c      	subs	r4, r1, #0
 8005d14:	681d      	ldr	r5, [r3, #0]
 8005d16:	b09d      	sub	sp, #116	@ 0x74
 8005d18:	da08      	bge.n	8005d2c <sniprintf+0x20>
 8005d1a:	238b      	movs	r3, #139	@ 0x8b
 8005d1c:	602b      	str	r3, [r5, #0]
 8005d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d22:	b01d      	add	sp, #116	@ 0x74
 8005d24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d28:	b002      	add	sp, #8
 8005d2a:	4770      	bx	lr
 8005d2c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005d30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005d34:	f04f 0300 	mov.w	r3, #0
 8005d38:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005d3a:	bf14      	ite	ne
 8005d3c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005d40:	4623      	moveq	r3, r4
 8005d42:	9304      	str	r3, [sp, #16]
 8005d44:	9307      	str	r3, [sp, #28]
 8005d46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005d4a:	9002      	str	r0, [sp, #8]
 8005d4c:	9006      	str	r0, [sp, #24]
 8005d4e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005d52:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005d54:	ab21      	add	r3, sp, #132	@ 0x84
 8005d56:	a902      	add	r1, sp, #8
 8005d58:	4628      	mov	r0, r5
 8005d5a:	9301      	str	r3, [sp, #4]
 8005d5c:	f001 fbfe 	bl	800755c <_svfiprintf_r>
 8005d60:	1c43      	adds	r3, r0, #1
 8005d62:	bfbc      	itt	lt
 8005d64:	238b      	movlt	r3, #139	@ 0x8b
 8005d66:	602b      	strlt	r3, [r5, #0]
 8005d68:	2c00      	cmp	r4, #0
 8005d6a:	d0da      	beq.n	8005d22 <sniprintf+0x16>
 8005d6c:	9b02      	ldr	r3, [sp, #8]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	e7d6      	b.n	8005d22 <sniprintf+0x16>
 8005d74:	20000028 	.word	0x20000028

08005d78 <__sread>:
 8005d78:	b510      	push	{r4, lr}
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d80:	f000 f86c 	bl	8005e5c <_read_r>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	bfab      	itete	ge
 8005d88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d8a:	89a3      	ldrhlt	r3, [r4, #12]
 8005d8c:	181b      	addge	r3, r3, r0
 8005d8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d92:	bfac      	ite	ge
 8005d94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d96:	81a3      	strhlt	r3, [r4, #12]
 8005d98:	bd10      	pop	{r4, pc}

08005d9a <__swrite>:
 8005d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d9e:	461f      	mov	r7, r3
 8005da0:	898b      	ldrh	r3, [r1, #12]
 8005da2:	05db      	lsls	r3, r3, #23
 8005da4:	4605      	mov	r5, r0
 8005da6:	460c      	mov	r4, r1
 8005da8:	4616      	mov	r6, r2
 8005daa:	d505      	bpl.n	8005db8 <__swrite+0x1e>
 8005dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db0:	2302      	movs	r3, #2
 8005db2:	2200      	movs	r2, #0
 8005db4:	f000 f840 	bl	8005e38 <_lseek_r>
 8005db8:	89a3      	ldrh	r3, [r4, #12]
 8005dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dc2:	81a3      	strh	r3, [r4, #12]
 8005dc4:	4632      	mov	r2, r6
 8005dc6:	463b      	mov	r3, r7
 8005dc8:	4628      	mov	r0, r5
 8005dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dce:	f000 b857 	b.w	8005e80 <_write_r>

08005dd2 <__sseek>:
 8005dd2:	b510      	push	{r4, lr}
 8005dd4:	460c      	mov	r4, r1
 8005dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dda:	f000 f82d 	bl	8005e38 <_lseek_r>
 8005dde:	1c43      	adds	r3, r0, #1
 8005de0:	89a3      	ldrh	r3, [r4, #12]
 8005de2:	bf15      	itete	ne
 8005de4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005de6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005dea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005dee:	81a3      	strheq	r3, [r4, #12]
 8005df0:	bf18      	it	ne
 8005df2:	81a3      	strhne	r3, [r4, #12]
 8005df4:	bd10      	pop	{r4, pc}

08005df6 <__sclose>:
 8005df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dfa:	f000 b80d 	b.w	8005e18 <_close_r>

08005dfe <memset>:
 8005dfe:	4402      	add	r2, r0
 8005e00:	4603      	mov	r3, r0
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d100      	bne.n	8005e08 <memset+0xa>
 8005e06:	4770      	bx	lr
 8005e08:	f803 1b01 	strb.w	r1, [r3], #1
 8005e0c:	e7f9      	b.n	8005e02 <memset+0x4>
	...

08005e10 <_localeconv_r>:
 8005e10:	4800      	ldr	r0, [pc, #0]	@ (8005e14 <_localeconv_r+0x4>)
 8005e12:	4770      	bx	lr
 8005e14:	20000168 	.word	0x20000168

08005e18 <_close_r>:
 8005e18:	b538      	push	{r3, r4, r5, lr}
 8005e1a:	4d06      	ldr	r5, [pc, #24]	@ (8005e34 <_close_r+0x1c>)
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	4604      	mov	r4, r0
 8005e20:	4608      	mov	r0, r1
 8005e22:	602b      	str	r3, [r5, #0]
 8005e24:	f7fb ff30 	bl	8001c88 <_close>
 8005e28:	1c43      	adds	r3, r0, #1
 8005e2a:	d102      	bne.n	8005e32 <_close_r+0x1a>
 8005e2c:	682b      	ldr	r3, [r5, #0]
 8005e2e:	b103      	cbz	r3, 8005e32 <_close_r+0x1a>
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	bd38      	pop	{r3, r4, r5, pc}
 8005e34:	20000898 	.word	0x20000898

08005e38 <_lseek_r>:
 8005e38:	b538      	push	{r3, r4, r5, lr}
 8005e3a:	4d07      	ldr	r5, [pc, #28]	@ (8005e58 <_lseek_r+0x20>)
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	4608      	mov	r0, r1
 8005e40:	4611      	mov	r1, r2
 8005e42:	2200      	movs	r2, #0
 8005e44:	602a      	str	r2, [r5, #0]
 8005e46:	461a      	mov	r2, r3
 8005e48:	f7fb ff45 	bl	8001cd6 <_lseek>
 8005e4c:	1c43      	adds	r3, r0, #1
 8005e4e:	d102      	bne.n	8005e56 <_lseek_r+0x1e>
 8005e50:	682b      	ldr	r3, [r5, #0]
 8005e52:	b103      	cbz	r3, 8005e56 <_lseek_r+0x1e>
 8005e54:	6023      	str	r3, [r4, #0]
 8005e56:	bd38      	pop	{r3, r4, r5, pc}
 8005e58:	20000898 	.word	0x20000898

08005e5c <_read_r>:
 8005e5c:	b538      	push	{r3, r4, r5, lr}
 8005e5e:	4d07      	ldr	r5, [pc, #28]	@ (8005e7c <_read_r+0x20>)
 8005e60:	4604      	mov	r4, r0
 8005e62:	4608      	mov	r0, r1
 8005e64:	4611      	mov	r1, r2
 8005e66:	2200      	movs	r2, #0
 8005e68:	602a      	str	r2, [r5, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f7fb fed3 	bl	8001c16 <_read>
 8005e70:	1c43      	adds	r3, r0, #1
 8005e72:	d102      	bne.n	8005e7a <_read_r+0x1e>
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	b103      	cbz	r3, 8005e7a <_read_r+0x1e>
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	bd38      	pop	{r3, r4, r5, pc}
 8005e7c:	20000898 	.word	0x20000898

08005e80 <_write_r>:
 8005e80:	b538      	push	{r3, r4, r5, lr}
 8005e82:	4d07      	ldr	r5, [pc, #28]	@ (8005ea0 <_write_r+0x20>)
 8005e84:	4604      	mov	r4, r0
 8005e86:	4608      	mov	r0, r1
 8005e88:	4611      	mov	r1, r2
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	602a      	str	r2, [r5, #0]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f7fb fede 	bl	8001c50 <_write>
 8005e94:	1c43      	adds	r3, r0, #1
 8005e96:	d102      	bne.n	8005e9e <_write_r+0x1e>
 8005e98:	682b      	ldr	r3, [r5, #0]
 8005e9a:	b103      	cbz	r3, 8005e9e <_write_r+0x1e>
 8005e9c:	6023      	str	r3, [r4, #0]
 8005e9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ea0:	20000898 	.word	0x20000898

08005ea4 <__errno>:
 8005ea4:	4b01      	ldr	r3, [pc, #4]	@ (8005eac <__errno+0x8>)
 8005ea6:	6818      	ldr	r0, [r3, #0]
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	20000028 	.word	0x20000028

08005eb0 <__libc_init_array>:
 8005eb0:	b570      	push	{r4, r5, r6, lr}
 8005eb2:	4d0d      	ldr	r5, [pc, #52]	@ (8005ee8 <__libc_init_array+0x38>)
 8005eb4:	4c0d      	ldr	r4, [pc, #52]	@ (8005eec <__libc_init_array+0x3c>)
 8005eb6:	1b64      	subs	r4, r4, r5
 8005eb8:	10a4      	asrs	r4, r4, #2
 8005eba:	2600      	movs	r6, #0
 8005ebc:	42a6      	cmp	r6, r4
 8005ebe:	d109      	bne.n	8005ed4 <__libc_init_array+0x24>
 8005ec0:	4d0b      	ldr	r5, [pc, #44]	@ (8005ef0 <__libc_init_array+0x40>)
 8005ec2:	4c0c      	ldr	r4, [pc, #48]	@ (8005ef4 <__libc_init_array+0x44>)
 8005ec4:	f002 f868 	bl	8007f98 <_init>
 8005ec8:	1b64      	subs	r4, r4, r5
 8005eca:	10a4      	asrs	r4, r4, #2
 8005ecc:	2600      	movs	r6, #0
 8005ece:	42a6      	cmp	r6, r4
 8005ed0:	d105      	bne.n	8005ede <__libc_init_array+0x2e>
 8005ed2:	bd70      	pop	{r4, r5, r6, pc}
 8005ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ed8:	4798      	blx	r3
 8005eda:	3601      	adds	r6, #1
 8005edc:	e7ee      	b.n	8005ebc <__libc_init_array+0xc>
 8005ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ee2:	4798      	blx	r3
 8005ee4:	3601      	adds	r6, #1
 8005ee6:	e7f2      	b.n	8005ece <__libc_init_array+0x1e>
 8005ee8:	080090bc 	.word	0x080090bc
 8005eec:	080090bc 	.word	0x080090bc
 8005ef0:	080090bc 	.word	0x080090bc
 8005ef4:	080090c0 	.word	0x080090c0

08005ef8 <__retarget_lock_init_recursive>:
 8005ef8:	4770      	bx	lr

08005efa <__retarget_lock_acquire_recursive>:
 8005efa:	4770      	bx	lr

08005efc <__retarget_lock_release_recursive>:
 8005efc:	4770      	bx	lr

08005efe <quorem>:
 8005efe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f02:	6903      	ldr	r3, [r0, #16]
 8005f04:	690c      	ldr	r4, [r1, #16]
 8005f06:	42a3      	cmp	r3, r4
 8005f08:	4607      	mov	r7, r0
 8005f0a:	db7e      	blt.n	800600a <quorem+0x10c>
 8005f0c:	3c01      	subs	r4, #1
 8005f0e:	f101 0814 	add.w	r8, r1, #20
 8005f12:	00a3      	lsls	r3, r4, #2
 8005f14:	f100 0514 	add.w	r5, r0, #20
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f1e:	9301      	str	r3, [sp, #4]
 8005f20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f30:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f34:	d32e      	bcc.n	8005f94 <quorem+0x96>
 8005f36:	f04f 0a00 	mov.w	sl, #0
 8005f3a:	46c4      	mov	ip, r8
 8005f3c:	46ae      	mov	lr, r5
 8005f3e:	46d3      	mov	fp, sl
 8005f40:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005f44:	b298      	uxth	r0, r3
 8005f46:	fb06 a000 	mla	r0, r6, r0, sl
 8005f4a:	0c02      	lsrs	r2, r0, #16
 8005f4c:	0c1b      	lsrs	r3, r3, #16
 8005f4e:	fb06 2303 	mla	r3, r6, r3, r2
 8005f52:	f8de 2000 	ldr.w	r2, [lr]
 8005f56:	b280      	uxth	r0, r0
 8005f58:	b292      	uxth	r2, r2
 8005f5a:	1a12      	subs	r2, r2, r0
 8005f5c:	445a      	add	r2, fp
 8005f5e:	f8de 0000 	ldr.w	r0, [lr]
 8005f62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005f6c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005f70:	b292      	uxth	r2, r2
 8005f72:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005f76:	45e1      	cmp	r9, ip
 8005f78:	f84e 2b04 	str.w	r2, [lr], #4
 8005f7c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005f80:	d2de      	bcs.n	8005f40 <quorem+0x42>
 8005f82:	9b00      	ldr	r3, [sp, #0]
 8005f84:	58eb      	ldr	r3, [r5, r3]
 8005f86:	b92b      	cbnz	r3, 8005f94 <quorem+0x96>
 8005f88:	9b01      	ldr	r3, [sp, #4]
 8005f8a:	3b04      	subs	r3, #4
 8005f8c:	429d      	cmp	r5, r3
 8005f8e:	461a      	mov	r2, r3
 8005f90:	d32f      	bcc.n	8005ff2 <quorem+0xf4>
 8005f92:	613c      	str	r4, [r7, #16]
 8005f94:	4638      	mov	r0, r7
 8005f96:	f001 f97d 	bl	8007294 <__mcmp>
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	db25      	blt.n	8005fea <quorem+0xec>
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	f858 2b04 	ldr.w	r2, [r8], #4
 8005fa6:	f8d1 c000 	ldr.w	ip, [r1]
 8005faa:	fa1f fe82 	uxth.w	lr, r2
 8005fae:	fa1f f38c 	uxth.w	r3, ip
 8005fb2:	eba3 030e 	sub.w	r3, r3, lr
 8005fb6:	4403      	add	r3, r0
 8005fb8:	0c12      	lsrs	r2, r2, #16
 8005fba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005fbe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fc8:	45c1      	cmp	r9, r8
 8005fca:	f841 3b04 	str.w	r3, [r1], #4
 8005fce:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005fd2:	d2e6      	bcs.n	8005fa2 <quorem+0xa4>
 8005fd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fd8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fdc:	b922      	cbnz	r2, 8005fe8 <quorem+0xea>
 8005fde:	3b04      	subs	r3, #4
 8005fe0:	429d      	cmp	r5, r3
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	d30b      	bcc.n	8005ffe <quorem+0x100>
 8005fe6:	613c      	str	r4, [r7, #16]
 8005fe8:	3601      	adds	r6, #1
 8005fea:	4630      	mov	r0, r6
 8005fec:	b003      	add	sp, #12
 8005fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff2:	6812      	ldr	r2, [r2, #0]
 8005ff4:	3b04      	subs	r3, #4
 8005ff6:	2a00      	cmp	r2, #0
 8005ff8:	d1cb      	bne.n	8005f92 <quorem+0x94>
 8005ffa:	3c01      	subs	r4, #1
 8005ffc:	e7c6      	b.n	8005f8c <quorem+0x8e>
 8005ffe:	6812      	ldr	r2, [r2, #0]
 8006000:	3b04      	subs	r3, #4
 8006002:	2a00      	cmp	r2, #0
 8006004:	d1ef      	bne.n	8005fe6 <quorem+0xe8>
 8006006:	3c01      	subs	r4, #1
 8006008:	e7ea      	b.n	8005fe0 <quorem+0xe2>
 800600a:	2000      	movs	r0, #0
 800600c:	e7ee      	b.n	8005fec <quorem+0xee>
	...

08006010 <_dtoa_r>:
 8006010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006014:	69c7      	ldr	r7, [r0, #28]
 8006016:	b097      	sub	sp, #92	@ 0x5c
 8006018:	ed8d 0b04 	vstr	d0, [sp, #16]
 800601c:	ec55 4b10 	vmov	r4, r5, d0
 8006020:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006022:	9107      	str	r1, [sp, #28]
 8006024:	4681      	mov	r9, r0
 8006026:	920c      	str	r2, [sp, #48]	@ 0x30
 8006028:	9311      	str	r3, [sp, #68]	@ 0x44
 800602a:	b97f      	cbnz	r7, 800604c <_dtoa_r+0x3c>
 800602c:	2010      	movs	r0, #16
 800602e:	f000 fe09 	bl	8006c44 <malloc>
 8006032:	4602      	mov	r2, r0
 8006034:	f8c9 001c 	str.w	r0, [r9, #28]
 8006038:	b920      	cbnz	r0, 8006044 <_dtoa_r+0x34>
 800603a:	4ba9      	ldr	r3, [pc, #676]	@ (80062e0 <_dtoa_r+0x2d0>)
 800603c:	21ef      	movs	r1, #239	@ 0xef
 800603e:	48a9      	ldr	r0, [pc, #676]	@ (80062e4 <_dtoa_r+0x2d4>)
 8006040:	f001 fc6c 	bl	800791c <__assert_func>
 8006044:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006048:	6007      	str	r7, [r0, #0]
 800604a:	60c7      	str	r7, [r0, #12]
 800604c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006050:	6819      	ldr	r1, [r3, #0]
 8006052:	b159      	cbz	r1, 800606c <_dtoa_r+0x5c>
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	604a      	str	r2, [r1, #4]
 8006058:	2301      	movs	r3, #1
 800605a:	4093      	lsls	r3, r2
 800605c:	608b      	str	r3, [r1, #8]
 800605e:	4648      	mov	r0, r9
 8006060:	f000 fee6 	bl	8006e30 <_Bfree>
 8006064:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	1e2b      	subs	r3, r5, #0
 800606e:	bfb9      	ittee	lt
 8006070:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006074:	9305      	strlt	r3, [sp, #20]
 8006076:	2300      	movge	r3, #0
 8006078:	6033      	strge	r3, [r6, #0]
 800607a:	9f05      	ldr	r7, [sp, #20]
 800607c:	4b9a      	ldr	r3, [pc, #616]	@ (80062e8 <_dtoa_r+0x2d8>)
 800607e:	bfbc      	itt	lt
 8006080:	2201      	movlt	r2, #1
 8006082:	6032      	strlt	r2, [r6, #0]
 8006084:	43bb      	bics	r3, r7
 8006086:	d112      	bne.n	80060ae <_dtoa_r+0x9e>
 8006088:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800608a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006094:	4323      	orrs	r3, r4
 8006096:	f000 855a 	beq.w	8006b4e <_dtoa_r+0xb3e>
 800609a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800609c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80062fc <_dtoa_r+0x2ec>
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 855c 	beq.w	8006b5e <_dtoa_r+0xb4e>
 80060a6:	f10a 0303 	add.w	r3, sl, #3
 80060aa:	f000 bd56 	b.w	8006b5a <_dtoa_r+0xb4a>
 80060ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80060b2:	2200      	movs	r2, #0
 80060b4:	ec51 0b17 	vmov	r0, r1, d7
 80060b8:	2300      	movs	r3, #0
 80060ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80060be:	f7fa fd23 	bl	8000b08 <__aeabi_dcmpeq>
 80060c2:	4680      	mov	r8, r0
 80060c4:	b158      	cbz	r0, 80060de <_dtoa_r+0xce>
 80060c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80060c8:	2301      	movs	r3, #1
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80060ce:	b113      	cbz	r3, 80060d6 <_dtoa_r+0xc6>
 80060d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80060d2:	4b86      	ldr	r3, [pc, #536]	@ (80062ec <_dtoa_r+0x2dc>)
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006300 <_dtoa_r+0x2f0>
 80060da:	f000 bd40 	b.w	8006b5e <_dtoa_r+0xb4e>
 80060de:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80060e2:	aa14      	add	r2, sp, #80	@ 0x50
 80060e4:	a915      	add	r1, sp, #84	@ 0x54
 80060e6:	4648      	mov	r0, r9
 80060e8:	f001 f984 	bl	80073f4 <__d2b>
 80060ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80060f0:	9002      	str	r0, [sp, #8]
 80060f2:	2e00      	cmp	r6, #0
 80060f4:	d078      	beq.n	80061e8 <_dtoa_r+0x1d8>
 80060f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060f8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80060fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006100:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006104:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006108:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800610c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006110:	4619      	mov	r1, r3
 8006112:	2200      	movs	r2, #0
 8006114:	4b76      	ldr	r3, [pc, #472]	@ (80062f0 <_dtoa_r+0x2e0>)
 8006116:	f7fa f8d7 	bl	80002c8 <__aeabi_dsub>
 800611a:	a36b      	add	r3, pc, #428	@ (adr r3, 80062c8 <_dtoa_r+0x2b8>)
 800611c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006120:	f7fa fa8a 	bl	8000638 <__aeabi_dmul>
 8006124:	a36a      	add	r3, pc, #424	@ (adr r3, 80062d0 <_dtoa_r+0x2c0>)
 8006126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612a:	f7fa f8cf 	bl	80002cc <__adddf3>
 800612e:	4604      	mov	r4, r0
 8006130:	4630      	mov	r0, r6
 8006132:	460d      	mov	r5, r1
 8006134:	f7fa fa16 	bl	8000564 <__aeabi_i2d>
 8006138:	a367      	add	r3, pc, #412	@ (adr r3, 80062d8 <_dtoa_r+0x2c8>)
 800613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613e:	f7fa fa7b 	bl	8000638 <__aeabi_dmul>
 8006142:	4602      	mov	r2, r0
 8006144:	460b      	mov	r3, r1
 8006146:	4620      	mov	r0, r4
 8006148:	4629      	mov	r1, r5
 800614a:	f7fa f8bf 	bl	80002cc <__adddf3>
 800614e:	4604      	mov	r4, r0
 8006150:	460d      	mov	r5, r1
 8006152:	f7fa fd21 	bl	8000b98 <__aeabi_d2iz>
 8006156:	2200      	movs	r2, #0
 8006158:	4607      	mov	r7, r0
 800615a:	2300      	movs	r3, #0
 800615c:	4620      	mov	r0, r4
 800615e:	4629      	mov	r1, r5
 8006160:	f7fa fcdc 	bl	8000b1c <__aeabi_dcmplt>
 8006164:	b140      	cbz	r0, 8006178 <_dtoa_r+0x168>
 8006166:	4638      	mov	r0, r7
 8006168:	f7fa f9fc 	bl	8000564 <__aeabi_i2d>
 800616c:	4622      	mov	r2, r4
 800616e:	462b      	mov	r3, r5
 8006170:	f7fa fcca 	bl	8000b08 <__aeabi_dcmpeq>
 8006174:	b900      	cbnz	r0, 8006178 <_dtoa_r+0x168>
 8006176:	3f01      	subs	r7, #1
 8006178:	2f16      	cmp	r7, #22
 800617a:	d852      	bhi.n	8006222 <_dtoa_r+0x212>
 800617c:	4b5d      	ldr	r3, [pc, #372]	@ (80062f4 <_dtoa_r+0x2e4>)
 800617e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006186:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800618a:	f7fa fcc7 	bl	8000b1c <__aeabi_dcmplt>
 800618e:	2800      	cmp	r0, #0
 8006190:	d049      	beq.n	8006226 <_dtoa_r+0x216>
 8006192:	3f01      	subs	r7, #1
 8006194:	2300      	movs	r3, #0
 8006196:	9310      	str	r3, [sp, #64]	@ 0x40
 8006198:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800619a:	1b9b      	subs	r3, r3, r6
 800619c:	1e5a      	subs	r2, r3, #1
 800619e:	bf45      	ittet	mi
 80061a0:	f1c3 0301 	rsbmi	r3, r3, #1
 80061a4:	9300      	strmi	r3, [sp, #0]
 80061a6:	2300      	movpl	r3, #0
 80061a8:	2300      	movmi	r3, #0
 80061aa:	9206      	str	r2, [sp, #24]
 80061ac:	bf54      	ite	pl
 80061ae:	9300      	strpl	r3, [sp, #0]
 80061b0:	9306      	strmi	r3, [sp, #24]
 80061b2:	2f00      	cmp	r7, #0
 80061b4:	db39      	blt.n	800622a <_dtoa_r+0x21a>
 80061b6:	9b06      	ldr	r3, [sp, #24]
 80061b8:	970d      	str	r7, [sp, #52]	@ 0x34
 80061ba:	443b      	add	r3, r7
 80061bc:	9306      	str	r3, [sp, #24]
 80061be:	2300      	movs	r3, #0
 80061c0:	9308      	str	r3, [sp, #32]
 80061c2:	9b07      	ldr	r3, [sp, #28]
 80061c4:	2b09      	cmp	r3, #9
 80061c6:	d863      	bhi.n	8006290 <_dtoa_r+0x280>
 80061c8:	2b05      	cmp	r3, #5
 80061ca:	bfc4      	itt	gt
 80061cc:	3b04      	subgt	r3, #4
 80061ce:	9307      	strgt	r3, [sp, #28]
 80061d0:	9b07      	ldr	r3, [sp, #28]
 80061d2:	f1a3 0302 	sub.w	r3, r3, #2
 80061d6:	bfcc      	ite	gt
 80061d8:	2400      	movgt	r4, #0
 80061da:	2401      	movle	r4, #1
 80061dc:	2b03      	cmp	r3, #3
 80061de:	d863      	bhi.n	80062a8 <_dtoa_r+0x298>
 80061e0:	e8df f003 	tbb	[pc, r3]
 80061e4:	2b375452 	.word	0x2b375452
 80061e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80061ec:	441e      	add	r6, r3
 80061ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80061f2:	2b20      	cmp	r3, #32
 80061f4:	bfc1      	itttt	gt
 80061f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80061fa:	409f      	lslgt	r7, r3
 80061fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006200:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006204:	bfd6      	itet	le
 8006206:	f1c3 0320 	rsble	r3, r3, #32
 800620a:	ea47 0003 	orrgt.w	r0, r7, r3
 800620e:	fa04 f003 	lslle.w	r0, r4, r3
 8006212:	f7fa f997 	bl	8000544 <__aeabi_ui2d>
 8006216:	2201      	movs	r2, #1
 8006218:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800621c:	3e01      	subs	r6, #1
 800621e:	9212      	str	r2, [sp, #72]	@ 0x48
 8006220:	e776      	b.n	8006110 <_dtoa_r+0x100>
 8006222:	2301      	movs	r3, #1
 8006224:	e7b7      	b.n	8006196 <_dtoa_r+0x186>
 8006226:	9010      	str	r0, [sp, #64]	@ 0x40
 8006228:	e7b6      	b.n	8006198 <_dtoa_r+0x188>
 800622a:	9b00      	ldr	r3, [sp, #0]
 800622c:	1bdb      	subs	r3, r3, r7
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	427b      	negs	r3, r7
 8006232:	9308      	str	r3, [sp, #32]
 8006234:	2300      	movs	r3, #0
 8006236:	930d      	str	r3, [sp, #52]	@ 0x34
 8006238:	e7c3      	b.n	80061c2 <_dtoa_r+0x1b2>
 800623a:	2301      	movs	r3, #1
 800623c:	9309      	str	r3, [sp, #36]	@ 0x24
 800623e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006240:	eb07 0b03 	add.w	fp, r7, r3
 8006244:	f10b 0301 	add.w	r3, fp, #1
 8006248:	2b01      	cmp	r3, #1
 800624a:	9303      	str	r3, [sp, #12]
 800624c:	bfb8      	it	lt
 800624e:	2301      	movlt	r3, #1
 8006250:	e006      	b.n	8006260 <_dtoa_r+0x250>
 8006252:	2301      	movs	r3, #1
 8006254:	9309      	str	r3, [sp, #36]	@ 0x24
 8006256:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006258:	2b00      	cmp	r3, #0
 800625a:	dd28      	ble.n	80062ae <_dtoa_r+0x29e>
 800625c:	469b      	mov	fp, r3
 800625e:	9303      	str	r3, [sp, #12]
 8006260:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006264:	2100      	movs	r1, #0
 8006266:	2204      	movs	r2, #4
 8006268:	f102 0514 	add.w	r5, r2, #20
 800626c:	429d      	cmp	r5, r3
 800626e:	d926      	bls.n	80062be <_dtoa_r+0x2ae>
 8006270:	6041      	str	r1, [r0, #4]
 8006272:	4648      	mov	r0, r9
 8006274:	f000 fd9c 	bl	8006db0 <_Balloc>
 8006278:	4682      	mov	sl, r0
 800627a:	2800      	cmp	r0, #0
 800627c:	d142      	bne.n	8006304 <_dtoa_r+0x2f4>
 800627e:	4b1e      	ldr	r3, [pc, #120]	@ (80062f8 <_dtoa_r+0x2e8>)
 8006280:	4602      	mov	r2, r0
 8006282:	f240 11af 	movw	r1, #431	@ 0x1af
 8006286:	e6da      	b.n	800603e <_dtoa_r+0x2e>
 8006288:	2300      	movs	r3, #0
 800628a:	e7e3      	b.n	8006254 <_dtoa_r+0x244>
 800628c:	2300      	movs	r3, #0
 800628e:	e7d5      	b.n	800623c <_dtoa_r+0x22c>
 8006290:	2401      	movs	r4, #1
 8006292:	2300      	movs	r3, #0
 8006294:	9307      	str	r3, [sp, #28]
 8006296:	9409      	str	r4, [sp, #36]	@ 0x24
 8006298:	f04f 3bff 	mov.w	fp, #4294967295
 800629c:	2200      	movs	r2, #0
 800629e:	f8cd b00c 	str.w	fp, [sp, #12]
 80062a2:	2312      	movs	r3, #18
 80062a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80062a6:	e7db      	b.n	8006260 <_dtoa_r+0x250>
 80062a8:	2301      	movs	r3, #1
 80062aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80062ac:	e7f4      	b.n	8006298 <_dtoa_r+0x288>
 80062ae:	f04f 0b01 	mov.w	fp, #1
 80062b2:	f8cd b00c 	str.w	fp, [sp, #12]
 80062b6:	465b      	mov	r3, fp
 80062b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80062bc:	e7d0      	b.n	8006260 <_dtoa_r+0x250>
 80062be:	3101      	adds	r1, #1
 80062c0:	0052      	lsls	r2, r2, #1
 80062c2:	e7d1      	b.n	8006268 <_dtoa_r+0x258>
 80062c4:	f3af 8000 	nop.w
 80062c8:	636f4361 	.word	0x636f4361
 80062cc:	3fd287a7 	.word	0x3fd287a7
 80062d0:	8b60c8b3 	.word	0x8b60c8b3
 80062d4:	3fc68a28 	.word	0x3fc68a28
 80062d8:	509f79fb 	.word	0x509f79fb
 80062dc:	3fd34413 	.word	0x3fd34413
 80062e0:	08008d7d 	.word	0x08008d7d
 80062e4:	08008d94 	.word	0x08008d94
 80062e8:	7ff00000 	.word	0x7ff00000
 80062ec:	08008d4d 	.word	0x08008d4d
 80062f0:	3ff80000 	.word	0x3ff80000
 80062f4:	08008ee8 	.word	0x08008ee8
 80062f8:	08008dec 	.word	0x08008dec
 80062fc:	08008d79 	.word	0x08008d79
 8006300:	08008d4c 	.word	0x08008d4c
 8006304:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006308:	6018      	str	r0, [r3, #0]
 800630a:	9b03      	ldr	r3, [sp, #12]
 800630c:	2b0e      	cmp	r3, #14
 800630e:	f200 80a1 	bhi.w	8006454 <_dtoa_r+0x444>
 8006312:	2c00      	cmp	r4, #0
 8006314:	f000 809e 	beq.w	8006454 <_dtoa_r+0x444>
 8006318:	2f00      	cmp	r7, #0
 800631a:	dd33      	ble.n	8006384 <_dtoa_r+0x374>
 800631c:	4b9c      	ldr	r3, [pc, #624]	@ (8006590 <_dtoa_r+0x580>)
 800631e:	f007 020f 	and.w	r2, r7, #15
 8006322:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006326:	ed93 7b00 	vldr	d7, [r3]
 800632a:	05f8      	lsls	r0, r7, #23
 800632c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006330:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006334:	d516      	bpl.n	8006364 <_dtoa_r+0x354>
 8006336:	4b97      	ldr	r3, [pc, #604]	@ (8006594 <_dtoa_r+0x584>)
 8006338:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800633c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006340:	f7fa faa4 	bl	800088c <__aeabi_ddiv>
 8006344:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006348:	f004 040f 	and.w	r4, r4, #15
 800634c:	2603      	movs	r6, #3
 800634e:	4d91      	ldr	r5, [pc, #580]	@ (8006594 <_dtoa_r+0x584>)
 8006350:	b954      	cbnz	r4, 8006368 <_dtoa_r+0x358>
 8006352:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006356:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800635a:	f7fa fa97 	bl	800088c <__aeabi_ddiv>
 800635e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006362:	e028      	b.n	80063b6 <_dtoa_r+0x3a6>
 8006364:	2602      	movs	r6, #2
 8006366:	e7f2      	b.n	800634e <_dtoa_r+0x33e>
 8006368:	07e1      	lsls	r1, r4, #31
 800636a:	d508      	bpl.n	800637e <_dtoa_r+0x36e>
 800636c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006370:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006374:	f7fa f960 	bl	8000638 <__aeabi_dmul>
 8006378:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800637c:	3601      	adds	r6, #1
 800637e:	1064      	asrs	r4, r4, #1
 8006380:	3508      	adds	r5, #8
 8006382:	e7e5      	b.n	8006350 <_dtoa_r+0x340>
 8006384:	f000 80af 	beq.w	80064e6 <_dtoa_r+0x4d6>
 8006388:	427c      	negs	r4, r7
 800638a:	4b81      	ldr	r3, [pc, #516]	@ (8006590 <_dtoa_r+0x580>)
 800638c:	4d81      	ldr	r5, [pc, #516]	@ (8006594 <_dtoa_r+0x584>)
 800638e:	f004 020f 	and.w	r2, r4, #15
 8006392:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800639e:	f7fa f94b 	bl	8000638 <__aeabi_dmul>
 80063a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063a6:	1124      	asrs	r4, r4, #4
 80063a8:	2300      	movs	r3, #0
 80063aa:	2602      	movs	r6, #2
 80063ac:	2c00      	cmp	r4, #0
 80063ae:	f040 808f 	bne.w	80064d0 <_dtoa_r+0x4c0>
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1d3      	bne.n	800635e <_dtoa_r+0x34e>
 80063b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80063b8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 8094 	beq.w	80064ea <_dtoa_r+0x4da>
 80063c2:	4b75      	ldr	r3, [pc, #468]	@ (8006598 <_dtoa_r+0x588>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	4620      	mov	r0, r4
 80063c8:	4629      	mov	r1, r5
 80063ca:	f7fa fba7 	bl	8000b1c <__aeabi_dcmplt>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	f000 808b 	beq.w	80064ea <_dtoa_r+0x4da>
 80063d4:	9b03      	ldr	r3, [sp, #12]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 8087 	beq.w	80064ea <_dtoa_r+0x4da>
 80063dc:	f1bb 0f00 	cmp.w	fp, #0
 80063e0:	dd34      	ble.n	800644c <_dtoa_r+0x43c>
 80063e2:	4620      	mov	r0, r4
 80063e4:	4b6d      	ldr	r3, [pc, #436]	@ (800659c <_dtoa_r+0x58c>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	4629      	mov	r1, r5
 80063ea:	f7fa f925 	bl	8000638 <__aeabi_dmul>
 80063ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063f2:	f107 38ff 	add.w	r8, r7, #4294967295
 80063f6:	3601      	adds	r6, #1
 80063f8:	465c      	mov	r4, fp
 80063fa:	4630      	mov	r0, r6
 80063fc:	f7fa f8b2 	bl	8000564 <__aeabi_i2d>
 8006400:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006404:	f7fa f918 	bl	8000638 <__aeabi_dmul>
 8006408:	4b65      	ldr	r3, [pc, #404]	@ (80065a0 <_dtoa_r+0x590>)
 800640a:	2200      	movs	r2, #0
 800640c:	f7f9 ff5e 	bl	80002cc <__adddf3>
 8006410:	4605      	mov	r5, r0
 8006412:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006416:	2c00      	cmp	r4, #0
 8006418:	d16a      	bne.n	80064f0 <_dtoa_r+0x4e0>
 800641a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800641e:	4b61      	ldr	r3, [pc, #388]	@ (80065a4 <_dtoa_r+0x594>)
 8006420:	2200      	movs	r2, #0
 8006422:	f7f9 ff51 	bl	80002c8 <__aeabi_dsub>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800642e:	462a      	mov	r2, r5
 8006430:	4633      	mov	r3, r6
 8006432:	f7fa fb91 	bl	8000b58 <__aeabi_dcmpgt>
 8006436:	2800      	cmp	r0, #0
 8006438:	f040 8298 	bne.w	800696c <_dtoa_r+0x95c>
 800643c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006440:	462a      	mov	r2, r5
 8006442:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006446:	f7fa fb69 	bl	8000b1c <__aeabi_dcmplt>
 800644a:	bb38      	cbnz	r0, 800649c <_dtoa_r+0x48c>
 800644c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006450:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006454:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006456:	2b00      	cmp	r3, #0
 8006458:	f2c0 8157 	blt.w	800670a <_dtoa_r+0x6fa>
 800645c:	2f0e      	cmp	r7, #14
 800645e:	f300 8154 	bgt.w	800670a <_dtoa_r+0x6fa>
 8006462:	4b4b      	ldr	r3, [pc, #300]	@ (8006590 <_dtoa_r+0x580>)
 8006464:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006468:	ed93 7b00 	vldr	d7, [r3]
 800646c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800646e:	2b00      	cmp	r3, #0
 8006470:	ed8d 7b00 	vstr	d7, [sp]
 8006474:	f280 80e5 	bge.w	8006642 <_dtoa_r+0x632>
 8006478:	9b03      	ldr	r3, [sp, #12]
 800647a:	2b00      	cmp	r3, #0
 800647c:	f300 80e1 	bgt.w	8006642 <_dtoa_r+0x632>
 8006480:	d10c      	bne.n	800649c <_dtoa_r+0x48c>
 8006482:	4b48      	ldr	r3, [pc, #288]	@ (80065a4 <_dtoa_r+0x594>)
 8006484:	2200      	movs	r2, #0
 8006486:	ec51 0b17 	vmov	r0, r1, d7
 800648a:	f7fa f8d5 	bl	8000638 <__aeabi_dmul>
 800648e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006492:	f7fa fb57 	bl	8000b44 <__aeabi_dcmpge>
 8006496:	2800      	cmp	r0, #0
 8006498:	f000 8266 	beq.w	8006968 <_dtoa_r+0x958>
 800649c:	2400      	movs	r4, #0
 800649e:	4625      	mov	r5, r4
 80064a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80064a2:	4656      	mov	r6, sl
 80064a4:	ea6f 0803 	mvn.w	r8, r3
 80064a8:	2700      	movs	r7, #0
 80064aa:	4621      	mov	r1, r4
 80064ac:	4648      	mov	r0, r9
 80064ae:	f000 fcbf 	bl	8006e30 <_Bfree>
 80064b2:	2d00      	cmp	r5, #0
 80064b4:	f000 80bd 	beq.w	8006632 <_dtoa_r+0x622>
 80064b8:	b12f      	cbz	r7, 80064c6 <_dtoa_r+0x4b6>
 80064ba:	42af      	cmp	r7, r5
 80064bc:	d003      	beq.n	80064c6 <_dtoa_r+0x4b6>
 80064be:	4639      	mov	r1, r7
 80064c0:	4648      	mov	r0, r9
 80064c2:	f000 fcb5 	bl	8006e30 <_Bfree>
 80064c6:	4629      	mov	r1, r5
 80064c8:	4648      	mov	r0, r9
 80064ca:	f000 fcb1 	bl	8006e30 <_Bfree>
 80064ce:	e0b0      	b.n	8006632 <_dtoa_r+0x622>
 80064d0:	07e2      	lsls	r2, r4, #31
 80064d2:	d505      	bpl.n	80064e0 <_dtoa_r+0x4d0>
 80064d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80064d8:	f7fa f8ae 	bl	8000638 <__aeabi_dmul>
 80064dc:	3601      	adds	r6, #1
 80064de:	2301      	movs	r3, #1
 80064e0:	1064      	asrs	r4, r4, #1
 80064e2:	3508      	adds	r5, #8
 80064e4:	e762      	b.n	80063ac <_dtoa_r+0x39c>
 80064e6:	2602      	movs	r6, #2
 80064e8:	e765      	b.n	80063b6 <_dtoa_r+0x3a6>
 80064ea:	9c03      	ldr	r4, [sp, #12]
 80064ec:	46b8      	mov	r8, r7
 80064ee:	e784      	b.n	80063fa <_dtoa_r+0x3ea>
 80064f0:	4b27      	ldr	r3, [pc, #156]	@ (8006590 <_dtoa_r+0x580>)
 80064f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80064f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80064f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064fc:	4454      	add	r4, sl
 80064fe:	2900      	cmp	r1, #0
 8006500:	d054      	beq.n	80065ac <_dtoa_r+0x59c>
 8006502:	4929      	ldr	r1, [pc, #164]	@ (80065a8 <_dtoa_r+0x598>)
 8006504:	2000      	movs	r0, #0
 8006506:	f7fa f9c1 	bl	800088c <__aeabi_ddiv>
 800650a:	4633      	mov	r3, r6
 800650c:	462a      	mov	r2, r5
 800650e:	f7f9 fedb 	bl	80002c8 <__aeabi_dsub>
 8006512:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006516:	4656      	mov	r6, sl
 8006518:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800651c:	f7fa fb3c 	bl	8000b98 <__aeabi_d2iz>
 8006520:	4605      	mov	r5, r0
 8006522:	f7fa f81f 	bl	8000564 <__aeabi_i2d>
 8006526:	4602      	mov	r2, r0
 8006528:	460b      	mov	r3, r1
 800652a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800652e:	f7f9 fecb 	bl	80002c8 <__aeabi_dsub>
 8006532:	3530      	adds	r5, #48	@ 0x30
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800653c:	f806 5b01 	strb.w	r5, [r6], #1
 8006540:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006544:	f7fa faea 	bl	8000b1c <__aeabi_dcmplt>
 8006548:	2800      	cmp	r0, #0
 800654a:	d172      	bne.n	8006632 <_dtoa_r+0x622>
 800654c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006550:	4911      	ldr	r1, [pc, #68]	@ (8006598 <_dtoa_r+0x588>)
 8006552:	2000      	movs	r0, #0
 8006554:	f7f9 feb8 	bl	80002c8 <__aeabi_dsub>
 8006558:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800655c:	f7fa fade 	bl	8000b1c <__aeabi_dcmplt>
 8006560:	2800      	cmp	r0, #0
 8006562:	f040 80b4 	bne.w	80066ce <_dtoa_r+0x6be>
 8006566:	42a6      	cmp	r6, r4
 8006568:	f43f af70 	beq.w	800644c <_dtoa_r+0x43c>
 800656c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006570:	4b0a      	ldr	r3, [pc, #40]	@ (800659c <_dtoa_r+0x58c>)
 8006572:	2200      	movs	r2, #0
 8006574:	f7fa f860 	bl	8000638 <__aeabi_dmul>
 8006578:	4b08      	ldr	r3, [pc, #32]	@ (800659c <_dtoa_r+0x58c>)
 800657a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800657e:	2200      	movs	r2, #0
 8006580:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006584:	f7fa f858 	bl	8000638 <__aeabi_dmul>
 8006588:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800658c:	e7c4      	b.n	8006518 <_dtoa_r+0x508>
 800658e:	bf00      	nop
 8006590:	08008ee8 	.word	0x08008ee8
 8006594:	08008ec0 	.word	0x08008ec0
 8006598:	3ff00000 	.word	0x3ff00000
 800659c:	40240000 	.word	0x40240000
 80065a0:	401c0000 	.word	0x401c0000
 80065a4:	40140000 	.word	0x40140000
 80065a8:	3fe00000 	.word	0x3fe00000
 80065ac:	4631      	mov	r1, r6
 80065ae:	4628      	mov	r0, r5
 80065b0:	f7fa f842 	bl	8000638 <__aeabi_dmul>
 80065b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80065b8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80065ba:	4656      	mov	r6, sl
 80065bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065c0:	f7fa faea 	bl	8000b98 <__aeabi_d2iz>
 80065c4:	4605      	mov	r5, r0
 80065c6:	f7f9 ffcd 	bl	8000564 <__aeabi_i2d>
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065d2:	f7f9 fe79 	bl	80002c8 <__aeabi_dsub>
 80065d6:	3530      	adds	r5, #48	@ 0x30
 80065d8:	f806 5b01 	strb.w	r5, [r6], #1
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	42a6      	cmp	r6, r4
 80065e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80065e6:	f04f 0200 	mov.w	r2, #0
 80065ea:	d124      	bne.n	8006636 <_dtoa_r+0x626>
 80065ec:	4baf      	ldr	r3, [pc, #700]	@ (80068ac <_dtoa_r+0x89c>)
 80065ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80065f2:	f7f9 fe6b 	bl	80002cc <__adddf3>
 80065f6:	4602      	mov	r2, r0
 80065f8:	460b      	mov	r3, r1
 80065fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065fe:	f7fa faab 	bl	8000b58 <__aeabi_dcmpgt>
 8006602:	2800      	cmp	r0, #0
 8006604:	d163      	bne.n	80066ce <_dtoa_r+0x6be>
 8006606:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800660a:	49a8      	ldr	r1, [pc, #672]	@ (80068ac <_dtoa_r+0x89c>)
 800660c:	2000      	movs	r0, #0
 800660e:	f7f9 fe5b 	bl	80002c8 <__aeabi_dsub>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800661a:	f7fa fa7f 	bl	8000b1c <__aeabi_dcmplt>
 800661e:	2800      	cmp	r0, #0
 8006620:	f43f af14 	beq.w	800644c <_dtoa_r+0x43c>
 8006624:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006626:	1e73      	subs	r3, r6, #1
 8006628:	9313      	str	r3, [sp, #76]	@ 0x4c
 800662a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800662e:	2b30      	cmp	r3, #48	@ 0x30
 8006630:	d0f8      	beq.n	8006624 <_dtoa_r+0x614>
 8006632:	4647      	mov	r7, r8
 8006634:	e03b      	b.n	80066ae <_dtoa_r+0x69e>
 8006636:	4b9e      	ldr	r3, [pc, #632]	@ (80068b0 <_dtoa_r+0x8a0>)
 8006638:	f7f9 fffe 	bl	8000638 <__aeabi_dmul>
 800663c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006640:	e7bc      	b.n	80065bc <_dtoa_r+0x5ac>
 8006642:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006646:	4656      	mov	r6, sl
 8006648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800664c:	4620      	mov	r0, r4
 800664e:	4629      	mov	r1, r5
 8006650:	f7fa f91c 	bl	800088c <__aeabi_ddiv>
 8006654:	f7fa faa0 	bl	8000b98 <__aeabi_d2iz>
 8006658:	4680      	mov	r8, r0
 800665a:	f7f9 ff83 	bl	8000564 <__aeabi_i2d>
 800665e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006662:	f7f9 ffe9 	bl	8000638 <__aeabi_dmul>
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	4620      	mov	r0, r4
 800666c:	4629      	mov	r1, r5
 800666e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006672:	f7f9 fe29 	bl	80002c8 <__aeabi_dsub>
 8006676:	f806 4b01 	strb.w	r4, [r6], #1
 800667a:	9d03      	ldr	r5, [sp, #12]
 800667c:	eba6 040a 	sub.w	r4, r6, sl
 8006680:	42a5      	cmp	r5, r4
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	d133      	bne.n	80066f0 <_dtoa_r+0x6e0>
 8006688:	f7f9 fe20 	bl	80002cc <__adddf3>
 800668c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006690:	4604      	mov	r4, r0
 8006692:	460d      	mov	r5, r1
 8006694:	f7fa fa60 	bl	8000b58 <__aeabi_dcmpgt>
 8006698:	b9c0      	cbnz	r0, 80066cc <_dtoa_r+0x6bc>
 800669a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800669e:	4620      	mov	r0, r4
 80066a0:	4629      	mov	r1, r5
 80066a2:	f7fa fa31 	bl	8000b08 <__aeabi_dcmpeq>
 80066a6:	b110      	cbz	r0, 80066ae <_dtoa_r+0x69e>
 80066a8:	f018 0f01 	tst.w	r8, #1
 80066ac:	d10e      	bne.n	80066cc <_dtoa_r+0x6bc>
 80066ae:	9902      	ldr	r1, [sp, #8]
 80066b0:	4648      	mov	r0, r9
 80066b2:	f000 fbbd 	bl	8006e30 <_Bfree>
 80066b6:	2300      	movs	r3, #0
 80066b8:	7033      	strb	r3, [r6, #0]
 80066ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80066bc:	3701      	adds	r7, #1
 80066be:	601f      	str	r7, [r3, #0]
 80066c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 824b 	beq.w	8006b5e <_dtoa_r+0xb4e>
 80066c8:	601e      	str	r6, [r3, #0]
 80066ca:	e248      	b.n	8006b5e <_dtoa_r+0xb4e>
 80066cc:	46b8      	mov	r8, r7
 80066ce:	4633      	mov	r3, r6
 80066d0:	461e      	mov	r6, r3
 80066d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066d6:	2a39      	cmp	r2, #57	@ 0x39
 80066d8:	d106      	bne.n	80066e8 <_dtoa_r+0x6d8>
 80066da:	459a      	cmp	sl, r3
 80066dc:	d1f8      	bne.n	80066d0 <_dtoa_r+0x6c0>
 80066de:	2230      	movs	r2, #48	@ 0x30
 80066e0:	f108 0801 	add.w	r8, r8, #1
 80066e4:	f88a 2000 	strb.w	r2, [sl]
 80066e8:	781a      	ldrb	r2, [r3, #0]
 80066ea:	3201      	adds	r2, #1
 80066ec:	701a      	strb	r2, [r3, #0]
 80066ee:	e7a0      	b.n	8006632 <_dtoa_r+0x622>
 80066f0:	4b6f      	ldr	r3, [pc, #444]	@ (80068b0 <_dtoa_r+0x8a0>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	f7f9 ffa0 	bl	8000638 <__aeabi_dmul>
 80066f8:	2200      	movs	r2, #0
 80066fa:	2300      	movs	r3, #0
 80066fc:	4604      	mov	r4, r0
 80066fe:	460d      	mov	r5, r1
 8006700:	f7fa fa02 	bl	8000b08 <__aeabi_dcmpeq>
 8006704:	2800      	cmp	r0, #0
 8006706:	d09f      	beq.n	8006648 <_dtoa_r+0x638>
 8006708:	e7d1      	b.n	80066ae <_dtoa_r+0x69e>
 800670a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800670c:	2a00      	cmp	r2, #0
 800670e:	f000 80ea 	beq.w	80068e6 <_dtoa_r+0x8d6>
 8006712:	9a07      	ldr	r2, [sp, #28]
 8006714:	2a01      	cmp	r2, #1
 8006716:	f300 80cd 	bgt.w	80068b4 <_dtoa_r+0x8a4>
 800671a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800671c:	2a00      	cmp	r2, #0
 800671e:	f000 80c1 	beq.w	80068a4 <_dtoa_r+0x894>
 8006722:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006726:	9c08      	ldr	r4, [sp, #32]
 8006728:	9e00      	ldr	r6, [sp, #0]
 800672a:	9a00      	ldr	r2, [sp, #0]
 800672c:	441a      	add	r2, r3
 800672e:	9200      	str	r2, [sp, #0]
 8006730:	9a06      	ldr	r2, [sp, #24]
 8006732:	2101      	movs	r1, #1
 8006734:	441a      	add	r2, r3
 8006736:	4648      	mov	r0, r9
 8006738:	9206      	str	r2, [sp, #24]
 800673a:	f000 fc2d 	bl	8006f98 <__i2b>
 800673e:	4605      	mov	r5, r0
 8006740:	b166      	cbz	r6, 800675c <_dtoa_r+0x74c>
 8006742:	9b06      	ldr	r3, [sp, #24]
 8006744:	2b00      	cmp	r3, #0
 8006746:	dd09      	ble.n	800675c <_dtoa_r+0x74c>
 8006748:	42b3      	cmp	r3, r6
 800674a:	9a00      	ldr	r2, [sp, #0]
 800674c:	bfa8      	it	ge
 800674e:	4633      	movge	r3, r6
 8006750:	1ad2      	subs	r2, r2, r3
 8006752:	9200      	str	r2, [sp, #0]
 8006754:	9a06      	ldr	r2, [sp, #24]
 8006756:	1af6      	subs	r6, r6, r3
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	9306      	str	r3, [sp, #24]
 800675c:	9b08      	ldr	r3, [sp, #32]
 800675e:	b30b      	cbz	r3, 80067a4 <_dtoa_r+0x794>
 8006760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 80c6 	beq.w	80068f4 <_dtoa_r+0x8e4>
 8006768:	2c00      	cmp	r4, #0
 800676a:	f000 80c0 	beq.w	80068ee <_dtoa_r+0x8de>
 800676e:	4629      	mov	r1, r5
 8006770:	4622      	mov	r2, r4
 8006772:	4648      	mov	r0, r9
 8006774:	f000 fcc8 	bl	8007108 <__pow5mult>
 8006778:	9a02      	ldr	r2, [sp, #8]
 800677a:	4601      	mov	r1, r0
 800677c:	4605      	mov	r5, r0
 800677e:	4648      	mov	r0, r9
 8006780:	f000 fc20 	bl	8006fc4 <__multiply>
 8006784:	9902      	ldr	r1, [sp, #8]
 8006786:	4680      	mov	r8, r0
 8006788:	4648      	mov	r0, r9
 800678a:	f000 fb51 	bl	8006e30 <_Bfree>
 800678e:	9b08      	ldr	r3, [sp, #32]
 8006790:	1b1b      	subs	r3, r3, r4
 8006792:	9308      	str	r3, [sp, #32]
 8006794:	f000 80b1 	beq.w	80068fa <_dtoa_r+0x8ea>
 8006798:	9a08      	ldr	r2, [sp, #32]
 800679a:	4641      	mov	r1, r8
 800679c:	4648      	mov	r0, r9
 800679e:	f000 fcb3 	bl	8007108 <__pow5mult>
 80067a2:	9002      	str	r0, [sp, #8]
 80067a4:	2101      	movs	r1, #1
 80067a6:	4648      	mov	r0, r9
 80067a8:	f000 fbf6 	bl	8006f98 <__i2b>
 80067ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067ae:	4604      	mov	r4, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 81d8 	beq.w	8006b66 <_dtoa_r+0xb56>
 80067b6:	461a      	mov	r2, r3
 80067b8:	4601      	mov	r1, r0
 80067ba:	4648      	mov	r0, r9
 80067bc:	f000 fca4 	bl	8007108 <__pow5mult>
 80067c0:	9b07      	ldr	r3, [sp, #28]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	4604      	mov	r4, r0
 80067c6:	f300 809f 	bgt.w	8006908 <_dtoa_r+0x8f8>
 80067ca:	9b04      	ldr	r3, [sp, #16]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f040 8097 	bne.w	8006900 <_dtoa_r+0x8f0>
 80067d2:	9b05      	ldr	r3, [sp, #20]
 80067d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f040 8093 	bne.w	8006904 <_dtoa_r+0x8f4>
 80067de:	9b05      	ldr	r3, [sp, #20]
 80067e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067e4:	0d1b      	lsrs	r3, r3, #20
 80067e6:	051b      	lsls	r3, r3, #20
 80067e8:	b133      	cbz	r3, 80067f8 <_dtoa_r+0x7e8>
 80067ea:	9b00      	ldr	r3, [sp, #0]
 80067ec:	3301      	adds	r3, #1
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	9b06      	ldr	r3, [sp, #24]
 80067f2:	3301      	adds	r3, #1
 80067f4:	9306      	str	r3, [sp, #24]
 80067f6:	2301      	movs	r3, #1
 80067f8:	9308      	str	r3, [sp, #32]
 80067fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 81b8 	beq.w	8006b72 <_dtoa_r+0xb62>
 8006802:	6923      	ldr	r3, [r4, #16]
 8006804:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006808:	6918      	ldr	r0, [r3, #16]
 800680a:	f000 fb79 	bl	8006f00 <__hi0bits>
 800680e:	f1c0 0020 	rsb	r0, r0, #32
 8006812:	9b06      	ldr	r3, [sp, #24]
 8006814:	4418      	add	r0, r3
 8006816:	f010 001f 	ands.w	r0, r0, #31
 800681a:	f000 8082 	beq.w	8006922 <_dtoa_r+0x912>
 800681e:	f1c0 0320 	rsb	r3, r0, #32
 8006822:	2b04      	cmp	r3, #4
 8006824:	dd73      	ble.n	800690e <_dtoa_r+0x8fe>
 8006826:	9b00      	ldr	r3, [sp, #0]
 8006828:	f1c0 001c 	rsb	r0, r0, #28
 800682c:	4403      	add	r3, r0
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	9b06      	ldr	r3, [sp, #24]
 8006832:	4403      	add	r3, r0
 8006834:	4406      	add	r6, r0
 8006836:	9306      	str	r3, [sp, #24]
 8006838:	9b00      	ldr	r3, [sp, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	dd05      	ble.n	800684a <_dtoa_r+0x83a>
 800683e:	9902      	ldr	r1, [sp, #8]
 8006840:	461a      	mov	r2, r3
 8006842:	4648      	mov	r0, r9
 8006844:	f000 fcba 	bl	80071bc <__lshift>
 8006848:	9002      	str	r0, [sp, #8]
 800684a:	9b06      	ldr	r3, [sp, #24]
 800684c:	2b00      	cmp	r3, #0
 800684e:	dd05      	ble.n	800685c <_dtoa_r+0x84c>
 8006850:	4621      	mov	r1, r4
 8006852:	461a      	mov	r2, r3
 8006854:	4648      	mov	r0, r9
 8006856:	f000 fcb1 	bl	80071bc <__lshift>
 800685a:	4604      	mov	r4, r0
 800685c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800685e:	2b00      	cmp	r3, #0
 8006860:	d061      	beq.n	8006926 <_dtoa_r+0x916>
 8006862:	9802      	ldr	r0, [sp, #8]
 8006864:	4621      	mov	r1, r4
 8006866:	f000 fd15 	bl	8007294 <__mcmp>
 800686a:	2800      	cmp	r0, #0
 800686c:	da5b      	bge.n	8006926 <_dtoa_r+0x916>
 800686e:	2300      	movs	r3, #0
 8006870:	9902      	ldr	r1, [sp, #8]
 8006872:	220a      	movs	r2, #10
 8006874:	4648      	mov	r0, r9
 8006876:	f000 fafd 	bl	8006e74 <__multadd>
 800687a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800687c:	9002      	str	r0, [sp, #8]
 800687e:	f107 38ff 	add.w	r8, r7, #4294967295
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 8177 	beq.w	8006b76 <_dtoa_r+0xb66>
 8006888:	4629      	mov	r1, r5
 800688a:	2300      	movs	r3, #0
 800688c:	220a      	movs	r2, #10
 800688e:	4648      	mov	r0, r9
 8006890:	f000 faf0 	bl	8006e74 <__multadd>
 8006894:	f1bb 0f00 	cmp.w	fp, #0
 8006898:	4605      	mov	r5, r0
 800689a:	dc6f      	bgt.n	800697c <_dtoa_r+0x96c>
 800689c:	9b07      	ldr	r3, [sp, #28]
 800689e:	2b02      	cmp	r3, #2
 80068a0:	dc49      	bgt.n	8006936 <_dtoa_r+0x926>
 80068a2:	e06b      	b.n	800697c <_dtoa_r+0x96c>
 80068a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80068a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80068aa:	e73c      	b.n	8006726 <_dtoa_r+0x716>
 80068ac:	3fe00000 	.word	0x3fe00000
 80068b0:	40240000 	.word	0x40240000
 80068b4:	9b03      	ldr	r3, [sp, #12]
 80068b6:	1e5c      	subs	r4, r3, #1
 80068b8:	9b08      	ldr	r3, [sp, #32]
 80068ba:	42a3      	cmp	r3, r4
 80068bc:	db09      	blt.n	80068d2 <_dtoa_r+0x8c2>
 80068be:	1b1c      	subs	r4, r3, r4
 80068c0:	9b03      	ldr	r3, [sp, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f6bf af30 	bge.w	8006728 <_dtoa_r+0x718>
 80068c8:	9b00      	ldr	r3, [sp, #0]
 80068ca:	9a03      	ldr	r2, [sp, #12]
 80068cc:	1a9e      	subs	r6, r3, r2
 80068ce:	2300      	movs	r3, #0
 80068d0:	e72b      	b.n	800672a <_dtoa_r+0x71a>
 80068d2:	9b08      	ldr	r3, [sp, #32]
 80068d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80068d6:	9408      	str	r4, [sp, #32]
 80068d8:	1ae3      	subs	r3, r4, r3
 80068da:	441a      	add	r2, r3
 80068dc:	9e00      	ldr	r6, [sp, #0]
 80068de:	9b03      	ldr	r3, [sp, #12]
 80068e0:	920d      	str	r2, [sp, #52]	@ 0x34
 80068e2:	2400      	movs	r4, #0
 80068e4:	e721      	b.n	800672a <_dtoa_r+0x71a>
 80068e6:	9c08      	ldr	r4, [sp, #32]
 80068e8:	9e00      	ldr	r6, [sp, #0]
 80068ea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80068ec:	e728      	b.n	8006740 <_dtoa_r+0x730>
 80068ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80068f2:	e751      	b.n	8006798 <_dtoa_r+0x788>
 80068f4:	9a08      	ldr	r2, [sp, #32]
 80068f6:	9902      	ldr	r1, [sp, #8]
 80068f8:	e750      	b.n	800679c <_dtoa_r+0x78c>
 80068fa:	f8cd 8008 	str.w	r8, [sp, #8]
 80068fe:	e751      	b.n	80067a4 <_dtoa_r+0x794>
 8006900:	2300      	movs	r3, #0
 8006902:	e779      	b.n	80067f8 <_dtoa_r+0x7e8>
 8006904:	9b04      	ldr	r3, [sp, #16]
 8006906:	e777      	b.n	80067f8 <_dtoa_r+0x7e8>
 8006908:	2300      	movs	r3, #0
 800690a:	9308      	str	r3, [sp, #32]
 800690c:	e779      	b.n	8006802 <_dtoa_r+0x7f2>
 800690e:	d093      	beq.n	8006838 <_dtoa_r+0x828>
 8006910:	9a00      	ldr	r2, [sp, #0]
 8006912:	331c      	adds	r3, #28
 8006914:	441a      	add	r2, r3
 8006916:	9200      	str	r2, [sp, #0]
 8006918:	9a06      	ldr	r2, [sp, #24]
 800691a:	441a      	add	r2, r3
 800691c:	441e      	add	r6, r3
 800691e:	9206      	str	r2, [sp, #24]
 8006920:	e78a      	b.n	8006838 <_dtoa_r+0x828>
 8006922:	4603      	mov	r3, r0
 8006924:	e7f4      	b.n	8006910 <_dtoa_r+0x900>
 8006926:	9b03      	ldr	r3, [sp, #12]
 8006928:	2b00      	cmp	r3, #0
 800692a:	46b8      	mov	r8, r7
 800692c:	dc20      	bgt.n	8006970 <_dtoa_r+0x960>
 800692e:	469b      	mov	fp, r3
 8006930:	9b07      	ldr	r3, [sp, #28]
 8006932:	2b02      	cmp	r3, #2
 8006934:	dd1e      	ble.n	8006974 <_dtoa_r+0x964>
 8006936:	f1bb 0f00 	cmp.w	fp, #0
 800693a:	f47f adb1 	bne.w	80064a0 <_dtoa_r+0x490>
 800693e:	4621      	mov	r1, r4
 8006940:	465b      	mov	r3, fp
 8006942:	2205      	movs	r2, #5
 8006944:	4648      	mov	r0, r9
 8006946:	f000 fa95 	bl	8006e74 <__multadd>
 800694a:	4601      	mov	r1, r0
 800694c:	4604      	mov	r4, r0
 800694e:	9802      	ldr	r0, [sp, #8]
 8006950:	f000 fca0 	bl	8007294 <__mcmp>
 8006954:	2800      	cmp	r0, #0
 8006956:	f77f ada3 	ble.w	80064a0 <_dtoa_r+0x490>
 800695a:	4656      	mov	r6, sl
 800695c:	2331      	movs	r3, #49	@ 0x31
 800695e:	f806 3b01 	strb.w	r3, [r6], #1
 8006962:	f108 0801 	add.w	r8, r8, #1
 8006966:	e59f      	b.n	80064a8 <_dtoa_r+0x498>
 8006968:	9c03      	ldr	r4, [sp, #12]
 800696a:	46b8      	mov	r8, r7
 800696c:	4625      	mov	r5, r4
 800696e:	e7f4      	b.n	800695a <_dtoa_r+0x94a>
 8006970:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 8101 	beq.w	8006b7e <_dtoa_r+0xb6e>
 800697c:	2e00      	cmp	r6, #0
 800697e:	dd05      	ble.n	800698c <_dtoa_r+0x97c>
 8006980:	4629      	mov	r1, r5
 8006982:	4632      	mov	r2, r6
 8006984:	4648      	mov	r0, r9
 8006986:	f000 fc19 	bl	80071bc <__lshift>
 800698a:	4605      	mov	r5, r0
 800698c:	9b08      	ldr	r3, [sp, #32]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d05c      	beq.n	8006a4c <_dtoa_r+0xa3c>
 8006992:	6869      	ldr	r1, [r5, #4]
 8006994:	4648      	mov	r0, r9
 8006996:	f000 fa0b 	bl	8006db0 <_Balloc>
 800699a:	4606      	mov	r6, r0
 800699c:	b928      	cbnz	r0, 80069aa <_dtoa_r+0x99a>
 800699e:	4b82      	ldr	r3, [pc, #520]	@ (8006ba8 <_dtoa_r+0xb98>)
 80069a0:	4602      	mov	r2, r0
 80069a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80069a6:	f7ff bb4a 	b.w	800603e <_dtoa_r+0x2e>
 80069aa:	692a      	ldr	r2, [r5, #16]
 80069ac:	3202      	adds	r2, #2
 80069ae:	0092      	lsls	r2, r2, #2
 80069b0:	f105 010c 	add.w	r1, r5, #12
 80069b4:	300c      	adds	r0, #12
 80069b6:	f000 ffa3 	bl	8007900 <memcpy>
 80069ba:	2201      	movs	r2, #1
 80069bc:	4631      	mov	r1, r6
 80069be:	4648      	mov	r0, r9
 80069c0:	f000 fbfc 	bl	80071bc <__lshift>
 80069c4:	f10a 0301 	add.w	r3, sl, #1
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	eb0a 030b 	add.w	r3, sl, fp
 80069ce:	9308      	str	r3, [sp, #32]
 80069d0:	9b04      	ldr	r3, [sp, #16]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	462f      	mov	r7, r5
 80069d8:	9306      	str	r3, [sp, #24]
 80069da:	4605      	mov	r5, r0
 80069dc:	9b00      	ldr	r3, [sp, #0]
 80069de:	9802      	ldr	r0, [sp, #8]
 80069e0:	4621      	mov	r1, r4
 80069e2:	f103 3bff 	add.w	fp, r3, #4294967295
 80069e6:	f7ff fa8a 	bl	8005efe <quorem>
 80069ea:	4603      	mov	r3, r0
 80069ec:	3330      	adds	r3, #48	@ 0x30
 80069ee:	9003      	str	r0, [sp, #12]
 80069f0:	4639      	mov	r1, r7
 80069f2:	9802      	ldr	r0, [sp, #8]
 80069f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80069f6:	f000 fc4d 	bl	8007294 <__mcmp>
 80069fa:	462a      	mov	r2, r5
 80069fc:	9004      	str	r0, [sp, #16]
 80069fe:	4621      	mov	r1, r4
 8006a00:	4648      	mov	r0, r9
 8006a02:	f000 fc63 	bl	80072cc <__mdiff>
 8006a06:	68c2      	ldr	r2, [r0, #12]
 8006a08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a0a:	4606      	mov	r6, r0
 8006a0c:	bb02      	cbnz	r2, 8006a50 <_dtoa_r+0xa40>
 8006a0e:	4601      	mov	r1, r0
 8006a10:	9802      	ldr	r0, [sp, #8]
 8006a12:	f000 fc3f 	bl	8007294 <__mcmp>
 8006a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a18:	4602      	mov	r2, r0
 8006a1a:	4631      	mov	r1, r6
 8006a1c:	4648      	mov	r0, r9
 8006a1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006a20:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a22:	f000 fa05 	bl	8006e30 <_Bfree>
 8006a26:	9b07      	ldr	r3, [sp, #28]
 8006a28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006a2a:	9e00      	ldr	r6, [sp, #0]
 8006a2c:	ea42 0103 	orr.w	r1, r2, r3
 8006a30:	9b06      	ldr	r3, [sp, #24]
 8006a32:	4319      	orrs	r1, r3
 8006a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a36:	d10d      	bne.n	8006a54 <_dtoa_r+0xa44>
 8006a38:	2b39      	cmp	r3, #57	@ 0x39
 8006a3a:	d027      	beq.n	8006a8c <_dtoa_r+0xa7c>
 8006a3c:	9a04      	ldr	r2, [sp, #16]
 8006a3e:	2a00      	cmp	r2, #0
 8006a40:	dd01      	ble.n	8006a46 <_dtoa_r+0xa36>
 8006a42:	9b03      	ldr	r3, [sp, #12]
 8006a44:	3331      	adds	r3, #49	@ 0x31
 8006a46:	f88b 3000 	strb.w	r3, [fp]
 8006a4a:	e52e      	b.n	80064aa <_dtoa_r+0x49a>
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	e7b9      	b.n	80069c4 <_dtoa_r+0x9b4>
 8006a50:	2201      	movs	r2, #1
 8006a52:	e7e2      	b.n	8006a1a <_dtoa_r+0xa0a>
 8006a54:	9904      	ldr	r1, [sp, #16]
 8006a56:	2900      	cmp	r1, #0
 8006a58:	db04      	blt.n	8006a64 <_dtoa_r+0xa54>
 8006a5a:	9807      	ldr	r0, [sp, #28]
 8006a5c:	4301      	orrs	r1, r0
 8006a5e:	9806      	ldr	r0, [sp, #24]
 8006a60:	4301      	orrs	r1, r0
 8006a62:	d120      	bne.n	8006aa6 <_dtoa_r+0xa96>
 8006a64:	2a00      	cmp	r2, #0
 8006a66:	ddee      	ble.n	8006a46 <_dtoa_r+0xa36>
 8006a68:	9902      	ldr	r1, [sp, #8]
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	4648      	mov	r0, r9
 8006a70:	f000 fba4 	bl	80071bc <__lshift>
 8006a74:	4621      	mov	r1, r4
 8006a76:	9002      	str	r0, [sp, #8]
 8006a78:	f000 fc0c 	bl	8007294 <__mcmp>
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	9b00      	ldr	r3, [sp, #0]
 8006a80:	dc02      	bgt.n	8006a88 <_dtoa_r+0xa78>
 8006a82:	d1e0      	bne.n	8006a46 <_dtoa_r+0xa36>
 8006a84:	07da      	lsls	r2, r3, #31
 8006a86:	d5de      	bpl.n	8006a46 <_dtoa_r+0xa36>
 8006a88:	2b39      	cmp	r3, #57	@ 0x39
 8006a8a:	d1da      	bne.n	8006a42 <_dtoa_r+0xa32>
 8006a8c:	2339      	movs	r3, #57	@ 0x39
 8006a8e:	f88b 3000 	strb.w	r3, [fp]
 8006a92:	4633      	mov	r3, r6
 8006a94:	461e      	mov	r6, r3
 8006a96:	3b01      	subs	r3, #1
 8006a98:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006a9c:	2a39      	cmp	r2, #57	@ 0x39
 8006a9e:	d04e      	beq.n	8006b3e <_dtoa_r+0xb2e>
 8006aa0:	3201      	adds	r2, #1
 8006aa2:	701a      	strb	r2, [r3, #0]
 8006aa4:	e501      	b.n	80064aa <_dtoa_r+0x49a>
 8006aa6:	2a00      	cmp	r2, #0
 8006aa8:	dd03      	ble.n	8006ab2 <_dtoa_r+0xaa2>
 8006aaa:	2b39      	cmp	r3, #57	@ 0x39
 8006aac:	d0ee      	beq.n	8006a8c <_dtoa_r+0xa7c>
 8006aae:	3301      	adds	r3, #1
 8006ab0:	e7c9      	b.n	8006a46 <_dtoa_r+0xa36>
 8006ab2:	9a00      	ldr	r2, [sp, #0]
 8006ab4:	9908      	ldr	r1, [sp, #32]
 8006ab6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006aba:	428a      	cmp	r2, r1
 8006abc:	d028      	beq.n	8006b10 <_dtoa_r+0xb00>
 8006abe:	9902      	ldr	r1, [sp, #8]
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	220a      	movs	r2, #10
 8006ac4:	4648      	mov	r0, r9
 8006ac6:	f000 f9d5 	bl	8006e74 <__multadd>
 8006aca:	42af      	cmp	r7, r5
 8006acc:	9002      	str	r0, [sp, #8]
 8006ace:	f04f 0300 	mov.w	r3, #0
 8006ad2:	f04f 020a 	mov.w	r2, #10
 8006ad6:	4639      	mov	r1, r7
 8006ad8:	4648      	mov	r0, r9
 8006ada:	d107      	bne.n	8006aec <_dtoa_r+0xadc>
 8006adc:	f000 f9ca 	bl	8006e74 <__multadd>
 8006ae0:	4607      	mov	r7, r0
 8006ae2:	4605      	mov	r5, r0
 8006ae4:	9b00      	ldr	r3, [sp, #0]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	e777      	b.n	80069dc <_dtoa_r+0x9cc>
 8006aec:	f000 f9c2 	bl	8006e74 <__multadd>
 8006af0:	4629      	mov	r1, r5
 8006af2:	4607      	mov	r7, r0
 8006af4:	2300      	movs	r3, #0
 8006af6:	220a      	movs	r2, #10
 8006af8:	4648      	mov	r0, r9
 8006afa:	f000 f9bb 	bl	8006e74 <__multadd>
 8006afe:	4605      	mov	r5, r0
 8006b00:	e7f0      	b.n	8006ae4 <_dtoa_r+0xad4>
 8006b02:	f1bb 0f00 	cmp.w	fp, #0
 8006b06:	bfcc      	ite	gt
 8006b08:	465e      	movgt	r6, fp
 8006b0a:	2601      	movle	r6, #1
 8006b0c:	4456      	add	r6, sl
 8006b0e:	2700      	movs	r7, #0
 8006b10:	9902      	ldr	r1, [sp, #8]
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	2201      	movs	r2, #1
 8006b16:	4648      	mov	r0, r9
 8006b18:	f000 fb50 	bl	80071bc <__lshift>
 8006b1c:	4621      	mov	r1, r4
 8006b1e:	9002      	str	r0, [sp, #8]
 8006b20:	f000 fbb8 	bl	8007294 <__mcmp>
 8006b24:	2800      	cmp	r0, #0
 8006b26:	dcb4      	bgt.n	8006a92 <_dtoa_r+0xa82>
 8006b28:	d102      	bne.n	8006b30 <_dtoa_r+0xb20>
 8006b2a:	9b00      	ldr	r3, [sp, #0]
 8006b2c:	07db      	lsls	r3, r3, #31
 8006b2e:	d4b0      	bmi.n	8006a92 <_dtoa_r+0xa82>
 8006b30:	4633      	mov	r3, r6
 8006b32:	461e      	mov	r6, r3
 8006b34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b38:	2a30      	cmp	r2, #48	@ 0x30
 8006b3a:	d0fa      	beq.n	8006b32 <_dtoa_r+0xb22>
 8006b3c:	e4b5      	b.n	80064aa <_dtoa_r+0x49a>
 8006b3e:	459a      	cmp	sl, r3
 8006b40:	d1a8      	bne.n	8006a94 <_dtoa_r+0xa84>
 8006b42:	2331      	movs	r3, #49	@ 0x31
 8006b44:	f108 0801 	add.w	r8, r8, #1
 8006b48:	f88a 3000 	strb.w	r3, [sl]
 8006b4c:	e4ad      	b.n	80064aa <_dtoa_r+0x49a>
 8006b4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006bac <_dtoa_r+0xb9c>
 8006b54:	b11b      	cbz	r3, 8006b5e <_dtoa_r+0xb4e>
 8006b56:	f10a 0308 	add.w	r3, sl, #8
 8006b5a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	4650      	mov	r0, sl
 8006b60:	b017      	add	sp, #92	@ 0x5c
 8006b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b66:	9b07      	ldr	r3, [sp, #28]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	f77f ae2e 	ble.w	80067ca <_dtoa_r+0x7ba>
 8006b6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b70:	9308      	str	r3, [sp, #32]
 8006b72:	2001      	movs	r0, #1
 8006b74:	e64d      	b.n	8006812 <_dtoa_r+0x802>
 8006b76:	f1bb 0f00 	cmp.w	fp, #0
 8006b7a:	f77f aed9 	ble.w	8006930 <_dtoa_r+0x920>
 8006b7e:	4656      	mov	r6, sl
 8006b80:	9802      	ldr	r0, [sp, #8]
 8006b82:	4621      	mov	r1, r4
 8006b84:	f7ff f9bb 	bl	8005efe <quorem>
 8006b88:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006b8c:	f806 3b01 	strb.w	r3, [r6], #1
 8006b90:	eba6 020a 	sub.w	r2, r6, sl
 8006b94:	4593      	cmp	fp, r2
 8006b96:	ddb4      	ble.n	8006b02 <_dtoa_r+0xaf2>
 8006b98:	9902      	ldr	r1, [sp, #8]
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	220a      	movs	r2, #10
 8006b9e:	4648      	mov	r0, r9
 8006ba0:	f000 f968 	bl	8006e74 <__multadd>
 8006ba4:	9002      	str	r0, [sp, #8]
 8006ba6:	e7eb      	b.n	8006b80 <_dtoa_r+0xb70>
 8006ba8:	08008dec 	.word	0x08008dec
 8006bac:	08008d70 	.word	0x08008d70

08006bb0 <_free_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	2900      	cmp	r1, #0
 8006bb6:	d041      	beq.n	8006c3c <_free_r+0x8c>
 8006bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bbc:	1f0c      	subs	r4, r1, #4
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	bfb8      	it	lt
 8006bc2:	18e4      	addlt	r4, r4, r3
 8006bc4:	f000 f8e8 	bl	8006d98 <__malloc_lock>
 8006bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c40 <_free_r+0x90>)
 8006bca:	6813      	ldr	r3, [r2, #0]
 8006bcc:	b933      	cbnz	r3, 8006bdc <_free_r+0x2c>
 8006bce:	6063      	str	r3, [r4, #4]
 8006bd0:	6014      	str	r4, [r2, #0]
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bd8:	f000 b8e4 	b.w	8006da4 <__malloc_unlock>
 8006bdc:	42a3      	cmp	r3, r4
 8006bde:	d908      	bls.n	8006bf2 <_free_r+0x42>
 8006be0:	6820      	ldr	r0, [r4, #0]
 8006be2:	1821      	adds	r1, r4, r0
 8006be4:	428b      	cmp	r3, r1
 8006be6:	bf01      	itttt	eq
 8006be8:	6819      	ldreq	r1, [r3, #0]
 8006bea:	685b      	ldreq	r3, [r3, #4]
 8006bec:	1809      	addeq	r1, r1, r0
 8006bee:	6021      	streq	r1, [r4, #0]
 8006bf0:	e7ed      	b.n	8006bce <_free_r+0x1e>
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	b10b      	cbz	r3, 8006bfc <_free_r+0x4c>
 8006bf8:	42a3      	cmp	r3, r4
 8006bfa:	d9fa      	bls.n	8006bf2 <_free_r+0x42>
 8006bfc:	6811      	ldr	r1, [r2, #0]
 8006bfe:	1850      	adds	r0, r2, r1
 8006c00:	42a0      	cmp	r0, r4
 8006c02:	d10b      	bne.n	8006c1c <_free_r+0x6c>
 8006c04:	6820      	ldr	r0, [r4, #0]
 8006c06:	4401      	add	r1, r0
 8006c08:	1850      	adds	r0, r2, r1
 8006c0a:	4283      	cmp	r3, r0
 8006c0c:	6011      	str	r1, [r2, #0]
 8006c0e:	d1e0      	bne.n	8006bd2 <_free_r+0x22>
 8006c10:	6818      	ldr	r0, [r3, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	6053      	str	r3, [r2, #4]
 8006c16:	4408      	add	r0, r1
 8006c18:	6010      	str	r0, [r2, #0]
 8006c1a:	e7da      	b.n	8006bd2 <_free_r+0x22>
 8006c1c:	d902      	bls.n	8006c24 <_free_r+0x74>
 8006c1e:	230c      	movs	r3, #12
 8006c20:	602b      	str	r3, [r5, #0]
 8006c22:	e7d6      	b.n	8006bd2 <_free_r+0x22>
 8006c24:	6820      	ldr	r0, [r4, #0]
 8006c26:	1821      	adds	r1, r4, r0
 8006c28:	428b      	cmp	r3, r1
 8006c2a:	bf04      	itt	eq
 8006c2c:	6819      	ldreq	r1, [r3, #0]
 8006c2e:	685b      	ldreq	r3, [r3, #4]
 8006c30:	6063      	str	r3, [r4, #4]
 8006c32:	bf04      	itt	eq
 8006c34:	1809      	addeq	r1, r1, r0
 8006c36:	6021      	streq	r1, [r4, #0]
 8006c38:	6054      	str	r4, [r2, #4]
 8006c3a:	e7ca      	b.n	8006bd2 <_free_r+0x22>
 8006c3c:	bd38      	pop	{r3, r4, r5, pc}
 8006c3e:	bf00      	nop
 8006c40:	200008a4 	.word	0x200008a4

08006c44 <malloc>:
 8006c44:	4b02      	ldr	r3, [pc, #8]	@ (8006c50 <malloc+0xc>)
 8006c46:	4601      	mov	r1, r0
 8006c48:	6818      	ldr	r0, [r3, #0]
 8006c4a:	f000 b825 	b.w	8006c98 <_malloc_r>
 8006c4e:	bf00      	nop
 8006c50:	20000028 	.word	0x20000028

08006c54 <sbrk_aligned>:
 8006c54:	b570      	push	{r4, r5, r6, lr}
 8006c56:	4e0f      	ldr	r6, [pc, #60]	@ (8006c94 <sbrk_aligned+0x40>)
 8006c58:	460c      	mov	r4, r1
 8006c5a:	6831      	ldr	r1, [r6, #0]
 8006c5c:	4605      	mov	r5, r0
 8006c5e:	b911      	cbnz	r1, 8006c66 <sbrk_aligned+0x12>
 8006c60:	f000 fe3e 	bl	80078e0 <_sbrk_r>
 8006c64:	6030      	str	r0, [r6, #0]
 8006c66:	4621      	mov	r1, r4
 8006c68:	4628      	mov	r0, r5
 8006c6a:	f000 fe39 	bl	80078e0 <_sbrk_r>
 8006c6e:	1c43      	adds	r3, r0, #1
 8006c70:	d103      	bne.n	8006c7a <sbrk_aligned+0x26>
 8006c72:	f04f 34ff 	mov.w	r4, #4294967295
 8006c76:	4620      	mov	r0, r4
 8006c78:	bd70      	pop	{r4, r5, r6, pc}
 8006c7a:	1cc4      	adds	r4, r0, #3
 8006c7c:	f024 0403 	bic.w	r4, r4, #3
 8006c80:	42a0      	cmp	r0, r4
 8006c82:	d0f8      	beq.n	8006c76 <sbrk_aligned+0x22>
 8006c84:	1a21      	subs	r1, r4, r0
 8006c86:	4628      	mov	r0, r5
 8006c88:	f000 fe2a 	bl	80078e0 <_sbrk_r>
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	d1f2      	bne.n	8006c76 <sbrk_aligned+0x22>
 8006c90:	e7ef      	b.n	8006c72 <sbrk_aligned+0x1e>
 8006c92:	bf00      	nop
 8006c94:	200008a0 	.word	0x200008a0

08006c98 <_malloc_r>:
 8006c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c9c:	1ccd      	adds	r5, r1, #3
 8006c9e:	f025 0503 	bic.w	r5, r5, #3
 8006ca2:	3508      	adds	r5, #8
 8006ca4:	2d0c      	cmp	r5, #12
 8006ca6:	bf38      	it	cc
 8006ca8:	250c      	movcc	r5, #12
 8006caa:	2d00      	cmp	r5, #0
 8006cac:	4606      	mov	r6, r0
 8006cae:	db01      	blt.n	8006cb4 <_malloc_r+0x1c>
 8006cb0:	42a9      	cmp	r1, r5
 8006cb2:	d904      	bls.n	8006cbe <_malloc_r+0x26>
 8006cb4:	230c      	movs	r3, #12
 8006cb6:	6033      	str	r3, [r6, #0]
 8006cb8:	2000      	movs	r0, #0
 8006cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d94 <_malloc_r+0xfc>
 8006cc2:	f000 f869 	bl	8006d98 <__malloc_lock>
 8006cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8006cca:	461c      	mov	r4, r3
 8006ccc:	bb44      	cbnz	r4, 8006d20 <_malloc_r+0x88>
 8006cce:	4629      	mov	r1, r5
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	f7ff ffbf 	bl	8006c54 <sbrk_aligned>
 8006cd6:	1c43      	adds	r3, r0, #1
 8006cd8:	4604      	mov	r4, r0
 8006cda:	d158      	bne.n	8006d8e <_malloc_r+0xf6>
 8006cdc:	f8d8 4000 	ldr.w	r4, [r8]
 8006ce0:	4627      	mov	r7, r4
 8006ce2:	2f00      	cmp	r7, #0
 8006ce4:	d143      	bne.n	8006d6e <_malloc_r+0xd6>
 8006ce6:	2c00      	cmp	r4, #0
 8006ce8:	d04b      	beq.n	8006d82 <_malloc_r+0xea>
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	4639      	mov	r1, r7
 8006cee:	4630      	mov	r0, r6
 8006cf0:	eb04 0903 	add.w	r9, r4, r3
 8006cf4:	f000 fdf4 	bl	80078e0 <_sbrk_r>
 8006cf8:	4581      	cmp	r9, r0
 8006cfa:	d142      	bne.n	8006d82 <_malloc_r+0xea>
 8006cfc:	6821      	ldr	r1, [r4, #0]
 8006cfe:	1a6d      	subs	r5, r5, r1
 8006d00:	4629      	mov	r1, r5
 8006d02:	4630      	mov	r0, r6
 8006d04:	f7ff ffa6 	bl	8006c54 <sbrk_aligned>
 8006d08:	3001      	adds	r0, #1
 8006d0a:	d03a      	beq.n	8006d82 <_malloc_r+0xea>
 8006d0c:	6823      	ldr	r3, [r4, #0]
 8006d0e:	442b      	add	r3, r5
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	f8d8 3000 	ldr.w	r3, [r8]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	bb62      	cbnz	r2, 8006d74 <_malloc_r+0xdc>
 8006d1a:	f8c8 7000 	str.w	r7, [r8]
 8006d1e:	e00f      	b.n	8006d40 <_malloc_r+0xa8>
 8006d20:	6822      	ldr	r2, [r4, #0]
 8006d22:	1b52      	subs	r2, r2, r5
 8006d24:	d420      	bmi.n	8006d68 <_malloc_r+0xd0>
 8006d26:	2a0b      	cmp	r2, #11
 8006d28:	d917      	bls.n	8006d5a <_malloc_r+0xc2>
 8006d2a:	1961      	adds	r1, r4, r5
 8006d2c:	42a3      	cmp	r3, r4
 8006d2e:	6025      	str	r5, [r4, #0]
 8006d30:	bf18      	it	ne
 8006d32:	6059      	strne	r1, [r3, #4]
 8006d34:	6863      	ldr	r3, [r4, #4]
 8006d36:	bf08      	it	eq
 8006d38:	f8c8 1000 	streq.w	r1, [r8]
 8006d3c:	5162      	str	r2, [r4, r5]
 8006d3e:	604b      	str	r3, [r1, #4]
 8006d40:	4630      	mov	r0, r6
 8006d42:	f000 f82f 	bl	8006da4 <__malloc_unlock>
 8006d46:	f104 000b 	add.w	r0, r4, #11
 8006d4a:	1d23      	adds	r3, r4, #4
 8006d4c:	f020 0007 	bic.w	r0, r0, #7
 8006d50:	1ac2      	subs	r2, r0, r3
 8006d52:	bf1c      	itt	ne
 8006d54:	1a1b      	subne	r3, r3, r0
 8006d56:	50a3      	strne	r3, [r4, r2]
 8006d58:	e7af      	b.n	8006cba <_malloc_r+0x22>
 8006d5a:	6862      	ldr	r2, [r4, #4]
 8006d5c:	42a3      	cmp	r3, r4
 8006d5e:	bf0c      	ite	eq
 8006d60:	f8c8 2000 	streq.w	r2, [r8]
 8006d64:	605a      	strne	r2, [r3, #4]
 8006d66:	e7eb      	b.n	8006d40 <_malloc_r+0xa8>
 8006d68:	4623      	mov	r3, r4
 8006d6a:	6864      	ldr	r4, [r4, #4]
 8006d6c:	e7ae      	b.n	8006ccc <_malloc_r+0x34>
 8006d6e:	463c      	mov	r4, r7
 8006d70:	687f      	ldr	r7, [r7, #4]
 8006d72:	e7b6      	b.n	8006ce2 <_malloc_r+0x4a>
 8006d74:	461a      	mov	r2, r3
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	42a3      	cmp	r3, r4
 8006d7a:	d1fb      	bne.n	8006d74 <_malloc_r+0xdc>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	6053      	str	r3, [r2, #4]
 8006d80:	e7de      	b.n	8006d40 <_malloc_r+0xa8>
 8006d82:	230c      	movs	r3, #12
 8006d84:	6033      	str	r3, [r6, #0]
 8006d86:	4630      	mov	r0, r6
 8006d88:	f000 f80c 	bl	8006da4 <__malloc_unlock>
 8006d8c:	e794      	b.n	8006cb8 <_malloc_r+0x20>
 8006d8e:	6005      	str	r5, [r0, #0]
 8006d90:	e7d6      	b.n	8006d40 <_malloc_r+0xa8>
 8006d92:	bf00      	nop
 8006d94:	200008a4 	.word	0x200008a4

08006d98 <__malloc_lock>:
 8006d98:	4801      	ldr	r0, [pc, #4]	@ (8006da0 <__malloc_lock+0x8>)
 8006d9a:	f7ff b8ae 	b.w	8005efa <__retarget_lock_acquire_recursive>
 8006d9e:	bf00      	nop
 8006da0:	2000089c 	.word	0x2000089c

08006da4 <__malloc_unlock>:
 8006da4:	4801      	ldr	r0, [pc, #4]	@ (8006dac <__malloc_unlock+0x8>)
 8006da6:	f7ff b8a9 	b.w	8005efc <__retarget_lock_release_recursive>
 8006daa:	bf00      	nop
 8006dac:	2000089c 	.word	0x2000089c

08006db0 <_Balloc>:
 8006db0:	b570      	push	{r4, r5, r6, lr}
 8006db2:	69c6      	ldr	r6, [r0, #28]
 8006db4:	4604      	mov	r4, r0
 8006db6:	460d      	mov	r5, r1
 8006db8:	b976      	cbnz	r6, 8006dd8 <_Balloc+0x28>
 8006dba:	2010      	movs	r0, #16
 8006dbc:	f7ff ff42 	bl	8006c44 <malloc>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	61e0      	str	r0, [r4, #28]
 8006dc4:	b920      	cbnz	r0, 8006dd0 <_Balloc+0x20>
 8006dc6:	4b18      	ldr	r3, [pc, #96]	@ (8006e28 <_Balloc+0x78>)
 8006dc8:	4818      	ldr	r0, [pc, #96]	@ (8006e2c <_Balloc+0x7c>)
 8006dca:	216b      	movs	r1, #107	@ 0x6b
 8006dcc:	f000 fda6 	bl	800791c <__assert_func>
 8006dd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dd4:	6006      	str	r6, [r0, #0]
 8006dd6:	60c6      	str	r6, [r0, #12]
 8006dd8:	69e6      	ldr	r6, [r4, #28]
 8006dda:	68f3      	ldr	r3, [r6, #12]
 8006ddc:	b183      	cbz	r3, 8006e00 <_Balloc+0x50>
 8006dde:	69e3      	ldr	r3, [r4, #28]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006de6:	b9b8      	cbnz	r0, 8006e18 <_Balloc+0x68>
 8006de8:	2101      	movs	r1, #1
 8006dea:	fa01 f605 	lsl.w	r6, r1, r5
 8006dee:	1d72      	adds	r2, r6, #5
 8006df0:	0092      	lsls	r2, r2, #2
 8006df2:	4620      	mov	r0, r4
 8006df4:	f000 fdb0 	bl	8007958 <_calloc_r>
 8006df8:	b160      	cbz	r0, 8006e14 <_Balloc+0x64>
 8006dfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006dfe:	e00e      	b.n	8006e1e <_Balloc+0x6e>
 8006e00:	2221      	movs	r2, #33	@ 0x21
 8006e02:	2104      	movs	r1, #4
 8006e04:	4620      	mov	r0, r4
 8006e06:	f000 fda7 	bl	8007958 <_calloc_r>
 8006e0a:	69e3      	ldr	r3, [r4, #28]
 8006e0c:	60f0      	str	r0, [r6, #12]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1e4      	bne.n	8006dde <_Balloc+0x2e>
 8006e14:	2000      	movs	r0, #0
 8006e16:	bd70      	pop	{r4, r5, r6, pc}
 8006e18:	6802      	ldr	r2, [r0, #0]
 8006e1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e1e:	2300      	movs	r3, #0
 8006e20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e24:	e7f7      	b.n	8006e16 <_Balloc+0x66>
 8006e26:	bf00      	nop
 8006e28:	08008d7d 	.word	0x08008d7d
 8006e2c:	08008dfd 	.word	0x08008dfd

08006e30 <_Bfree>:
 8006e30:	b570      	push	{r4, r5, r6, lr}
 8006e32:	69c6      	ldr	r6, [r0, #28]
 8006e34:	4605      	mov	r5, r0
 8006e36:	460c      	mov	r4, r1
 8006e38:	b976      	cbnz	r6, 8006e58 <_Bfree+0x28>
 8006e3a:	2010      	movs	r0, #16
 8006e3c:	f7ff ff02 	bl	8006c44 <malloc>
 8006e40:	4602      	mov	r2, r0
 8006e42:	61e8      	str	r0, [r5, #28]
 8006e44:	b920      	cbnz	r0, 8006e50 <_Bfree+0x20>
 8006e46:	4b09      	ldr	r3, [pc, #36]	@ (8006e6c <_Bfree+0x3c>)
 8006e48:	4809      	ldr	r0, [pc, #36]	@ (8006e70 <_Bfree+0x40>)
 8006e4a:	218f      	movs	r1, #143	@ 0x8f
 8006e4c:	f000 fd66 	bl	800791c <__assert_func>
 8006e50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e54:	6006      	str	r6, [r0, #0]
 8006e56:	60c6      	str	r6, [r0, #12]
 8006e58:	b13c      	cbz	r4, 8006e6a <_Bfree+0x3a>
 8006e5a:	69eb      	ldr	r3, [r5, #28]
 8006e5c:	6862      	ldr	r2, [r4, #4]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e64:	6021      	str	r1, [r4, #0]
 8006e66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e6a:	bd70      	pop	{r4, r5, r6, pc}
 8006e6c:	08008d7d 	.word	0x08008d7d
 8006e70:	08008dfd 	.word	0x08008dfd

08006e74 <__multadd>:
 8006e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e78:	690d      	ldr	r5, [r1, #16]
 8006e7a:	4607      	mov	r7, r0
 8006e7c:	460c      	mov	r4, r1
 8006e7e:	461e      	mov	r6, r3
 8006e80:	f101 0c14 	add.w	ip, r1, #20
 8006e84:	2000      	movs	r0, #0
 8006e86:	f8dc 3000 	ldr.w	r3, [ip]
 8006e8a:	b299      	uxth	r1, r3
 8006e8c:	fb02 6101 	mla	r1, r2, r1, r6
 8006e90:	0c1e      	lsrs	r6, r3, #16
 8006e92:	0c0b      	lsrs	r3, r1, #16
 8006e94:	fb02 3306 	mla	r3, r2, r6, r3
 8006e98:	b289      	uxth	r1, r1
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ea0:	4285      	cmp	r5, r0
 8006ea2:	f84c 1b04 	str.w	r1, [ip], #4
 8006ea6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006eaa:	dcec      	bgt.n	8006e86 <__multadd+0x12>
 8006eac:	b30e      	cbz	r6, 8006ef2 <__multadd+0x7e>
 8006eae:	68a3      	ldr	r3, [r4, #8]
 8006eb0:	42ab      	cmp	r3, r5
 8006eb2:	dc19      	bgt.n	8006ee8 <__multadd+0x74>
 8006eb4:	6861      	ldr	r1, [r4, #4]
 8006eb6:	4638      	mov	r0, r7
 8006eb8:	3101      	adds	r1, #1
 8006eba:	f7ff ff79 	bl	8006db0 <_Balloc>
 8006ebe:	4680      	mov	r8, r0
 8006ec0:	b928      	cbnz	r0, 8006ece <__multadd+0x5a>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef8 <__multadd+0x84>)
 8006ec6:	480d      	ldr	r0, [pc, #52]	@ (8006efc <__multadd+0x88>)
 8006ec8:	21ba      	movs	r1, #186	@ 0xba
 8006eca:	f000 fd27 	bl	800791c <__assert_func>
 8006ece:	6922      	ldr	r2, [r4, #16]
 8006ed0:	3202      	adds	r2, #2
 8006ed2:	f104 010c 	add.w	r1, r4, #12
 8006ed6:	0092      	lsls	r2, r2, #2
 8006ed8:	300c      	adds	r0, #12
 8006eda:	f000 fd11 	bl	8007900 <memcpy>
 8006ede:	4621      	mov	r1, r4
 8006ee0:	4638      	mov	r0, r7
 8006ee2:	f7ff ffa5 	bl	8006e30 <_Bfree>
 8006ee6:	4644      	mov	r4, r8
 8006ee8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006eec:	3501      	adds	r5, #1
 8006eee:	615e      	str	r6, [r3, #20]
 8006ef0:	6125      	str	r5, [r4, #16]
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ef8:	08008dec 	.word	0x08008dec
 8006efc:	08008dfd 	.word	0x08008dfd

08006f00 <__hi0bits>:
 8006f00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006f04:	4603      	mov	r3, r0
 8006f06:	bf36      	itet	cc
 8006f08:	0403      	lslcc	r3, r0, #16
 8006f0a:	2000      	movcs	r0, #0
 8006f0c:	2010      	movcc	r0, #16
 8006f0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f12:	bf3c      	itt	cc
 8006f14:	021b      	lslcc	r3, r3, #8
 8006f16:	3008      	addcc	r0, #8
 8006f18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f1c:	bf3c      	itt	cc
 8006f1e:	011b      	lslcc	r3, r3, #4
 8006f20:	3004      	addcc	r0, #4
 8006f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f26:	bf3c      	itt	cc
 8006f28:	009b      	lslcc	r3, r3, #2
 8006f2a:	3002      	addcc	r0, #2
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	db05      	blt.n	8006f3c <__hi0bits+0x3c>
 8006f30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006f34:	f100 0001 	add.w	r0, r0, #1
 8006f38:	bf08      	it	eq
 8006f3a:	2020      	moveq	r0, #32
 8006f3c:	4770      	bx	lr

08006f3e <__lo0bits>:
 8006f3e:	6803      	ldr	r3, [r0, #0]
 8006f40:	4602      	mov	r2, r0
 8006f42:	f013 0007 	ands.w	r0, r3, #7
 8006f46:	d00b      	beq.n	8006f60 <__lo0bits+0x22>
 8006f48:	07d9      	lsls	r1, r3, #31
 8006f4a:	d421      	bmi.n	8006f90 <__lo0bits+0x52>
 8006f4c:	0798      	lsls	r0, r3, #30
 8006f4e:	bf49      	itett	mi
 8006f50:	085b      	lsrmi	r3, r3, #1
 8006f52:	089b      	lsrpl	r3, r3, #2
 8006f54:	2001      	movmi	r0, #1
 8006f56:	6013      	strmi	r3, [r2, #0]
 8006f58:	bf5c      	itt	pl
 8006f5a:	6013      	strpl	r3, [r2, #0]
 8006f5c:	2002      	movpl	r0, #2
 8006f5e:	4770      	bx	lr
 8006f60:	b299      	uxth	r1, r3
 8006f62:	b909      	cbnz	r1, 8006f68 <__lo0bits+0x2a>
 8006f64:	0c1b      	lsrs	r3, r3, #16
 8006f66:	2010      	movs	r0, #16
 8006f68:	b2d9      	uxtb	r1, r3
 8006f6a:	b909      	cbnz	r1, 8006f70 <__lo0bits+0x32>
 8006f6c:	3008      	adds	r0, #8
 8006f6e:	0a1b      	lsrs	r3, r3, #8
 8006f70:	0719      	lsls	r1, r3, #28
 8006f72:	bf04      	itt	eq
 8006f74:	091b      	lsreq	r3, r3, #4
 8006f76:	3004      	addeq	r0, #4
 8006f78:	0799      	lsls	r1, r3, #30
 8006f7a:	bf04      	itt	eq
 8006f7c:	089b      	lsreq	r3, r3, #2
 8006f7e:	3002      	addeq	r0, #2
 8006f80:	07d9      	lsls	r1, r3, #31
 8006f82:	d403      	bmi.n	8006f8c <__lo0bits+0x4e>
 8006f84:	085b      	lsrs	r3, r3, #1
 8006f86:	f100 0001 	add.w	r0, r0, #1
 8006f8a:	d003      	beq.n	8006f94 <__lo0bits+0x56>
 8006f8c:	6013      	str	r3, [r2, #0]
 8006f8e:	4770      	bx	lr
 8006f90:	2000      	movs	r0, #0
 8006f92:	4770      	bx	lr
 8006f94:	2020      	movs	r0, #32
 8006f96:	4770      	bx	lr

08006f98 <__i2b>:
 8006f98:	b510      	push	{r4, lr}
 8006f9a:	460c      	mov	r4, r1
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	f7ff ff07 	bl	8006db0 <_Balloc>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	b928      	cbnz	r0, 8006fb2 <__i2b+0x1a>
 8006fa6:	4b05      	ldr	r3, [pc, #20]	@ (8006fbc <__i2b+0x24>)
 8006fa8:	4805      	ldr	r0, [pc, #20]	@ (8006fc0 <__i2b+0x28>)
 8006faa:	f240 1145 	movw	r1, #325	@ 0x145
 8006fae:	f000 fcb5 	bl	800791c <__assert_func>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	6144      	str	r4, [r0, #20]
 8006fb6:	6103      	str	r3, [r0, #16]
 8006fb8:	bd10      	pop	{r4, pc}
 8006fba:	bf00      	nop
 8006fbc:	08008dec 	.word	0x08008dec
 8006fc0:	08008dfd 	.word	0x08008dfd

08006fc4 <__multiply>:
 8006fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc8:	4617      	mov	r7, r2
 8006fca:	690a      	ldr	r2, [r1, #16]
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	bfa8      	it	ge
 8006fd2:	463b      	movge	r3, r7
 8006fd4:	4689      	mov	r9, r1
 8006fd6:	bfa4      	itt	ge
 8006fd8:	460f      	movge	r7, r1
 8006fda:	4699      	movge	r9, r3
 8006fdc:	693d      	ldr	r5, [r7, #16]
 8006fde:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	6879      	ldr	r1, [r7, #4]
 8006fe6:	eb05 060a 	add.w	r6, r5, sl
 8006fea:	42b3      	cmp	r3, r6
 8006fec:	b085      	sub	sp, #20
 8006fee:	bfb8      	it	lt
 8006ff0:	3101      	addlt	r1, #1
 8006ff2:	f7ff fedd 	bl	8006db0 <_Balloc>
 8006ff6:	b930      	cbnz	r0, 8007006 <__multiply+0x42>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	4b41      	ldr	r3, [pc, #260]	@ (8007100 <__multiply+0x13c>)
 8006ffc:	4841      	ldr	r0, [pc, #260]	@ (8007104 <__multiply+0x140>)
 8006ffe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007002:	f000 fc8b 	bl	800791c <__assert_func>
 8007006:	f100 0414 	add.w	r4, r0, #20
 800700a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800700e:	4623      	mov	r3, r4
 8007010:	2200      	movs	r2, #0
 8007012:	4573      	cmp	r3, lr
 8007014:	d320      	bcc.n	8007058 <__multiply+0x94>
 8007016:	f107 0814 	add.w	r8, r7, #20
 800701a:	f109 0114 	add.w	r1, r9, #20
 800701e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007022:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007026:	9302      	str	r3, [sp, #8]
 8007028:	1beb      	subs	r3, r5, r7
 800702a:	3b15      	subs	r3, #21
 800702c:	f023 0303 	bic.w	r3, r3, #3
 8007030:	3304      	adds	r3, #4
 8007032:	3715      	adds	r7, #21
 8007034:	42bd      	cmp	r5, r7
 8007036:	bf38      	it	cc
 8007038:	2304      	movcc	r3, #4
 800703a:	9301      	str	r3, [sp, #4]
 800703c:	9b02      	ldr	r3, [sp, #8]
 800703e:	9103      	str	r1, [sp, #12]
 8007040:	428b      	cmp	r3, r1
 8007042:	d80c      	bhi.n	800705e <__multiply+0x9a>
 8007044:	2e00      	cmp	r6, #0
 8007046:	dd03      	ble.n	8007050 <__multiply+0x8c>
 8007048:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800704c:	2b00      	cmp	r3, #0
 800704e:	d055      	beq.n	80070fc <__multiply+0x138>
 8007050:	6106      	str	r6, [r0, #16]
 8007052:	b005      	add	sp, #20
 8007054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007058:	f843 2b04 	str.w	r2, [r3], #4
 800705c:	e7d9      	b.n	8007012 <__multiply+0x4e>
 800705e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007062:	f1ba 0f00 	cmp.w	sl, #0
 8007066:	d01f      	beq.n	80070a8 <__multiply+0xe4>
 8007068:	46c4      	mov	ip, r8
 800706a:	46a1      	mov	r9, r4
 800706c:	2700      	movs	r7, #0
 800706e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007072:	f8d9 3000 	ldr.w	r3, [r9]
 8007076:	fa1f fb82 	uxth.w	fp, r2
 800707a:	b29b      	uxth	r3, r3
 800707c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007080:	443b      	add	r3, r7
 8007082:	f8d9 7000 	ldr.w	r7, [r9]
 8007086:	0c12      	lsrs	r2, r2, #16
 8007088:	0c3f      	lsrs	r7, r7, #16
 800708a:	fb0a 7202 	mla	r2, sl, r2, r7
 800708e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007092:	b29b      	uxth	r3, r3
 8007094:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007098:	4565      	cmp	r5, ip
 800709a:	f849 3b04 	str.w	r3, [r9], #4
 800709e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80070a2:	d8e4      	bhi.n	800706e <__multiply+0xaa>
 80070a4:	9b01      	ldr	r3, [sp, #4]
 80070a6:	50e7      	str	r7, [r4, r3]
 80070a8:	9b03      	ldr	r3, [sp, #12]
 80070aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80070ae:	3104      	adds	r1, #4
 80070b0:	f1b9 0f00 	cmp.w	r9, #0
 80070b4:	d020      	beq.n	80070f8 <__multiply+0x134>
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	4647      	mov	r7, r8
 80070ba:	46a4      	mov	ip, r4
 80070bc:	f04f 0a00 	mov.w	sl, #0
 80070c0:	f8b7 b000 	ldrh.w	fp, [r7]
 80070c4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80070c8:	fb09 220b 	mla	r2, r9, fp, r2
 80070cc:	4452      	add	r2, sl
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070d4:	f84c 3b04 	str.w	r3, [ip], #4
 80070d8:	f857 3b04 	ldr.w	r3, [r7], #4
 80070dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070e0:	f8bc 3000 	ldrh.w	r3, [ip]
 80070e4:	fb09 330a 	mla	r3, r9, sl, r3
 80070e8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80070ec:	42bd      	cmp	r5, r7
 80070ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070f2:	d8e5      	bhi.n	80070c0 <__multiply+0xfc>
 80070f4:	9a01      	ldr	r2, [sp, #4]
 80070f6:	50a3      	str	r3, [r4, r2]
 80070f8:	3404      	adds	r4, #4
 80070fa:	e79f      	b.n	800703c <__multiply+0x78>
 80070fc:	3e01      	subs	r6, #1
 80070fe:	e7a1      	b.n	8007044 <__multiply+0x80>
 8007100:	08008dec 	.word	0x08008dec
 8007104:	08008dfd 	.word	0x08008dfd

08007108 <__pow5mult>:
 8007108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800710c:	4615      	mov	r5, r2
 800710e:	f012 0203 	ands.w	r2, r2, #3
 8007112:	4607      	mov	r7, r0
 8007114:	460e      	mov	r6, r1
 8007116:	d007      	beq.n	8007128 <__pow5mult+0x20>
 8007118:	4c25      	ldr	r4, [pc, #148]	@ (80071b0 <__pow5mult+0xa8>)
 800711a:	3a01      	subs	r2, #1
 800711c:	2300      	movs	r3, #0
 800711e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007122:	f7ff fea7 	bl	8006e74 <__multadd>
 8007126:	4606      	mov	r6, r0
 8007128:	10ad      	asrs	r5, r5, #2
 800712a:	d03d      	beq.n	80071a8 <__pow5mult+0xa0>
 800712c:	69fc      	ldr	r4, [r7, #28]
 800712e:	b97c      	cbnz	r4, 8007150 <__pow5mult+0x48>
 8007130:	2010      	movs	r0, #16
 8007132:	f7ff fd87 	bl	8006c44 <malloc>
 8007136:	4602      	mov	r2, r0
 8007138:	61f8      	str	r0, [r7, #28]
 800713a:	b928      	cbnz	r0, 8007148 <__pow5mult+0x40>
 800713c:	4b1d      	ldr	r3, [pc, #116]	@ (80071b4 <__pow5mult+0xac>)
 800713e:	481e      	ldr	r0, [pc, #120]	@ (80071b8 <__pow5mult+0xb0>)
 8007140:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007144:	f000 fbea 	bl	800791c <__assert_func>
 8007148:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800714c:	6004      	str	r4, [r0, #0]
 800714e:	60c4      	str	r4, [r0, #12]
 8007150:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007154:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007158:	b94c      	cbnz	r4, 800716e <__pow5mult+0x66>
 800715a:	f240 2171 	movw	r1, #625	@ 0x271
 800715e:	4638      	mov	r0, r7
 8007160:	f7ff ff1a 	bl	8006f98 <__i2b>
 8007164:	2300      	movs	r3, #0
 8007166:	f8c8 0008 	str.w	r0, [r8, #8]
 800716a:	4604      	mov	r4, r0
 800716c:	6003      	str	r3, [r0, #0]
 800716e:	f04f 0900 	mov.w	r9, #0
 8007172:	07eb      	lsls	r3, r5, #31
 8007174:	d50a      	bpl.n	800718c <__pow5mult+0x84>
 8007176:	4631      	mov	r1, r6
 8007178:	4622      	mov	r2, r4
 800717a:	4638      	mov	r0, r7
 800717c:	f7ff ff22 	bl	8006fc4 <__multiply>
 8007180:	4631      	mov	r1, r6
 8007182:	4680      	mov	r8, r0
 8007184:	4638      	mov	r0, r7
 8007186:	f7ff fe53 	bl	8006e30 <_Bfree>
 800718a:	4646      	mov	r6, r8
 800718c:	106d      	asrs	r5, r5, #1
 800718e:	d00b      	beq.n	80071a8 <__pow5mult+0xa0>
 8007190:	6820      	ldr	r0, [r4, #0]
 8007192:	b938      	cbnz	r0, 80071a4 <__pow5mult+0x9c>
 8007194:	4622      	mov	r2, r4
 8007196:	4621      	mov	r1, r4
 8007198:	4638      	mov	r0, r7
 800719a:	f7ff ff13 	bl	8006fc4 <__multiply>
 800719e:	6020      	str	r0, [r4, #0]
 80071a0:	f8c0 9000 	str.w	r9, [r0]
 80071a4:	4604      	mov	r4, r0
 80071a6:	e7e4      	b.n	8007172 <__pow5mult+0x6a>
 80071a8:	4630      	mov	r0, r6
 80071aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ae:	bf00      	nop
 80071b0:	08008eb0 	.word	0x08008eb0
 80071b4:	08008d7d 	.word	0x08008d7d
 80071b8:	08008dfd 	.word	0x08008dfd

080071bc <__lshift>:
 80071bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071c0:	460c      	mov	r4, r1
 80071c2:	6849      	ldr	r1, [r1, #4]
 80071c4:	6923      	ldr	r3, [r4, #16]
 80071c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071ca:	68a3      	ldr	r3, [r4, #8]
 80071cc:	4607      	mov	r7, r0
 80071ce:	4691      	mov	r9, r2
 80071d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071d4:	f108 0601 	add.w	r6, r8, #1
 80071d8:	42b3      	cmp	r3, r6
 80071da:	db0b      	blt.n	80071f4 <__lshift+0x38>
 80071dc:	4638      	mov	r0, r7
 80071de:	f7ff fde7 	bl	8006db0 <_Balloc>
 80071e2:	4605      	mov	r5, r0
 80071e4:	b948      	cbnz	r0, 80071fa <__lshift+0x3e>
 80071e6:	4602      	mov	r2, r0
 80071e8:	4b28      	ldr	r3, [pc, #160]	@ (800728c <__lshift+0xd0>)
 80071ea:	4829      	ldr	r0, [pc, #164]	@ (8007290 <__lshift+0xd4>)
 80071ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80071f0:	f000 fb94 	bl	800791c <__assert_func>
 80071f4:	3101      	adds	r1, #1
 80071f6:	005b      	lsls	r3, r3, #1
 80071f8:	e7ee      	b.n	80071d8 <__lshift+0x1c>
 80071fa:	2300      	movs	r3, #0
 80071fc:	f100 0114 	add.w	r1, r0, #20
 8007200:	f100 0210 	add.w	r2, r0, #16
 8007204:	4618      	mov	r0, r3
 8007206:	4553      	cmp	r3, sl
 8007208:	db33      	blt.n	8007272 <__lshift+0xb6>
 800720a:	6920      	ldr	r0, [r4, #16]
 800720c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007210:	f104 0314 	add.w	r3, r4, #20
 8007214:	f019 091f 	ands.w	r9, r9, #31
 8007218:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800721c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007220:	d02b      	beq.n	800727a <__lshift+0xbe>
 8007222:	f1c9 0e20 	rsb	lr, r9, #32
 8007226:	468a      	mov	sl, r1
 8007228:	2200      	movs	r2, #0
 800722a:	6818      	ldr	r0, [r3, #0]
 800722c:	fa00 f009 	lsl.w	r0, r0, r9
 8007230:	4310      	orrs	r0, r2
 8007232:	f84a 0b04 	str.w	r0, [sl], #4
 8007236:	f853 2b04 	ldr.w	r2, [r3], #4
 800723a:	459c      	cmp	ip, r3
 800723c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007240:	d8f3      	bhi.n	800722a <__lshift+0x6e>
 8007242:	ebac 0304 	sub.w	r3, ip, r4
 8007246:	3b15      	subs	r3, #21
 8007248:	f023 0303 	bic.w	r3, r3, #3
 800724c:	3304      	adds	r3, #4
 800724e:	f104 0015 	add.w	r0, r4, #21
 8007252:	4560      	cmp	r0, ip
 8007254:	bf88      	it	hi
 8007256:	2304      	movhi	r3, #4
 8007258:	50ca      	str	r2, [r1, r3]
 800725a:	b10a      	cbz	r2, 8007260 <__lshift+0xa4>
 800725c:	f108 0602 	add.w	r6, r8, #2
 8007260:	3e01      	subs	r6, #1
 8007262:	4638      	mov	r0, r7
 8007264:	612e      	str	r6, [r5, #16]
 8007266:	4621      	mov	r1, r4
 8007268:	f7ff fde2 	bl	8006e30 <_Bfree>
 800726c:	4628      	mov	r0, r5
 800726e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007272:	f842 0f04 	str.w	r0, [r2, #4]!
 8007276:	3301      	adds	r3, #1
 8007278:	e7c5      	b.n	8007206 <__lshift+0x4a>
 800727a:	3904      	subs	r1, #4
 800727c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007280:	f841 2f04 	str.w	r2, [r1, #4]!
 8007284:	459c      	cmp	ip, r3
 8007286:	d8f9      	bhi.n	800727c <__lshift+0xc0>
 8007288:	e7ea      	b.n	8007260 <__lshift+0xa4>
 800728a:	bf00      	nop
 800728c:	08008dec 	.word	0x08008dec
 8007290:	08008dfd 	.word	0x08008dfd

08007294 <__mcmp>:
 8007294:	690a      	ldr	r2, [r1, #16]
 8007296:	4603      	mov	r3, r0
 8007298:	6900      	ldr	r0, [r0, #16]
 800729a:	1a80      	subs	r0, r0, r2
 800729c:	b530      	push	{r4, r5, lr}
 800729e:	d10e      	bne.n	80072be <__mcmp+0x2a>
 80072a0:	3314      	adds	r3, #20
 80072a2:	3114      	adds	r1, #20
 80072a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80072a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80072ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80072b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80072b4:	4295      	cmp	r5, r2
 80072b6:	d003      	beq.n	80072c0 <__mcmp+0x2c>
 80072b8:	d205      	bcs.n	80072c6 <__mcmp+0x32>
 80072ba:	f04f 30ff 	mov.w	r0, #4294967295
 80072be:	bd30      	pop	{r4, r5, pc}
 80072c0:	42a3      	cmp	r3, r4
 80072c2:	d3f3      	bcc.n	80072ac <__mcmp+0x18>
 80072c4:	e7fb      	b.n	80072be <__mcmp+0x2a>
 80072c6:	2001      	movs	r0, #1
 80072c8:	e7f9      	b.n	80072be <__mcmp+0x2a>
	...

080072cc <__mdiff>:
 80072cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d0:	4689      	mov	r9, r1
 80072d2:	4606      	mov	r6, r0
 80072d4:	4611      	mov	r1, r2
 80072d6:	4648      	mov	r0, r9
 80072d8:	4614      	mov	r4, r2
 80072da:	f7ff ffdb 	bl	8007294 <__mcmp>
 80072de:	1e05      	subs	r5, r0, #0
 80072e0:	d112      	bne.n	8007308 <__mdiff+0x3c>
 80072e2:	4629      	mov	r1, r5
 80072e4:	4630      	mov	r0, r6
 80072e6:	f7ff fd63 	bl	8006db0 <_Balloc>
 80072ea:	4602      	mov	r2, r0
 80072ec:	b928      	cbnz	r0, 80072fa <__mdiff+0x2e>
 80072ee:	4b3f      	ldr	r3, [pc, #252]	@ (80073ec <__mdiff+0x120>)
 80072f0:	f240 2137 	movw	r1, #567	@ 0x237
 80072f4:	483e      	ldr	r0, [pc, #248]	@ (80073f0 <__mdiff+0x124>)
 80072f6:	f000 fb11 	bl	800791c <__assert_func>
 80072fa:	2301      	movs	r3, #1
 80072fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007300:	4610      	mov	r0, r2
 8007302:	b003      	add	sp, #12
 8007304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007308:	bfbc      	itt	lt
 800730a:	464b      	movlt	r3, r9
 800730c:	46a1      	movlt	r9, r4
 800730e:	4630      	mov	r0, r6
 8007310:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007314:	bfba      	itte	lt
 8007316:	461c      	movlt	r4, r3
 8007318:	2501      	movlt	r5, #1
 800731a:	2500      	movge	r5, #0
 800731c:	f7ff fd48 	bl	8006db0 <_Balloc>
 8007320:	4602      	mov	r2, r0
 8007322:	b918      	cbnz	r0, 800732c <__mdiff+0x60>
 8007324:	4b31      	ldr	r3, [pc, #196]	@ (80073ec <__mdiff+0x120>)
 8007326:	f240 2145 	movw	r1, #581	@ 0x245
 800732a:	e7e3      	b.n	80072f4 <__mdiff+0x28>
 800732c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007330:	6926      	ldr	r6, [r4, #16]
 8007332:	60c5      	str	r5, [r0, #12]
 8007334:	f109 0310 	add.w	r3, r9, #16
 8007338:	f109 0514 	add.w	r5, r9, #20
 800733c:	f104 0e14 	add.w	lr, r4, #20
 8007340:	f100 0b14 	add.w	fp, r0, #20
 8007344:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007348:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800734c:	9301      	str	r3, [sp, #4]
 800734e:	46d9      	mov	r9, fp
 8007350:	f04f 0c00 	mov.w	ip, #0
 8007354:	9b01      	ldr	r3, [sp, #4]
 8007356:	f85e 0b04 	ldr.w	r0, [lr], #4
 800735a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800735e:	9301      	str	r3, [sp, #4]
 8007360:	fa1f f38a 	uxth.w	r3, sl
 8007364:	4619      	mov	r1, r3
 8007366:	b283      	uxth	r3, r0
 8007368:	1acb      	subs	r3, r1, r3
 800736a:	0c00      	lsrs	r0, r0, #16
 800736c:	4463      	add	r3, ip
 800736e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007372:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007376:	b29b      	uxth	r3, r3
 8007378:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800737c:	4576      	cmp	r6, lr
 800737e:	f849 3b04 	str.w	r3, [r9], #4
 8007382:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007386:	d8e5      	bhi.n	8007354 <__mdiff+0x88>
 8007388:	1b33      	subs	r3, r6, r4
 800738a:	3b15      	subs	r3, #21
 800738c:	f023 0303 	bic.w	r3, r3, #3
 8007390:	3415      	adds	r4, #21
 8007392:	3304      	adds	r3, #4
 8007394:	42a6      	cmp	r6, r4
 8007396:	bf38      	it	cc
 8007398:	2304      	movcc	r3, #4
 800739a:	441d      	add	r5, r3
 800739c:	445b      	add	r3, fp
 800739e:	461e      	mov	r6, r3
 80073a0:	462c      	mov	r4, r5
 80073a2:	4544      	cmp	r4, r8
 80073a4:	d30e      	bcc.n	80073c4 <__mdiff+0xf8>
 80073a6:	f108 0103 	add.w	r1, r8, #3
 80073aa:	1b49      	subs	r1, r1, r5
 80073ac:	f021 0103 	bic.w	r1, r1, #3
 80073b0:	3d03      	subs	r5, #3
 80073b2:	45a8      	cmp	r8, r5
 80073b4:	bf38      	it	cc
 80073b6:	2100      	movcc	r1, #0
 80073b8:	440b      	add	r3, r1
 80073ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80073be:	b191      	cbz	r1, 80073e6 <__mdiff+0x11a>
 80073c0:	6117      	str	r7, [r2, #16]
 80073c2:	e79d      	b.n	8007300 <__mdiff+0x34>
 80073c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80073c8:	46e6      	mov	lr, ip
 80073ca:	0c08      	lsrs	r0, r1, #16
 80073cc:	fa1c fc81 	uxtah	ip, ip, r1
 80073d0:	4471      	add	r1, lr
 80073d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80073d6:	b289      	uxth	r1, r1
 80073d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80073dc:	f846 1b04 	str.w	r1, [r6], #4
 80073e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80073e4:	e7dd      	b.n	80073a2 <__mdiff+0xd6>
 80073e6:	3f01      	subs	r7, #1
 80073e8:	e7e7      	b.n	80073ba <__mdiff+0xee>
 80073ea:	bf00      	nop
 80073ec:	08008dec 	.word	0x08008dec
 80073f0:	08008dfd 	.word	0x08008dfd

080073f4 <__d2b>:
 80073f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073f8:	460f      	mov	r7, r1
 80073fa:	2101      	movs	r1, #1
 80073fc:	ec59 8b10 	vmov	r8, r9, d0
 8007400:	4616      	mov	r6, r2
 8007402:	f7ff fcd5 	bl	8006db0 <_Balloc>
 8007406:	4604      	mov	r4, r0
 8007408:	b930      	cbnz	r0, 8007418 <__d2b+0x24>
 800740a:	4602      	mov	r2, r0
 800740c:	4b23      	ldr	r3, [pc, #140]	@ (800749c <__d2b+0xa8>)
 800740e:	4824      	ldr	r0, [pc, #144]	@ (80074a0 <__d2b+0xac>)
 8007410:	f240 310f 	movw	r1, #783	@ 0x30f
 8007414:	f000 fa82 	bl	800791c <__assert_func>
 8007418:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800741c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007420:	b10d      	cbz	r5, 8007426 <__d2b+0x32>
 8007422:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007426:	9301      	str	r3, [sp, #4]
 8007428:	f1b8 0300 	subs.w	r3, r8, #0
 800742c:	d023      	beq.n	8007476 <__d2b+0x82>
 800742e:	4668      	mov	r0, sp
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	f7ff fd84 	bl	8006f3e <__lo0bits>
 8007436:	e9dd 1200 	ldrd	r1, r2, [sp]
 800743a:	b1d0      	cbz	r0, 8007472 <__d2b+0x7e>
 800743c:	f1c0 0320 	rsb	r3, r0, #32
 8007440:	fa02 f303 	lsl.w	r3, r2, r3
 8007444:	430b      	orrs	r3, r1
 8007446:	40c2      	lsrs	r2, r0
 8007448:	6163      	str	r3, [r4, #20]
 800744a:	9201      	str	r2, [sp, #4]
 800744c:	9b01      	ldr	r3, [sp, #4]
 800744e:	61a3      	str	r3, [r4, #24]
 8007450:	2b00      	cmp	r3, #0
 8007452:	bf0c      	ite	eq
 8007454:	2201      	moveq	r2, #1
 8007456:	2202      	movne	r2, #2
 8007458:	6122      	str	r2, [r4, #16]
 800745a:	b1a5      	cbz	r5, 8007486 <__d2b+0x92>
 800745c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007460:	4405      	add	r5, r0
 8007462:	603d      	str	r5, [r7, #0]
 8007464:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007468:	6030      	str	r0, [r6, #0]
 800746a:	4620      	mov	r0, r4
 800746c:	b003      	add	sp, #12
 800746e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007472:	6161      	str	r1, [r4, #20]
 8007474:	e7ea      	b.n	800744c <__d2b+0x58>
 8007476:	a801      	add	r0, sp, #4
 8007478:	f7ff fd61 	bl	8006f3e <__lo0bits>
 800747c:	9b01      	ldr	r3, [sp, #4]
 800747e:	6163      	str	r3, [r4, #20]
 8007480:	3020      	adds	r0, #32
 8007482:	2201      	movs	r2, #1
 8007484:	e7e8      	b.n	8007458 <__d2b+0x64>
 8007486:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800748a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800748e:	6038      	str	r0, [r7, #0]
 8007490:	6918      	ldr	r0, [r3, #16]
 8007492:	f7ff fd35 	bl	8006f00 <__hi0bits>
 8007496:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800749a:	e7e5      	b.n	8007468 <__d2b+0x74>
 800749c:	08008dec 	.word	0x08008dec
 80074a0:	08008dfd 	.word	0x08008dfd

080074a4 <__ssputs_r>:
 80074a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a8:	688e      	ldr	r6, [r1, #8]
 80074aa:	461f      	mov	r7, r3
 80074ac:	42be      	cmp	r6, r7
 80074ae:	680b      	ldr	r3, [r1, #0]
 80074b0:	4682      	mov	sl, r0
 80074b2:	460c      	mov	r4, r1
 80074b4:	4690      	mov	r8, r2
 80074b6:	d82d      	bhi.n	8007514 <__ssputs_r+0x70>
 80074b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80074c0:	d026      	beq.n	8007510 <__ssputs_r+0x6c>
 80074c2:	6965      	ldr	r5, [r4, #20]
 80074c4:	6909      	ldr	r1, [r1, #16]
 80074c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074ca:	eba3 0901 	sub.w	r9, r3, r1
 80074ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074d2:	1c7b      	adds	r3, r7, #1
 80074d4:	444b      	add	r3, r9
 80074d6:	106d      	asrs	r5, r5, #1
 80074d8:	429d      	cmp	r5, r3
 80074da:	bf38      	it	cc
 80074dc:	461d      	movcc	r5, r3
 80074de:	0553      	lsls	r3, r2, #21
 80074e0:	d527      	bpl.n	8007532 <__ssputs_r+0x8e>
 80074e2:	4629      	mov	r1, r5
 80074e4:	f7ff fbd8 	bl	8006c98 <_malloc_r>
 80074e8:	4606      	mov	r6, r0
 80074ea:	b360      	cbz	r0, 8007546 <__ssputs_r+0xa2>
 80074ec:	6921      	ldr	r1, [r4, #16]
 80074ee:	464a      	mov	r2, r9
 80074f0:	f000 fa06 	bl	8007900 <memcpy>
 80074f4:	89a3      	ldrh	r3, [r4, #12]
 80074f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80074fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074fe:	81a3      	strh	r3, [r4, #12]
 8007500:	6126      	str	r6, [r4, #16]
 8007502:	6165      	str	r5, [r4, #20]
 8007504:	444e      	add	r6, r9
 8007506:	eba5 0509 	sub.w	r5, r5, r9
 800750a:	6026      	str	r6, [r4, #0]
 800750c:	60a5      	str	r5, [r4, #8]
 800750e:	463e      	mov	r6, r7
 8007510:	42be      	cmp	r6, r7
 8007512:	d900      	bls.n	8007516 <__ssputs_r+0x72>
 8007514:	463e      	mov	r6, r7
 8007516:	6820      	ldr	r0, [r4, #0]
 8007518:	4632      	mov	r2, r6
 800751a:	4641      	mov	r1, r8
 800751c:	f000 f9c6 	bl	80078ac <memmove>
 8007520:	68a3      	ldr	r3, [r4, #8]
 8007522:	1b9b      	subs	r3, r3, r6
 8007524:	60a3      	str	r3, [r4, #8]
 8007526:	6823      	ldr	r3, [r4, #0]
 8007528:	4433      	add	r3, r6
 800752a:	6023      	str	r3, [r4, #0]
 800752c:	2000      	movs	r0, #0
 800752e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007532:	462a      	mov	r2, r5
 8007534:	f000 fa36 	bl	80079a4 <_realloc_r>
 8007538:	4606      	mov	r6, r0
 800753a:	2800      	cmp	r0, #0
 800753c:	d1e0      	bne.n	8007500 <__ssputs_r+0x5c>
 800753e:	6921      	ldr	r1, [r4, #16]
 8007540:	4650      	mov	r0, sl
 8007542:	f7ff fb35 	bl	8006bb0 <_free_r>
 8007546:	230c      	movs	r3, #12
 8007548:	f8ca 3000 	str.w	r3, [sl]
 800754c:	89a3      	ldrh	r3, [r4, #12]
 800754e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007552:	81a3      	strh	r3, [r4, #12]
 8007554:	f04f 30ff 	mov.w	r0, #4294967295
 8007558:	e7e9      	b.n	800752e <__ssputs_r+0x8a>
	...

0800755c <_svfiprintf_r>:
 800755c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007560:	4698      	mov	r8, r3
 8007562:	898b      	ldrh	r3, [r1, #12]
 8007564:	061b      	lsls	r3, r3, #24
 8007566:	b09d      	sub	sp, #116	@ 0x74
 8007568:	4607      	mov	r7, r0
 800756a:	460d      	mov	r5, r1
 800756c:	4614      	mov	r4, r2
 800756e:	d510      	bpl.n	8007592 <_svfiprintf_r+0x36>
 8007570:	690b      	ldr	r3, [r1, #16]
 8007572:	b973      	cbnz	r3, 8007592 <_svfiprintf_r+0x36>
 8007574:	2140      	movs	r1, #64	@ 0x40
 8007576:	f7ff fb8f 	bl	8006c98 <_malloc_r>
 800757a:	6028      	str	r0, [r5, #0]
 800757c:	6128      	str	r0, [r5, #16]
 800757e:	b930      	cbnz	r0, 800758e <_svfiprintf_r+0x32>
 8007580:	230c      	movs	r3, #12
 8007582:	603b      	str	r3, [r7, #0]
 8007584:	f04f 30ff 	mov.w	r0, #4294967295
 8007588:	b01d      	add	sp, #116	@ 0x74
 800758a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800758e:	2340      	movs	r3, #64	@ 0x40
 8007590:	616b      	str	r3, [r5, #20]
 8007592:	2300      	movs	r3, #0
 8007594:	9309      	str	r3, [sp, #36]	@ 0x24
 8007596:	2320      	movs	r3, #32
 8007598:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800759c:	f8cd 800c 	str.w	r8, [sp, #12]
 80075a0:	2330      	movs	r3, #48	@ 0x30
 80075a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007740 <_svfiprintf_r+0x1e4>
 80075a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075aa:	f04f 0901 	mov.w	r9, #1
 80075ae:	4623      	mov	r3, r4
 80075b0:	469a      	mov	sl, r3
 80075b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075b6:	b10a      	cbz	r2, 80075bc <_svfiprintf_r+0x60>
 80075b8:	2a25      	cmp	r2, #37	@ 0x25
 80075ba:	d1f9      	bne.n	80075b0 <_svfiprintf_r+0x54>
 80075bc:	ebba 0b04 	subs.w	fp, sl, r4
 80075c0:	d00b      	beq.n	80075da <_svfiprintf_r+0x7e>
 80075c2:	465b      	mov	r3, fp
 80075c4:	4622      	mov	r2, r4
 80075c6:	4629      	mov	r1, r5
 80075c8:	4638      	mov	r0, r7
 80075ca:	f7ff ff6b 	bl	80074a4 <__ssputs_r>
 80075ce:	3001      	adds	r0, #1
 80075d0:	f000 80a7 	beq.w	8007722 <_svfiprintf_r+0x1c6>
 80075d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075d6:	445a      	add	r2, fp
 80075d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80075da:	f89a 3000 	ldrb.w	r3, [sl]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f000 809f 	beq.w	8007722 <_svfiprintf_r+0x1c6>
 80075e4:	2300      	movs	r3, #0
 80075e6:	f04f 32ff 	mov.w	r2, #4294967295
 80075ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075ee:	f10a 0a01 	add.w	sl, sl, #1
 80075f2:	9304      	str	r3, [sp, #16]
 80075f4:	9307      	str	r3, [sp, #28]
 80075f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80075fc:	4654      	mov	r4, sl
 80075fe:	2205      	movs	r2, #5
 8007600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007604:	484e      	ldr	r0, [pc, #312]	@ (8007740 <_svfiprintf_r+0x1e4>)
 8007606:	f7f8 fe03 	bl	8000210 <memchr>
 800760a:	9a04      	ldr	r2, [sp, #16]
 800760c:	b9d8      	cbnz	r0, 8007646 <_svfiprintf_r+0xea>
 800760e:	06d0      	lsls	r0, r2, #27
 8007610:	bf44      	itt	mi
 8007612:	2320      	movmi	r3, #32
 8007614:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007618:	0711      	lsls	r1, r2, #28
 800761a:	bf44      	itt	mi
 800761c:	232b      	movmi	r3, #43	@ 0x2b
 800761e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007622:	f89a 3000 	ldrb.w	r3, [sl]
 8007626:	2b2a      	cmp	r3, #42	@ 0x2a
 8007628:	d015      	beq.n	8007656 <_svfiprintf_r+0xfa>
 800762a:	9a07      	ldr	r2, [sp, #28]
 800762c:	4654      	mov	r4, sl
 800762e:	2000      	movs	r0, #0
 8007630:	f04f 0c0a 	mov.w	ip, #10
 8007634:	4621      	mov	r1, r4
 8007636:	f811 3b01 	ldrb.w	r3, [r1], #1
 800763a:	3b30      	subs	r3, #48	@ 0x30
 800763c:	2b09      	cmp	r3, #9
 800763e:	d94b      	bls.n	80076d8 <_svfiprintf_r+0x17c>
 8007640:	b1b0      	cbz	r0, 8007670 <_svfiprintf_r+0x114>
 8007642:	9207      	str	r2, [sp, #28]
 8007644:	e014      	b.n	8007670 <_svfiprintf_r+0x114>
 8007646:	eba0 0308 	sub.w	r3, r0, r8
 800764a:	fa09 f303 	lsl.w	r3, r9, r3
 800764e:	4313      	orrs	r3, r2
 8007650:	9304      	str	r3, [sp, #16]
 8007652:	46a2      	mov	sl, r4
 8007654:	e7d2      	b.n	80075fc <_svfiprintf_r+0xa0>
 8007656:	9b03      	ldr	r3, [sp, #12]
 8007658:	1d19      	adds	r1, r3, #4
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	9103      	str	r1, [sp, #12]
 800765e:	2b00      	cmp	r3, #0
 8007660:	bfbb      	ittet	lt
 8007662:	425b      	neglt	r3, r3
 8007664:	f042 0202 	orrlt.w	r2, r2, #2
 8007668:	9307      	strge	r3, [sp, #28]
 800766a:	9307      	strlt	r3, [sp, #28]
 800766c:	bfb8      	it	lt
 800766e:	9204      	strlt	r2, [sp, #16]
 8007670:	7823      	ldrb	r3, [r4, #0]
 8007672:	2b2e      	cmp	r3, #46	@ 0x2e
 8007674:	d10a      	bne.n	800768c <_svfiprintf_r+0x130>
 8007676:	7863      	ldrb	r3, [r4, #1]
 8007678:	2b2a      	cmp	r3, #42	@ 0x2a
 800767a:	d132      	bne.n	80076e2 <_svfiprintf_r+0x186>
 800767c:	9b03      	ldr	r3, [sp, #12]
 800767e:	1d1a      	adds	r2, r3, #4
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	9203      	str	r2, [sp, #12]
 8007684:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007688:	3402      	adds	r4, #2
 800768a:	9305      	str	r3, [sp, #20]
 800768c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007750 <_svfiprintf_r+0x1f4>
 8007690:	7821      	ldrb	r1, [r4, #0]
 8007692:	2203      	movs	r2, #3
 8007694:	4650      	mov	r0, sl
 8007696:	f7f8 fdbb 	bl	8000210 <memchr>
 800769a:	b138      	cbz	r0, 80076ac <_svfiprintf_r+0x150>
 800769c:	9b04      	ldr	r3, [sp, #16]
 800769e:	eba0 000a 	sub.w	r0, r0, sl
 80076a2:	2240      	movs	r2, #64	@ 0x40
 80076a4:	4082      	lsls	r2, r0
 80076a6:	4313      	orrs	r3, r2
 80076a8:	3401      	adds	r4, #1
 80076aa:	9304      	str	r3, [sp, #16]
 80076ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076b0:	4824      	ldr	r0, [pc, #144]	@ (8007744 <_svfiprintf_r+0x1e8>)
 80076b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076b6:	2206      	movs	r2, #6
 80076b8:	f7f8 fdaa 	bl	8000210 <memchr>
 80076bc:	2800      	cmp	r0, #0
 80076be:	d036      	beq.n	800772e <_svfiprintf_r+0x1d2>
 80076c0:	4b21      	ldr	r3, [pc, #132]	@ (8007748 <_svfiprintf_r+0x1ec>)
 80076c2:	bb1b      	cbnz	r3, 800770c <_svfiprintf_r+0x1b0>
 80076c4:	9b03      	ldr	r3, [sp, #12]
 80076c6:	3307      	adds	r3, #7
 80076c8:	f023 0307 	bic.w	r3, r3, #7
 80076cc:	3308      	adds	r3, #8
 80076ce:	9303      	str	r3, [sp, #12]
 80076d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076d2:	4433      	add	r3, r6
 80076d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80076d6:	e76a      	b.n	80075ae <_svfiprintf_r+0x52>
 80076d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80076dc:	460c      	mov	r4, r1
 80076de:	2001      	movs	r0, #1
 80076e0:	e7a8      	b.n	8007634 <_svfiprintf_r+0xd8>
 80076e2:	2300      	movs	r3, #0
 80076e4:	3401      	adds	r4, #1
 80076e6:	9305      	str	r3, [sp, #20]
 80076e8:	4619      	mov	r1, r3
 80076ea:	f04f 0c0a 	mov.w	ip, #10
 80076ee:	4620      	mov	r0, r4
 80076f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076f4:	3a30      	subs	r2, #48	@ 0x30
 80076f6:	2a09      	cmp	r2, #9
 80076f8:	d903      	bls.n	8007702 <_svfiprintf_r+0x1a6>
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d0c6      	beq.n	800768c <_svfiprintf_r+0x130>
 80076fe:	9105      	str	r1, [sp, #20]
 8007700:	e7c4      	b.n	800768c <_svfiprintf_r+0x130>
 8007702:	fb0c 2101 	mla	r1, ip, r1, r2
 8007706:	4604      	mov	r4, r0
 8007708:	2301      	movs	r3, #1
 800770a:	e7f0      	b.n	80076ee <_svfiprintf_r+0x192>
 800770c:	ab03      	add	r3, sp, #12
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	462a      	mov	r2, r5
 8007712:	4b0e      	ldr	r3, [pc, #56]	@ (800774c <_svfiprintf_r+0x1f0>)
 8007714:	a904      	add	r1, sp, #16
 8007716:	4638      	mov	r0, r7
 8007718:	f7fd fe80 	bl	800541c <_printf_float>
 800771c:	1c42      	adds	r2, r0, #1
 800771e:	4606      	mov	r6, r0
 8007720:	d1d6      	bne.n	80076d0 <_svfiprintf_r+0x174>
 8007722:	89ab      	ldrh	r3, [r5, #12]
 8007724:	065b      	lsls	r3, r3, #25
 8007726:	f53f af2d 	bmi.w	8007584 <_svfiprintf_r+0x28>
 800772a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800772c:	e72c      	b.n	8007588 <_svfiprintf_r+0x2c>
 800772e:	ab03      	add	r3, sp, #12
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	462a      	mov	r2, r5
 8007734:	4b05      	ldr	r3, [pc, #20]	@ (800774c <_svfiprintf_r+0x1f0>)
 8007736:	a904      	add	r1, sp, #16
 8007738:	4638      	mov	r0, r7
 800773a:	f7fe f907 	bl	800594c <_printf_i>
 800773e:	e7ed      	b.n	800771c <_svfiprintf_r+0x1c0>
 8007740:	08008e56 	.word	0x08008e56
 8007744:	08008e60 	.word	0x08008e60
 8007748:	0800541d 	.word	0x0800541d
 800774c:	080074a5 	.word	0x080074a5
 8007750:	08008e5c 	.word	0x08008e5c

08007754 <__sflush_r>:
 8007754:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800775c:	0716      	lsls	r6, r2, #28
 800775e:	4605      	mov	r5, r0
 8007760:	460c      	mov	r4, r1
 8007762:	d454      	bmi.n	800780e <__sflush_r+0xba>
 8007764:	684b      	ldr	r3, [r1, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	dc02      	bgt.n	8007770 <__sflush_r+0x1c>
 800776a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800776c:	2b00      	cmp	r3, #0
 800776e:	dd48      	ble.n	8007802 <__sflush_r+0xae>
 8007770:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007772:	2e00      	cmp	r6, #0
 8007774:	d045      	beq.n	8007802 <__sflush_r+0xae>
 8007776:	2300      	movs	r3, #0
 8007778:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800777c:	682f      	ldr	r7, [r5, #0]
 800777e:	6a21      	ldr	r1, [r4, #32]
 8007780:	602b      	str	r3, [r5, #0]
 8007782:	d030      	beq.n	80077e6 <__sflush_r+0x92>
 8007784:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007786:	89a3      	ldrh	r3, [r4, #12]
 8007788:	0759      	lsls	r1, r3, #29
 800778a:	d505      	bpl.n	8007798 <__sflush_r+0x44>
 800778c:	6863      	ldr	r3, [r4, #4]
 800778e:	1ad2      	subs	r2, r2, r3
 8007790:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007792:	b10b      	cbz	r3, 8007798 <__sflush_r+0x44>
 8007794:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007796:	1ad2      	subs	r2, r2, r3
 8007798:	2300      	movs	r3, #0
 800779a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800779c:	6a21      	ldr	r1, [r4, #32]
 800779e:	4628      	mov	r0, r5
 80077a0:	47b0      	blx	r6
 80077a2:	1c43      	adds	r3, r0, #1
 80077a4:	89a3      	ldrh	r3, [r4, #12]
 80077a6:	d106      	bne.n	80077b6 <__sflush_r+0x62>
 80077a8:	6829      	ldr	r1, [r5, #0]
 80077aa:	291d      	cmp	r1, #29
 80077ac:	d82b      	bhi.n	8007806 <__sflush_r+0xb2>
 80077ae:	4a2a      	ldr	r2, [pc, #168]	@ (8007858 <__sflush_r+0x104>)
 80077b0:	40ca      	lsrs	r2, r1
 80077b2:	07d6      	lsls	r6, r2, #31
 80077b4:	d527      	bpl.n	8007806 <__sflush_r+0xb2>
 80077b6:	2200      	movs	r2, #0
 80077b8:	6062      	str	r2, [r4, #4]
 80077ba:	04d9      	lsls	r1, r3, #19
 80077bc:	6922      	ldr	r2, [r4, #16]
 80077be:	6022      	str	r2, [r4, #0]
 80077c0:	d504      	bpl.n	80077cc <__sflush_r+0x78>
 80077c2:	1c42      	adds	r2, r0, #1
 80077c4:	d101      	bne.n	80077ca <__sflush_r+0x76>
 80077c6:	682b      	ldr	r3, [r5, #0]
 80077c8:	b903      	cbnz	r3, 80077cc <__sflush_r+0x78>
 80077ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80077cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077ce:	602f      	str	r7, [r5, #0]
 80077d0:	b1b9      	cbz	r1, 8007802 <__sflush_r+0xae>
 80077d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077d6:	4299      	cmp	r1, r3
 80077d8:	d002      	beq.n	80077e0 <__sflush_r+0x8c>
 80077da:	4628      	mov	r0, r5
 80077dc:	f7ff f9e8 	bl	8006bb0 <_free_r>
 80077e0:	2300      	movs	r3, #0
 80077e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80077e4:	e00d      	b.n	8007802 <__sflush_r+0xae>
 80077e6:	2301      	movs	r3, #1
 80077e8:	4628      	mov	r0, r5
 80077ea:	47b0      	blx	r6
 80077ec:	4602      	mov	r2, r0
 80077ee:	1c50      	adds	r0, r2, #1
 80077f0:	d1c9      	bne.n	8007786 <__sflush_r+0x32>
 80077f2:	682b      	ldr	r3, [r5, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d0c6      	beq.n	8007786 <__sflush_r+0x32>
 80077f8:	2b1d      	cmp	r3, #29
 80077fa:	d001      	beq.n	8007800 <__sflush_r+0xac>
 80077fc:	2b16      	cmp	r3, #22
 80077fe:	d11e      	bne.n	800783e <__sflush_r+0xea>
 8007800:	602f      	str	r7, [r5, #0]
 8007802:	2000      	movs	r0, #0
 8007804:	e022      	b.n	800784c <__sflush_r+0xf8>
 8007806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800780a:	b21b      	sxth	r3, r3
 800780c:	e01b      	b.n	8007846 <__sflush_r+0xf2>
 800780e:	690f      	ldr	r7, [r1, #16]
 8007810:	2f00      	cmp	r7, #0
 8007812:	d0f6      	beq.n	8007802 <__sflush_r+0xae>
 8007814:	0793      	lsls	r3, r2, #30
 8007816:	680e      	ldr	r6, [r1, #0]
 8007818:	bf08      	it	eq
 800781a:	694b      	ldreq	r3, [r1, #20]
 800781c:	600f      	str	r7, [r1, #0]
 800781e:	bf18      	it	ne
 8007820:	2300      	movne	r3, #0
 8007822:	eba6 0807 	sub.w	r8, r6, r7
 8007826:	608b      	str	r3, [r1, #8]
 8007828:	f1b8 0f00 	cmp.w	r8, #0
 800782c:	dde9      	ble.n	8007802 <__sflush_r+0xae>
 800782e:	6a21      	ldr	r1, [r4, #32]
 8007830:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007832:	4643      	mov	r3, r8
 8007834:	463a      	mov	r2, r7
 8007836:	4628      	mov	r0, r5
 8007838:	47b0      	blx	r6
 800783a:	2800      	cmp	r0, #0
 800783c:	dc08      	bgt.n	8007850 <__sflush_r+0xfc>
 800783e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007842:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007846:	81a3      	strh	r3, [r4, #12]
 8007848:	f04f 30ff 	mov.w	r0, #4294967295
 800784c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007850:	4407      	add	r7, r0
 8007852:	eba8 0800 	sub.w	r8, r8, r0
 8007856:	e7e7      	b.n	8007828 <__sflush_r+0xd4>
 8007858:	20400001 	.word	0x20400001

0800785c <_fflush_r>:
 800785c:	b538      	push	{r3, r4, r5, lr}
 800785e:	690b      	ldr	r3, [r1, #16]
 8007860:	4605      	mov	r5, r0
 8007862:	460c      	mov	r4, r1
 8007864:	b913      	cbnz	r3, 800786c <_fflush_r+0x10>
 8007866:	2500      	movs	r5, #0
 8007868:	4628      	mov	r0, r5
 800786a:	bd38      	pop	{r3, r4, r5, pc}
 800786c:	b118      	cbz	r0, 8007876 <_fflush_r+0x1a>
 800786e:	6a03      	ldr	r3, [r0, #32]
 8007870:	b90b      	cbnz	r3, 8007876 <_fflush_r+0x1a>
 8007872:	f7fe fa15 	bl	8005ca0 <__sinit>
 8007876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0f3      	beq.n	8007866 <_fflush_r+0xa>
 800787e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007880:	07d0      	lsls	r0, r2, #31
 8007882:	d404      	bmi.n	800788e <_fflush_r+0x32>
 8007884:	0599      	lsls	r1, r3, #22
 8007886:	d402      	bmi.n	800788e <_fflush_r+0x32>
 8007888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800788a:	f7fe fb36 	bl	8005efa <__retarget_lock_acquire_recursive>
 800788e:	4628      	mov	r0, r5
 8007890:	4621      	mov	r1, r4
 8007892:	f7ff ff5f 	bl	8007754 <__sflush_r>
 8007896:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007898:	07da      	lsls	r2, r3, #31
 800789a:	4605      	mov	r5, r0
 800789c:	d4e4      	bmi.n	8007868 <_fflush_r+0xc>
 800789e:	89a3      	ldrh	r3, [r4, #12]
 80078a0:	059b      	lsls	r3, r3, #22
 80078a2:	d4e1      	bmi.n	8007868 <_fflush_r+0xc>
 80078a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078a6:	f7fe fb29 	bl	8005efc <__retarget_lock_release_recursive>
 80078aa:	e7dd      	b.n	8007868 <_fflush_r+0xc>

080078ac <memmove>:
 80078ac:	4288      	cmp	r0, r1
 80078ae:	b510      	push	{r4, lr}
 80078b0:	eb01 0402 	add.w	r4, r1, r2
 80078b4:	d902      	bls.n	80078bc <memmove+0x10>
 80078b6:	4284      	cmp	r4, r0
 80078b8:	4623      	mov	r3, r4
 80078ba:	d807      	bhi.n	80078cc <memmove+0x20>
 80078bc:	1e43      	subs	r3, r0, #1
 80078be:	42a1      	cmp	r1, r4
 80078c0:	d008      	beq.n	80078d4 <memmove+0x28>
 80078c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078ca:	e7f8      	b.n	80078be <memmove+0x12>
 80078cc:	4402      	add	r2, r0
 80078ce:	4601      	mov	r1, r0
 80078d0:	428a      	cmp	r2, r1
 80078d2:	d100      	bne.n	80078d6 <memmove+0x2a>
 80078d4:	bd10      	pop	{r4, pc}
 80078d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078de:	e7f7      	b.n	80078d0 <memmove+0x24>

080078e0 <_sbrk_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	4d06      	ldr	r5, [pc, #24]	@ (80078fc <_sbrk_r+0x1c>)
 80078e4:	2300      	movs	r3, #0
 80078e6:	4604      	mov	r4, r0
 80078e8:	4608      	mov	r0, r1
 80078ea:	602b      	str	r3, [r5, #0]
 80078ec:	f7fa fa00 	bl	8001cf0 <_sbrk>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d102      	bne.n	80078fa <_sbrk_r+0x1a>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	b103      	cbz	r3, 80078fa <_sbrk_r+0x1a>
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	20000898 	.word	0x20000898

08007900 <memcpy>:
 8007900:	440a      	add	r2, r1
 8007902:	4291      	cmp	r1, r2
 8007904:	f100 33ff 	add.w	r3, r0, #4294967295
 8007908:	d100      	bne.n	800790c <memcpy+0xc>
 800790a:	4770      	bx	lr
 800790c:	b510      	push	{r4, lr}
 800790e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007912:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007916:	4291      	cmp	r1, r2
 8007918:	d1f9      	bne.n	800790e <memcpy+0xe>
 800791a:	bd10      	pop	{r4, pc}

0800791c <__assert_func>:
 800791c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800791e:	4614      	mov	r4, r2
 8007920:	461a      	mov	r2, r3
 8007922:	4b09      	ldr	r3, [pc, #36]	@ (8007948 <__assert_func+0x2c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4605      	mov	r5, r0
 8007928:	68d8      	ldr	r0, [r3, #12]
 800792a:	b14c      	cbz	r4, 8007940 <__assert_func+0x24>
 800792c:	4b07      	ldr	r3, [pc, #28]	@ (800794c <__assert_func+0x30>)
 800792e:	9100      	str	r1, [sp, #0]
 8007930:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007934:	4906      	ldr	r1, [pc, #24]	@ (8007950 <__assert_func+0x34>)
 8007936:	462b      	mov	r3, r5
 8007938:	f000 f870 	bl	8007a1c <fiprintf>
 800793c:	f000 f880 	bl	8007a40 <abort>
 8007940:	4b04      	ldr	r3, [pc, #16]	@ (8007954 <__assert_func+0x38>)
 8007942:	461c      	mov	r4, r3
 8007944:	e7f3      	b.n	800792e <__assert_func+0x12>
 8007946:	bf00      	nop
 8007948:	20000028 	.word	0x20000028
 800794c:	08008e71 	.word	0x08008e71
 8007950:	08008e7e 	.word	0x08008e7e
 8007954:	08008eac 	.word	0x08008eac

08007958 <_calloc_r>:
 8007958:	b570      	push	{r4, r5, r6, lr}
 800795a:	fba1 5402 	umull	r5, r4, r1, r2
 800795e:	b934      	cbnz	r4, 800796e <_calloc_r+0x16>
 8007960:	4629      	mov	r1, r5
 8007962:	f7ff f999 	bl	8006c98 <_malloc_r>
 8007966:	4606      	mov	r6, r0
 8007968:	b928      	cbnz	r0, 8007976 <_calloc_r+0x1e>
 800796a:	4630      	mov	r0, r6
 800796c:	bd70      	pop	{r4, r5, r6, pc}
 800796e:	220c      	movs	r2, #12
 8007970:	6002      	str	r2, [r0, #0]
 8007972:	2600      	movs	r6, #0
 8007974:	e7f9      	b.n	800796a <_calloc_r+0x12>
 8007976:	462a      	mov	r2, r5
 8007978:	4621      	mov	r1, r4
 800797a:	f7fe fa40 	bl	8005dfe <memset>
 800797e:	e7f4      	b.n	800796a <_calloc_r+0x12>

08007980 <__ascii_mbtowc>:
 8007980:	b082      	sub	sp, #8
 8007982:	b901      	cbnz	r1, 8007986 <__ascii_mbtowc+0x6>
 8007984:	a901      	add	r1, sp, #4
 8007986:	b142      	cbz	r2, 800799a <__ascii_mbtowc+0x1a>
 8007988:	b14b      	cbz	r3, 800799e <__ascii_mbtowc+0x1e>
 800798a:	7813      	ldrb	r3, [r2, #0]
 800798c:	600b      	str	r3, [r1, #0]
 800798e:	7812      	ldrb	r2, [r2, #0]
 8007990:	1e10      	subs	r0, r2, #0
 8007992:	bf18      	it	ne
 8007994:	2001      	movne	r0, #1
 8007996:	b002      	add	sp, #8
 8007998:	4770      	bx	lr
 800799a:	4610      	mov	r0, r2
 800799c:	e7fb      	b.n	8007996 <__ascii_mbtowc+0x16>
 800799e:	f06f 0001 	mvn.w	r0, #1
 80079a2:	e7f8      	b.n	8007996 <__ascii_mbtowc+0x16>

080079a4 <_realloc_r>:
 80079a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a8:	4607      	mov	r7, r0
 80079aa:	4614      	mov	r4, r2
 80079ac:	460d      	mov	r5, r1
 80079ae:	b921      	cbnz	r1, 80079ba <_realloc_r+0x16>
 80079b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079b4:	4611      	mov	r1, r2
 80079b6:	f7ff b96f 	b.w	8006c98 <_malloc_r>
 80079ba:	b92a      	cbnz	r2, 80079c8 <_realloc_r+0x24>
 80079bc:	f7ff f8f8 	bl	8006bb0 <_free_r>
 80079c0:	4625      	mov	r5, r4
 80079c2:	4628      	mov	r0, r5
 80079c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079c8:	f000 f841 	bl	8007a4e <_malloc_usable_size_r>
 80079cc:	4284      	cmp	r4, r0
 80079ce:	4606      	mov	r6, r0
 80079d0:	d802      	bhi.n	80079d8 <_realloc_r+0x34>
 80079d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079d6:	d8f4      	bhi.n	80079c2 <_realloc_r+0x1e>
 80079d8:	4621      	mov	r1, r4
 80079da:	4638      	mov	r0, r7
 80079dc:	f7ff f95c 	bl	8006c98 <_malloc_r>
 80079e0:	4680      	mov	r8, r0
 80079e2:	b908      	cbnz	r0, 80079e8 <_realloc_r+0x44>
 80079e4:	4645      	mov	r5, r8
 80079e6:	e7ec      	b.n	80079c2 <_realloc_r+0x1e>
 80079e8:	42b4      	cmp	r4, r6
 80079ea:	4622      	mov	r2, r4
 80079ec:	4629      	mov	r1, r5
 80079ee:	bf28      	it	cs
 80079f0:	4632      	movcs	r2, r6
 80079f2:	f7ff ff85 	bl	8007900 <memcpy>
 80079f6:	4629      	mov	r1, r5
 80079f8:	4638      	mov	r0, r7
 80079fa:	f7ff f8d9 	bl	8006bb0 <_free_r>
 80079fe:	e7f1      	b.n	80079e4 <_realloc_r+0x40>

08007a00 <__ascii_wctomb>:
 8007a00:	4603      	mov	r3, r0
 8007a02:	4608      	mov	r0, r1
 8007a04:	b141      	cbz	r1, 8007a18 <__ascii_wctomb+0x18>
 8007a06:	2aff      	cmp	r2, #255	@ 0xff
 8007a08:	d904      	bls.n	8007a14 <__ascii_wctomb+0x14>
 8007a0a:	228a      	movs	r2, #138	@ 0x8a
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a12:	4770      	bx	lr
 8007a14:	700a      	strb	r2, [r1, #0]
 8007a16:	2001      	movs	r0, #1
 8007a18:	4770      	bx	lr
	...

08007a1c <fiprintf>:
 8007a1c:	b40e      	push	{r1, r2, r3}
 8007a1e:	b503      	push	{r0, r1, lr}
 8007a20:	4601      	mov	r1, r0
 8007a22:	ab03      	add	r3, sp, #12
 8007a24:	4805      	ldr	r0, [pc, #20]	@ (8007a3c <fiprintf+0x20>)
 8007a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a2a:	6800      	ldr	r0, [r0, #0]
 8007a2c:	9301      	str	r3, [sp, #4]
 8007a2e:	f000 f83f 	bl	8007ab0 <_vfiprintf_r>
 8007a32:	b002      	add	sp, #8
 8007a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a38:	b003      	add	sp, #12
 8007a3a:	4770      	bx	lr
 8007a3c:	20000028 	.word	0x20000028

08007a40 <abort>:
 8007a40:	b508      	push	{r3, lr}
 8007a42:	2006      	movs	r0, #6
 8007a44:	f000 fa08 	bl	8007e58 <raise>
 8007a48:	2001      	movs	r0, #1
 8007a4a:	f7fa f8d9 	bl	8001c00 <_exit>

08007a4e <_malloc_usable_size_r>:
 8007a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a52:	1f18      	subs	r0, r3, #4
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	bfbc      	itt	lt
 8007a58:	580b      	ldrlt	r3, [r1, r0]
 8007a5a:	18c0      	addlt	r0, r0, r3
 8007a5c:	4770      	bx	lr

08007a5e <__sfputc_r>:
 8007a5e:	6893      	ldr	r3, [r2, #8]
 8007a60:	3b01      	subs	r3, #1
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	b410      	push	{r4}
 8007a66:	6093      	str	r3, [r2, #8]
 8007a68:	da08      	bge.n	8007a7c <__sfputc_r+0x1e>
 8007a6a:	6994      	ldr	r4, [r2, #24]
 8007a6c:	42a3      	cmp	r3, r4
 8007a6e:	db01      	blt.n	8007a74 <__sfputc_r+0x16>
 8007a70:	290a      	cmp	r1, #10
 8007a72:	d103      	bne.n	8007a7c <__sfputc_r+0x1e>
 8007a74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a78:	f000 b932 	b.w	8007ce0 <__swbuf_r>
 8007a7c:	6813      	ldr	r3, [r2, #0]
 8007a7e:	1c58      	adds	r0, r3, #1
 8007a80:	6010      	str	r0, [r2, #0]
 8007a82:	7019      	strb	r1, [r3, #0]
 8007a84:	4608      	mov	r0, r1
 8007a86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <__sfputs_r>:
 8007a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8e:	4606      	mov	r6, r0
 8007a90:	460f      	mov	r7, r1
 8007a92:	4614      	mov	r4, r2
 8007a94:	18d5      	adds	r5, r2, r3
 8007a96:	42ac      	cmp	r4, r5
 8007a98:	d101      	bne.n	8007a9e <__sfputs_r+0x12>
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	e007      	b.n	8007aae <__sfputs_r+0x22>
 8007a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aa2:	463a      	mov	r2, r7
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	f7ff ffda 	bl	8007a5e <__sfputc_r>
 8007aaa:	1c43      	adds	r3, r0, #1
 8007aac:	d1f3      	bne.n	8007a96 <__sfputs_r+0xa>
 8007aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ab0 <_vfiprintf_r>:
 8007ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab4:	460d      	mov	r5, r1
 8007ab6:	b09d      	sub	sp, #116	@ 0x74
 8007ab8:	4614      	mov	r4, r2
 8007aba:	4698      	mov	r8, r3
 8007abc:	4606      	mov	r6, r0
 8007abe:	b118      	cbz	r0, 8007ac8 <_vfiprintf_r+0x18>
 8007ac0:	6a03      	ldr	r3, [r0, #32]
 8007ac2:	b90b      	cbnz	r3, 8007ac8 <_vfiprintf_r+0x18>
 8007ac4:	f7fe f8ec 	bl	8005ca0 <__sinit>
 8007ac8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007aca:	07d9      	lsls	r1, r3, #31
 8007acc:	d405      	bmi.n	8007ada <_vfiprintf_r+0x2a>
 8007ace:	89ab      	ldrh	r3, [r5, #12]
 8007ad0:	059a      	lsls	r2, r3, #22
 8007ad2:	d402      	bmi.n	8007ada <_vfiprintf_r+0x2a>
 8007ad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ad6:	f7fe fa10 	bl	8005efa <__retarget_lock_acquire_recursive>
 8007ada:	89ab      	ldrh	r3, [r5, #12]
 8007adc:	071b      	lsls	r3, r3, #28
 8007ade:	d501      	bpl.n	8007ae4 <_vfiprintf_r+0x34>
 8007ae0:	692b      	ldr	r3, [r5, #16]
 8007ae2:	b99b      	cbnz	r3, 8007b0c <_vfiprintf_r+0x5c>
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	f000 f938 	bl	8007d5c <__swsetup_r>
 8007aec:	b170      	cbz	r0, 8007b0c <_vfiprintf_r+0x5c>
 8007aee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007af0:	07dc      	lsls	r4, r3, #31
 8007af2:	d504      	bpl.n	8007afe <_vfiprintf_r+0x4e>
 8007af4:	f04f 30ff 	mov.w	r0, #4294967295
 8007af8:	b01d      	add	sp, #116	@ 0x74
 8007afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007afe:	89ab      	ldrh	r3, [r5, #12]
 8007b00:	0598      	lsls	r0, r3, #22
 8007b02:	d4f7      	bmi.n	8007af4 <_vfiprintf_r+0x44>
 8007b04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b06:	f7fe f9f9 	bl	8005efc <__retarget_lock_release_recursive>
 8007b0a:	e7f3      	b.n	8007af4 <_vfiprintf_r+0x44>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b10:	2320      	movs	r3, #32
 8007b12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b16:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b1a:	2330      	movs	r3, #48	@ 0x30
 8007b1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007ccc <_vfiprintf_r+0x21c>
 8007b20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b24:	f04f 0901 	mov.w	r9, #1
 8007b28:	4623      	mov	r3, r4
 8007b2a:	469a      	mov	sl, r3
 8007b2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b30:	b10a      	cbz	r2, 8007b36 <_vfiprintf_r+0x86>
 8007b32:	2a25      	cmp	r2, #37	@ 0x25
 8007b34:	d1f9      	bne.n	8007b2a <_vfiprintf_r+0x7a>
 8007b36:	ebba 0b04 	subs.w	fp, sl, r4
 8007b3a:	d00b      	beq.n	8007b54 <_vfiprintf_r+0xa4>
 8007b3c:	465b      	mov	r3, fp
 8007b3e:	4622      	mov	r2, r4
 8007b40:	4629      	mov	r1, r5
 8007b42:	4630      	mov	r0, r6
 8007b44:	f7ff ffa2 	bl	8007a8c <__sfputs_r>
 8007b48:	3001      	adds	r0, #1
 8007b4a:	f000 80a7 	beq.w	8007c9c <_vfiprintf_r+0x1ec>
 8007b4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b50:	445a      	add	r2, fp
 8007b52:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b54:	f89a 3000 	ldrb.w	r3, [sl]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 809f 	beq.w	8007c9c <_vfiprintf_r+0x1ec>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	f04f 32ff 	mov.w	r2, #4294967295
 8007b64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b68:	f10a 0a01 	add.w	sl, sl, #1
 8007b6c:	9304      	str	r3, [sp, #16]
 8007b6e:	9307      	str	r3, [sp, #28]
 8007b70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b74:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b76:	4654      	mov	r4, sl
 8007b78:	2205      	movs	r2, #5
 8007b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b7e:	4853      	ldr	r0, [pc, #332]	@ (8007ccc <_vfiprintf_r+0x21c>)
 8007b80:	f7f8 fb46 	bl	8000210 <memchr>
 8007b84:	9a04      	ldr	r2, [sp, #16]
 8007b86:	b9d8      	cbnz	r0, 8007bc0 <_vfiprintf_r+0x110>
 8007b88:	06d1      	lsls	r1, r2, #27
 8007b8a:	bf44      	itt	mi
 8007b8c:	2320      	movmi	r3, #32
 8007b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b92:	0713      	lsls	r3, r2, #28
 8007b94:	bf44      	itt	mi
 8007b96:	232b      	movmi	r3, #43	@ 0x2b
 8007b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8007ba0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ba2:	d015      	beq.n	8007bd0 <_vfiprintf_r+0x120>
 8007ba4:	9a07      	ldr	r2, [sp, #28]
 8007ba6:	4654      	mov	r4, sl
 8007ba8:	2000      	movs	r0, #0
 8007baa:	f04f 0c0a 	mov.w	ip, #10
 8007bae:	4621      	mov	r1, r4
 8007bb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bb4:	3b30      	subs	r3, #48	@ 0x30
 8007bb6:	2b09      	cmp	r3, #9
 8007bb8:	d94b      	bls.n	8007c52 <_vfiprintf_r+0x1a2>
 8007bba:	b1b0      	cbz	r0, 8007bea <_vfiprintf_r+0x13a>
 8007bbc:	9207      	str	r2, [sp, #28]
 8007bbe:	e014      	b.n	8007bea <_vfiprintf_r+0x13a>
 8007bc0:	eba0 0308 	sub.w	r3, r0, r8
 8007bc4:	fa09 f303 	lsl.w	r3, r9, r3
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	9304      	str	r3, [sp, #16]
 8007bcc:	46a2      	mov	sl, r4
 8007bce:	e7d2      	b.n	8007b76 <_vfiprintf_r+0xc6>
 8007bd0:	9b03      	ldr	r3, [sp, #12]
 8007bd2:	1d19      	adds	r1, r3, #4
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	9103      	str	r1, [sp, #12]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	bfbb      	ittet	lt
 8007bdc:	425b      	neglt	r3, r3
 8007bde:	f042 0202 	orrlt.w	r2, r2, #2
 8007be2:	9307      	strge	r3, [sp, #28]
 8007be4:	9307      	strlt	r3, [sp, #28]
 8007be6:	bfb8      	it	lt
 8007be8:	9204      	strlt	r2, [sp, #16]
 8007bea:	7823      	ldrb	r3, [r4, #0]
 8007bec:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bee:	d10a      	bne.n	8007c06 <_vfiprintf_r+0x156>
 8007bf0:	7863      	ldrb	r3, [r4, #1]
 8007bf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bf4:	d132      	bne.n	8007c5c <_vfiprintf_r+0x1ac>
 8007bf6:	9b03      	ldr	r3, [sp, #12]
 8007bf8:	1d1a      	adds	r2, r3, #4
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	9203      	str	r2, [sp, #12]
 8007bfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c02:	3402      	adds	r4, #2
 8007c04:	9305      	str	r3, [sp, #20]
 8007c06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007cdc <_vfiprintf_r+0x22c>
 8007c0a:	7821      	ldrb	r1, [r4, #0]
 8007c0c:	2203      	movs	r2, #3
 8007c0e:	4650      	mov	r0, sl
 8007c10:	f7f8 fafe 	bl	8000210 <memchr>
 8007c14:	b138      	cbz	r0, 8007c26 <_vfiprintf_r+0x176>
 8007c16:	9b04      	ldr	r3, [sp, #16]
 8007c18:	eba0 000a 	sub.w	r0, r0, sl
 8007c1c:	2240      	movs	r2, #64	@ 0x40
 8007c1e:	4082      	lsls	r2, r0
 8007c20:	4313      	orrs	r3, r2
 8007c22:	3401      	adds	r4, #1
 8007c24:	9304      	str	r3, [sp, #16]
 8007c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c2a:	4829      	ldr	r0, [pc, #164]	@ (8007cd0 <_vfiprintf_r+0x220>)
 8007c2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c30:	2206      	movs	r2, #6
 8007c32:	f7f8 faed 	bl	8000210 <memchr>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d03f      	beq.n	8007cba <_vfiprintf_r+0x20a>
 8007c3a:	4b26      	ldr	r3, [pc, #152]	@ (8007cd4 <_vfiprintf_r+0x224>)
 8007c3c:	bb1b      	cbnz	r3, 8007c86 <_vfiprintf_r+0x1d6>
 8007c3e:	9b03      	ldr	r3, [sp, #12]
 8007c40:	3307      	adds	r3, #7
 8007c42:	f023 0307 	bic.w	r3, r3, #7
 8007c46:	3308      	adds	r3, #8
 8007c48:	9303      	str	r3, [sp, #12]
 8007c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c4c:	443b      	add	r3, r7
 8007c4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c50:	e76a      	b.n	8007b28 <_vfiprintf_r+0x78>
 8007c52:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c56:	460c      	mov	r4, r1
 8007c58:	2001      	movs	r0, #1
 8007c5a:	e7a8      	b.n	8007bae <_vfiprintf_r+0xfe>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	3401      	adds	r4, #1
 8007c60:	9305      	str	r3, [sp, #20]
 8007c62:	4619      	mov	r1, r3
 8007c64:	f04f 0c0a 	mov.w	ip, #10
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c6e:	3a30      	subs	r2, #48	@ 0x30
 8007c70:	2a09      	cmp	r2, #9
 8007c72:	d903      	bls.n	8007c7c <_vfiprintf_r+0x1cc>
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d0c6      	beq.n	8007c06 <_vfiprintf_r+0x156>
 8007c78:	9105      	str	r1, [sp, #20]
 8007c7a:	e7c4      	b.n	8007c06 <_vfiprintf_r+0x156>
 8007c7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c80:	4604      	mov	r4, r0
 8007c82:	2301      	movs	r3, #1
 8007c84:	e7f0      	b.n	8007c68 <_vfiprintf_r+0x1b8>
 8007c86:	ab03      	add	r3, sp, #12
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	462a      	mov	r2, r5
 8007c8c:	4b12      	ldr	r3, [pc, #72]	@ (8007cd8 <_vfiprintf_r+0x228>)
 8007c8e:	a904      	add	r1, sp, #16
 8007c90:	4630      	mov	r0, r6
 8007c92:	f7fd fbc3 	bl	800541c <_printf_float>
 8007c96:	4607      	mov	r7, r0
 8007c98:	1c78      	adds	r0, r7, #1
 8007c9a:	d1d6      	bne.n	8007c4a <_vfiprintf_r+0x19a>
 8007c9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c9e:	07d9      	lsls	r1, r3, #31
 8007ca0:	d405      	bmi.n	8007cae <_vfiprintf_r+0x1fe>
 8007ca2:	89ab      	ldrh	r3, [r5, #12]
 8007ca4:	059a      	lsls	r2, r3, #22
 8007ca6:	d402      	bmi.n	8007cae <_vfiprintf_r+0x1fe>
 8007ca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007caa:	f7fe f927 	bl	8005efc <__retarget_lock_release_recursive>
 8007cae:	89ab      	ldrh	r3, [r5, #12]
 8007cb0:	065b      	lsls	r3, r3, #25
 8007cb2:	f53f af1f 	bmi.w	8007af4 <_vfiprintf_r+0x44>
 8007cb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cb8:	e71e      	b.n	8007af8 <_vfiprintf_r+0x48>
 8007cba:	ab03      	add	r3, sp, #12
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	462a      	mov	r2, r5
 8007cc0:	4b05      	ldr	r3, [pc, #20]	@ (8007cd8 <_vfiprintf_r+0x228>)
 8007cc2:	a904      	add	r1, sp, #16
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	f7fd fe41 	bl	800594c <_printf_i>
 8007cca:	e7e4      	b.n	8007c96 <_vfiprintf_r+0x1e6>
 8007ccc:	08008e56 	.word	0x08008e56
 8007cd0:	08008e60 	.word	0x08008e60
 8007cd4:	0800541d 	.word	0x0800541d
 8007cd8:	08007a8d 	.word	0x08007a8d
 8007cdc:	08008e5c 	.word	0x08008e5c

08007ce0 <__swbuf_r>:
 8007ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce2:	460e      	mov	r6, r1
 8007ce4:	4614      	mov	r4, r2
 8007ce6:	4605      	mov	r5, r0
 8007ce8:	b118      	cbz	r0, 8007cf2 <__swbuf_r+0x12>
 8007cea:	6a03      	ldr	r3, [r0, #32]
 8007cec:	b90b      	cbnz	r3, 8007cf2 <__swbuf_r+0x12>
 8007cee:	f7fd ffd7 	bl	8005ca0 <__sinit>
 8007cf2:	69a3      	ldr	r3, [r4, #24]
 8007cf4:	60a3      	str	r3, [r4, #8]
 8007cf6:	89a3      	ldrh	r3, [r4, #12]
 8007cf8:	071a      	lsls	r2, r3, #28
 8007cfa:	d501      	bpl.n	8007d00 <__swbuf_r+0x20>
 8007cfc:	6923      	ldr	r3, [r4, #16]
 8007cfe:	b943      	cbnz	r3, 8007d12 <__swbuf_r+0x32>
 8007d00:	4621      	mov	r1, r4
 8007d02:	4628      	mov	r0, r5
 8007d04:	f000 f82a 	bl	8007d5c <__swsetup_r>
 8007d08:	b118      	cbz	r0, 8007d12 <__swbuf_r+0x32>
 8007d0a:	f04f 37ff 	mov.w	r7, #4294967295
 8007d0e:	4638      	mov	r0, r7
 8007d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d12:	6823      	ldr	r3, [r4, #0]
 8007d14:	6922      	ldr	r2, [r4, #16]
 8007d16:	1a98      	subs	r0, r3, r2
 8007d18:	6963      	ldr	r3, [r4, #20]
 8007d1a:	b2f6      	uxtb	r6, r6
 8007d1c:	4283      	cmp	r3, r0
 8007d1e:	4637      	mov	r7, r6
 8007d20:	dc05      	bgt.n	8007d2e <__swbuf_r+0x4e>
 8007d22:	4621      	mov	r1, r4
 8007d24:	4628      	mov	r0, r5
 8007d26:	f7ff fd99 	bl	800785c <_fflush_r>
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	d1ed      	bne.n	8007d0a <__swbuf_r+0x2a>
 8007d2e:	68a3      	ldr	r3, [r4, #8]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	60a3      	str	r3, [r4, #8]
 8007d34:	6823      	ldr	r3, [r4, #0]
 8007d36:	1c5a      	adds	r2, r3, #1
 8007d38:	6022      	str	r2, [r4, #0]
 8007d3a:	701e      	strb	r6, [r3, #0]
 8007d3c:	6962      	ldr	r2, [r4, #20]
 8007d3e:	1c43      	adds	r3, r0, #1
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d004      	beq.n	8007d4e <__swbuf_r+0x6e>
 8007d44:	89a3      	ldrh	r3, [r4, #12]
 8007d46:	07db      	lsls	r3, r3, #31
 8007d48:	d5e1      	bpl.n	8007d0e <__swbuf_r+0x2e>
 8007d4a:	2e0a      	cmp	r6, #10
 8007d4c:	d1df      	bne.n	8007d0e <__swbuf_r+0x2e>
 8007d4e:	4621      	mov	r1, r4
 8007d50:	4628      	mov	r0, r5
 8007d52:	f7ff fd83 	bl	800785c <_fflush_r>
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d0d9      	beq.n	8007d0e <__swbuf_r+0x2e>
 8007d5a:	e7d6      	b.n	8007d0a <__swbuf_r+0x2a>

08007d5c <__swsetup_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4b29      	ldr	r3, [pc, #164]	@ (8007e04 <__swsetup_r+0xa8>)
 8007d60:	4605      	mov	r5, r0
 8007d62:	6818      	ldr	r0, [r3, #0]
 8007d64:	460c      	mov	r4, r1
 8007d66:	b118      	cbz	r0, 8007d70 <__swsetup_r+0x14>
 8007d68:	6a03      	ldr	r3, [r0, #32]
 8007d6a:	b90b      	cbnz	r3, 8007d70 <__swsetup_r+0x14>
 8007d6c:	f7fd ff98 	bl	8005ca0 <__sinit>
 8007d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d74:	0719      	lsls	r1, r3, #28
 8007d76:	d422      	bmi.n	8007dbe <__swsetup_r+0x62>
 8007d78:	06da      	lsls	r2, r3, #27
 8007d7a:	d407      	bmi.n	8007d8c <__swsetup_r+0x30>
 8007d7c:	2209      	movs	r2, #9
 8007d7e:	602a      	str	r2, [r5, #0]
 8007d80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d84:	81a3      	strh	r3, [r4, #12]
 8007d86:	f04f 30ff 	mov.w	r0, #4294967295
 8007d8a:	e033      	b.n	8007df4 <__swsetup_r+0x98>
 8007d8c:	0758      	lsls	r0, r3, #29
 8007d8e:	d512      	bpl.n	8007db6 <__swsetup_r+0x5a>
 8007d90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d92:	b141      	cbz	r1, 8007da6 <__swsetup_r+0x4a>
 8007d94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d98:	4299      	cmp	r1, r3
 8007d9a:	d002      	beq.n	8007da2 <__swsetup_r+0x46>
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	f7fe ff07 	bl	8006bb0 <_free_r>
 8007da2:	2300      	movs	r3, #0
 8007da4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007da6:	89a3      	ldrh	r3, [r4, #12]
 8007da8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007dac:	81a3      	strh	r3, [r4, #12]
 8007dae:	2300      	movs	r3, #0
 8007db0:	6063      	str	r3, [r4, #4]
 8007db2:	6923      	ldr	r3, [r4, #16]
 8007db4:	6023      	str	r3, [r4, #0]
 8007db6:	89a3      	ldrh	r3, [r4, #12]
 8007db8:	f043 0308 	orr.w	r3, r3, #8
 8007dbc:	81a3      	strh	r3, [r4, #12]
 8007dbe:	6923      	ldr	r3, [r4, #16]
 8007dc0:	b94b      	cbnz	r3, 8007dd6 <__swsetup_r+0x7a>
 8007dc2:	89a3      	ldrh	r3, [r4, #12]
 8007dc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007dc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dcc:	d003      	beq.n	8007dd6 <__swsetup_r+0x7a>
 8007dce:	4621      	mov	r1, r4
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	f000 f883 	bl	8007edc <__smakebuf_r>
 8007dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dda:	f013 0201 	ands.w	r2, r3, #1
 8007dde:	d00a      	beq.n	8007df6 <__swsetup_r+0x9a>
 8007de0:	2200      	movs	r2, #0
 8007de2:	60a2      	str	r2, [r4, #8]
 8007de4:	6962      	ldr	r2, [r4, #20]
 8007de6:	4252      	negs	r2, r2
 8007de8:	61a2      	str	r2, [r4, #24]
 8007dea:	6922      	ldr	r2, [r4, #16]
 8007dec:	b942      	cbnz	r2, 8007e00 <__swsetup_r+0xa4>
 8007dee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007df2:	d1c5      	bne.n	8007d80 <__swsetup_r+0x24>
 8007df4:	bd38      	pop	{r3, r4, r5, pc}
 8007df6:	0799      	lsls	r1, r3, #30
 8007df8:	bf58      	it	pl
 8007dfa:	6962      	ldrpl	r2, [r4, #20]
 8007dfc:	60a2      	str	r2, [r4, #8]
 8007dfe:	e7f4      	b.n	8007dea <__swsetup_r+0x8e>
 8007e00:	2000      	movs	r0, #0
 8007e02:	e7f7      	b.n	8007df4 <__swsetup_r+0x98>
 8007e04:	20000028 	.word	0x20000028

08007e08 <_raise_r>:
 8007e08:	291f      	cmp	r1, #31
 8007e0a:	b538      	push	{r3, r4, r5, lr}
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	460c      	mov	r4, r1
 8007e10:	d904      	bls.n	8007e1c <_raise_r+0x14>
 8007e12:	2316      	movs	r3, #22
 8007e14:	6003      	str	r3, [r0, #0]
 8007e16:	f04f 30ff 	mov.w	r0, #4294967295
 8007e1a:	bd38      	pop	{r3, r4, r5, pc}
 8007e1c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007e1e:	b112      	cbz	r2, 8007e26 <_raise_r+0x1e>
 8007e20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e24:	b94b      	cbnz	r3, 8007e3a <_raise_r+0x32>
 8007e26:	4628      	mov	r0, r5
 8007e28:	f000 f830 	bl	8007e8c <_getpid_r>
 8007e2c:	4622      	mov	r2, r4
 8007e2e:	4601      	mov	r1, r0
 8007e30:	4628      	mov	r0, r5
 8007e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e36:	f000 b817 	b.w	8007e68 <_kill_r>
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d00a      	beq.n	8007e54 <_raise_r+0x4c>
 8007e3e:	1c59      	adds	r1, r3, #1
 8007e40:	d103      	bne.n	8007e4a <_raise_r+0x42>
 8007e42:	2316      	movs	r3, #22
 8007e44:	6003      	str	r3, [r0, #0]
 8007e46:	2001      	movs	r0, #1
 8007e48:	e7e7      	b.n	8007e1a <_raise_r+0x12>
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007e50:	4620      	mov	r0, r4
 8007e52:	4798      	blx	r3
 8007e54:	2000      	movs	r0, #0
 8007e56:	e7e0      	b.n	8007e1a <_raise_r+0x12>

08007e58 <raise>:
 8007e58:	4b02      	ldr	r3, [pc, #8]	@ (8007e64 <raise+0xc>)
 8007e5a:	4601      	mov	r1, r0
 8007e5c:	6818      	ldr	r0, [r3, #0]
 8007e5e:	f7ff bfd3 	b.w	8007e08 <_raise_r>
 8007e62:	bf00      	nop
 8007e64:	20000028 	.word	0x20000028

08007e68 <_kill_r>:
 8007e68:	b538      	push	{r3, r4, r5, lr}
 8007e6a:	4d07      	ldr	r5, [pc, #28]	@ (8007e88 <_kill_r+0x20>)
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	4604      	mov	r4, r0
 8007e70:	4608      	mov	r0, r1
 8007e72:	4611      	mov	r1, r2
 8007e74:	602b      	str	r3, [r5, #0]
 8007e76:	f7f9 feb3 	bl	8001be0 <_kill>
 8007e7a:	1c43      	adds	r3, r0, #1
 8007e7c:	d102      	bne.n	8007e84 <_kill_r+0x1c>
 8007e7e:	682b      	ldr	r3, [r5, #0]
 8007e80:	b103      	cbz	r3, 8007e84 <_kill_r+0x1c>
 8007e82:	6023      	str	r3, [r4, #0]
 8007e84:	bd38      	pop	{r3, r4, r5, pc}
 8007e86:	bf00      	nop
 8007e88:	20000898 	.word	0x20000898

08007e8c <_getpid_r>:
 8007e8c:	f7f9 bea0 	b.w	8001bd0 <_getpid>

08007e90 <__swhatbuf_r>:
 8007e90:	b570      	push	{r4, r5, r6, lr}
 8007e92:	460c      	mov	r4, r1
 8007e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e98:	2900      	cmp	r1, #0
 8007e9a:	b096      	sub	sp, #88	@ 0x58
 8007e9c:	4615      	mov	r5, r2
 8007e9e:	461e      	mov	r6, r3
 8007ea0:	da0d      	bge.n	8007ebe <__swhatbuf_r+0x2e>
 8007ea2:	89a3      	ldrh	r3, [r4, #12]
 8007ea4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ea8:	f04f 0100 	mov.w	r1, #0
 8007eac:	bf14      	ite	ne
 8007eae:	2340      	movne	r3, #64	@ 0x40
 8007eb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	6031      	str	r1, [r6, #0]
 8007eb8:	602b      	str	r3, [r5, #0]
 8007eba:	b016      	add	sp, #88	@ 0x58
 8007ebc:	bd70      	pop	{r4, r5, r6, pc}
 8007ebe:	466a      	mov	r2, sp
 8007ec0:	f000 f848 	bl	8007f54 <_fstat_r>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	dbec      	blt.n	8007ea2 <__swhatbuf_r+0x12>
 8007ec8:	9901      	ldr	r1, [sp, #4]
 8007eca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007ece:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007ed2:	4259      	negs	r1, r3
 8007ed4:	4159      	adcs	r1, r3
 8007ed6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007eda:	e7eb      	b.n	8007eb4 <__swhatbuf_r+0x24>

08007edc <__smakebuf_r>:
 8007edc:	898b      	ldrh	r3, [r1, #12]
 8007ede:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ee0:	079d      	lsls	r5, r3, #30
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	d507      	bpl.n	8007ef8 <__smakebuf_r+0x1c>
 8007ee8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007eec:	6023      	str	r3, [r4, #0]
 8007eee:	6123      	str	r3, [r4, #16]
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	6163      	str	r3, [r4, #20]
 8007ef4:	b003      	add	sp, #12
 8007ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ef8:	ab01      	add	r3, sp, #4
 8007efa:	466a      	mov	r2, sp
 8007efc:	f7ff ffc8 	bl	8007e90 <__swhatbuf_r>
 8007f00:	9f00      	ldr	r7, [sp, #0]
 8007f02:	4605      	mov	r5, r0
 8007f04:	4639      	mov	r1, r7
 8007f06:	4630      	mov	r0, r6
 8007f08:	f7fe fec6 	bl	8006c98 <_malloc_r>
 8007f0c:	b948      	cbnz	r0, 8007f22 <__smakebuf_r+0x46>
 8007f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f12:	059a      	lsls	r2, r3, #22
 8007f14:	d4ee      	bmi.n	8007ef4 <__smakebuf_r+0x18>
 8007f16:	f023 0303 	bic.w	r3, r3, #3
 8007f1a:	f043 0302 	orr.w	r3, r3, #2
 8007f1e:	81a3      	strh	r3, [r4, #12]
 8007f20:	e7e2      	b.n	8007ee8 <__smakebuf_r+0xc>
 8007f22:	89a3      	ldrh	r3, [r4, #12]
 8007f24:	6020      	str	r0, [r4, #0]
 8007f26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f2a:	81a3      	strh	r3, [r4, #12]
 8007f2c:	9b01      	ldr	r3, [sp, #4]
 8007f2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007f32:	b15b      	cbz	r3, 8007f4c <__smakebuf_r+0x70>
 8007f34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f000 f81d 	bl	8007f78 <_isatty_r>
 8007f3e:	b128      	cbz	r0, 8007f4c <__smakebuf_r+0x70>
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	f023 0303 	bic.w	r3, r3, #3
 8007f46:	f043 0301 	orr.w	r3, r3, #1
 8007f4a:	81a3      	strh	r3, [r4, #12]
 8007f4c:	89a3      	ldrh	r3, [r4, #12]
 8007f4e:	431d      	orrs	r5, r3
 8007f50:	81a5      	strh	r5, [r4, #12]
 8007f52:	e7cf      	b.n	8007ef4 <__smakebuf_r+0x18>

08007f54 <_fstat_r>:
 8007f54:	b538      	push	{r3, r4, r5, lr}
 8007f56:	4d07      	ldr	r5, [pc, #28]	@ (8007f74 <_fstat_r+0x20>)
 8007f58:	2300      	movs	r3, #0
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	4608      	mov	r0, r1
 8007f5e:	4611      	mov	r1, r2
 8007f60:	602b      	str	r3, [r5, #0]
 8007f62:	f7f9 fe9d 	bl	8001ca0 <_fstat>
 8007f66:	1c43      	adds	r3, r0, #1
 8007f68:	d102      	bne.n	8007f70 <_fstat_r+0x1c>
 8007f6a:	682b      	ldr	r3, [r5, #0]
 8007f6c:	b103      	cbz	r3, 8007f70 <_fstat_r+0x1c>
 8007f6e:	6023      	str	r3, [r4, #0]
 8007f70:	bd38      	pop	{r3, r4, r5, pc}
 8007f72:	bf00      	nop
 8007f74:	20000898 	.word	0x20000898

08007f78 <_isatty_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	4d06      	ldr	r5, [pc, #24]	@ (8007f94 <_isatty_r+0x1c>)
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	4604      	mov	r4, r0
 8007f80:	4608      	mov	r0, r1
 8007f82:	602b      	str	r3, [r5, #0]
 8007f84:	f7f9 fe9c 	bl	8001cc0 <_isatty>
 8007f88:	1c43      	adds	r3, r0, #1
 8007f8a:	d102      	bne.n	8007f92 <_isatty_r+0x1a>
 8007f8c:	682b      	ldr	r3, [r5, #0]
 8007f8e:	b103      	cbz	r3, 8007f92 <_isatty_r+0x1a>
 8007f90:	6023      	str	r3, [r4, #0]
 8007f92:	bd38      	pop	{r3, r4, r5, pc}
 8007f94:	20000898 	.word	0x20000898

08007f98 <_init>:
 8007f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9a:	bf00      	nop
 8007f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f9e:	bc08      	pop	{r3}
 8007fa0:	469e      	mov	lr, r3
 8007fa2:	4770      	bx	lr

08007fa4 <_fini>:
 8007fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa6:	bf00      	nop
 8007fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007faa:	bc08      	pop	{r3}
 8007fac:	469e      	mov	lr, r3
 8007fae:	4770      	bx	lr
